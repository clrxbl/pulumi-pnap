// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pnap
{
    public static class GetPublicNetwork
    {
        /// <summary>
        /// Provides a phoenixNAP Public Network datasource. This can be used to read public networks.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a public network by name and show it's IP Blocks 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var public_Network_1 = Pnap.GetPublicNetwork.Invoke(new()
        ///     {
        ///         Name = "PubNet1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["iP-Blocks"] = public_Network_1.Apply(public_Network_1 =&gt; public_Network_1.Apply(getPublicNetworkResult =&gt; getPublicNetworkResult.IpBlocks)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPublicNetworkResult> InvokeAsync(GetPublicNetworkArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPublicNetworkResult>("pnap:index/getPublicNetwork:getPublicNetwork", args ?? new GetPublicNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP Public Network datasource. This can be used to read public networks.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a public network by name and show it's IP Blocks 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var public_Network_1 = Pnap.GetPublicNetwork.Invoke(new()
        ///     {
        ///         Name = "PubNet1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["iP-Blocks"] = public_Network_1.Apply(public_Network_1 =&gt; public_Network_1.Apply(getPublicNetworkResult =&gt; getPublicNetworkResult.IpBlocks)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPublicNetworkResult> Invoke(GetPublicNetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicNetworkResult>("pnap:index/getPublicNetwork:getPublicNetwork", args ?? new GetPublicNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPublicNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The public network identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The friendly name of this public network.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetPublicNetworkArgs()
        {
        }
        public static new GetPublicNetworkArgs Empty => new GetPublicNetworkArgs();
    }

    public sealed class GetPublicNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The public network identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The friendly name of this public network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetPublicNetworkInvokeArgs()
        {
        }
        public static new GetPublicNetworkInvokeArgs Empty => new GetPublicNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetPublicNetworkResult
    {
        /// <summary>
        /// Date and time when this public network was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// The description of this public network.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The IP Block identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of IP Blocks that are associated with this public network.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPublicNetworkIpBlockResult> IpBlocks;
        /// <summary>
        /// The location of this public network.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// A list of resources that are members of this public network.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPublicNetworkMembershipResult> Memberships;
        /// <summary>
        /// The friendly name of this public network.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The status of the public network.
        /// </summary>
        public readonly string Status;
        public readonly int VlanId;

        [OutputConstructor]
        private GetPublicNetworkResult(
            string createdOn,

            string description,

            string id,

            ImmutableArray<Outputs.GetPublicNetworkIpBlockResult> ipBlocks,

            string location,

            ImmutableArray<Outputs.GetPublicNetworkMembershipResult> memberships,

            string name,

            string status,

            int vlanId)
        {
            CreatedOn = createdOn;
            Description = description;
            Id = id;
            IpBlocks = ipBlocks;
            Location = location;
            Memberships = memberships;
            Name = name;
            Status = status;
            VlanId = vlanId;
        }
    }
}
