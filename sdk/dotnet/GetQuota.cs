// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pnap
{
    public static class GetQuota
    {
        /// <summary>
        /// Provides a phoenixNAP Quota datasource. This can be used to read Quotas.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a Quota by name and show it's details in alphabetical order
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetQuota.Invoke(new()
        ///     {
        ///         Name = "Public IPs",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["quota"] = test,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetQuotaResult> InvokeAsync(GetQuotaArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetQuotaResult>("pnap:index/getQuota:getQuota", args ?? new GetQuotaArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP Quota datasource. This can be used to read Quotas.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a Quota by name and show it's details in alphabetical order
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetQuota.Invoke(new()
        ///     {
        ///         Name = "Public IPs",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["quota"] = test,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetQuotaResult> Invoke(GetQuotaInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetQuotaResult>("pnap:index/getQuota:getQuota", args ?? new GetQuotaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQuotaArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Quota.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the Quota.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetQuotaArgs()
        {
        }
        public static new GetQuotaArgs Empty => new GetQuotaArgs();
    }

    public sealed class GetQuotaInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Quota.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the Quota.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetQuotaInvokeArgs()
        {
        }
        public static new GetQuotaInvokeArgs Empty => new GetQuotaInvokeArgs();
    }


    [OutputType]
    public sealed class GetQuotaResult
    {
        /// <summary>
        /// The Quota description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the Quota.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The new limit that is requested.
        /// </summary>
        public readonly int Limit;
        /// <summary>
        /// The name of the Quota.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of requests to change the limit on a Quota.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetQuotaQuotaEditLimitRequestDetailResult> QuotaEditLimitRequestDetails;
        /// <summary>
        /// The status of the Quota.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Unit of the Quota type.
        /// </summary>
        public readonly string Unit;
        /// <summary>
        /// The Quota used expressed as a number.
        /// </summary>
        public readonly int Used;

        [OutputConstructor]
        private GetQuotaResult(
            string description,

            string id,

            int limit,

            string name,

            ImmutableArray<Outputs.GetQuotaQuotaEditLimitRequestDetailResult> quotaEditLimitRequestDetails,

            string status,

            string unit,

            int used)
        {
            Description = description;
            Id = id;
            Limit = limit;
            Name = name;
            QuotaEditLimitRequestDetails = quotaEditLimitRequestDetails;
            Status = status;
            Unit = unit;
            Used = used;
        }
    }
}
