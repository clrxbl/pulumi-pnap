// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PhoenixNAP.Pulumi.Pnap
{
    public static class GetEvents
    {
        /// <summary>
        /// Provides a phoenixNAP events datasource. This can be used to read event logs.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch event logs by name and show their details.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetEvents.Invoke(new()
        ///     {
        ///         Events = new[]
        ///         {
        ///             new Pnap.Inputs.GetEventsEventInputArgs
        ///             {
        ///                 Name = "API.SshKeysUpdate",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["logs"] = test,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEventsResult> InvokeAsync(GetEventsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventsResult>("pnap:index/getEvents:getEvents", args ?? new GetEventsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP events datasource. This can be used to read event logs.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch event logs by name and show their details.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetEvents.Invoke(new()
        ///     {
        ///         Events = new[]
        ///         {
        ///             new Pnap.Inputs.GetEventsEventInputArgs
        ///             {
        ///                 Name = "API.SshKeysUpdate",
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["logs"] = test,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEventsResult> Invoke(GetEventsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventsResult>("pnap:index/getEvents:getEvents", args ?? new GetEventsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventsArgs : global::Pulumi.InvokeArgs
    {
        [Input("events", required: true)]
        private List<Inputs.GetEventsEventArgs>? _events;

        /// <summary>
        /// Block `events` has field `name`.
        /// </summary>
        public List<Inputs.GetEventsEventArgs> Events
        {
            get => _events ?? (_events = new List<Inputs.GetEventsEventArgs>());
            set => _events = value;
        }

        public GetEventsArgs()
        {
        }
        public static new GetEventsArgs Empty => new GetEventsArgs();
    }

    public sealed class GetEventsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("events", required: true)]
        private InputList<Inputs.GetEventsEventInputArgs>? _events;

        /// <summary>
        /// Block `events` has field `name`.
        /// </summary>
        public InputList<Inputs.GetEventsEventInputArgs> Events
        {
            get => _events ?? (_events = new InputList<Inputs.GetEventsEventInputArgs>());
            set => _events = value;
        }

        public GetEventsInvokeArgs()
        {
        }
        public static new GetEventsInvokeArgs Empty => new GetEventsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventsResult
    {
        /// <summary>
        /// The list of events recorded.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEventsEventResult> Events;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetEventsResult(
            ImmutableArray<Outputs.GetEventsEventResult> events,

            string id)
        {
            Events = events;
            Id = id;
        }
    }
}
