// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PhoenixNAP.Pulumi.Pnap
{
    public static class GetProducts
    {
        /// <summary>
        /// Provides a phoenixNAP products datasource. This can be used to read products.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch products by product category and show their details.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var query_B = Pnap.GetProducts.Invoke(new()
        ///     {
        ///         ProductCategory = "BANDWIDTH",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["products"] = query_B.Apply(query_B =&gt; query_B.Apply(getProductsResult =&gt; getProductsResult.Products)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProductsResult> InvokeAsync(GetProductsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProductsResult>("pnap:index/getProducts:getProducts", args ?? new GetProductsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP products datasource. This can be used to read products.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch products by product category and show their details.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var query_B = Pnap.GetProducts.Invoke(new()
        ///     {
        ///         ProductCategory = "BANDWIDTH",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["products"] = query_B.Apply(query_B =&gt; query_B.Apply(getProductsResult =&gt; getProductsResult.Products)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProductsResult> Invoke(GetProductsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProductsResult>("pnap:index/getProducts:getProducts", args ?? new GetProductsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProductsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The product category.
        /// </summary>
        [Input("productCategory")]
        public string? ProductCategory { get; set; }

        /// <summary>
        /// The code identifying the product. This code has significance across all locations.
        /// </summary>
        [Input("productCode")]
        public string? ProductCode { get; set; }

        /// <summary>
        /// The SKU identifier.
        /// </summary>
        [Input("skuCode")]
        public string? SkuCode { get; set; }

        public GetProductsArgs()
        {
        }
        public static new GetProductsArgs Empty => new GetProductsArgs();
    }

    public sealed class GetProductsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The product category.
        /// </summary>
        [Input("productCategory")]
        public Input<string>? ProductCategory { get; set; }

        /// <summary>
        /// The code identifying the product. This code has significance across all locations.
        /// </summary>
        [Input("productCode")]
        public Input<string>? ProductCode { get; set; }

        /// <summary>
        /// The SKU identifier.
        /// </summary>
        [Input("skuCode")]
        public Input<string>? SkuCode { get; set; }

        public GetProductsInvokeArgs()
        {
        }
        public static new GetProductsInvokeArgs Empty => new GetProductsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProductsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The code identifying the location.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The product category.
        /// </summary>
        public readonly string? ProductCategory;
        /// <summary>
        /// The code identifying the product.
        /// </summary>
        public readonly string? ProductCode;
        /// <summary>
        /// The list of products recorded.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProductsProductResult> Products;
        public readonly string? SkuCode;

        [OutputConstructor]
        private GetProductsResult(
            string id,

            string? location,

            string? productCategory,

            string? productCode,

            ImmutableArray<Outputs.GetProductsProductResult> products,

            string? skuCode)
        {
            Id = id;
            Location = location;
            ProductCategory = productCategory;
            ProductCode = productCode;
            Products = products;
            SkuCode = skuCode;
        }
    }
}
