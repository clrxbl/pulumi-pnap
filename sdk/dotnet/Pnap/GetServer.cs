// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PhoenixNAP.Pulumi.Pnap
{
    public static class GetServer
    {
        /// <summary>
        /// Provides a phoenixNAP server datasource. This can be used to read servers.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a server data by hostname and show it's primary public IP address
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var serverDs = Pnap.GetServer.Invoke(new()
        ///     {
        ///         Hostname = "demo-server",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serverId"] = serverDs.Apply(getServerResult =&gt; getServerResult.PrimaryIpAddress),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServerResult> InvokeAsync(GetServerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("pnap:index/getServer:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP server datasource. This can be used to read servers.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a server data by hostname and show it's primary public IP address
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var serverDs = Pnap.GetServer.Invoke(new()
        ///     {
        ///         Hostname = "demo-server",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["serverId"] = serverDs.Apply(getServerResult =&gt; getServerResult.PrimaryIpAddress),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("pnap:index/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Server hostname.
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        /// <summary>
        /// The unique identifier of the server.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetServerArgs()
        {
        }
        public static new GetServerArgs Empty => new GetServerArgs();
    }

    public sealed class GetServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Server hostname.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The unique identifier of the server.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetServerInvokeArgs()
        {
        }
        public static new GetServerInvokeArgs Empty => new GetServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerResult
    {
        public readonly string Hostname;
        /// <summary>
        /// The network identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Server Location ID. Cannot be changed once a server is created.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Netris Controller configuration properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerNetrisControllerResult> NetrisControllers;
        /// <summary>
        /// Netris Softgate configuration properties.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerNetrisSoftgateResult> NetrisSoftgates;
        /// <summary>
        /// Entire network details of bare metal server.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerNetworkConfigurationResult> NetworkConfigurations;
        /// <summary>
        /// The type of network configuration for this server.
        /// </summary>
        public readonly string NetworkType;
        /// <summary>
        /// The serverâ€™s OS ID used when the server was created.
        /// </summary>
        public readonly string Os;
        /// <summary>
        /// First usable public IP Address.
        /// </summary>
        public readonly string PrimaryIpAddress;
        /// <summary>
        /// Private IP Addresses assigned to server. Must contain at least 1 item.
        /// </summary>
        public readonly ImmutableArray<string> PrivateIpAddresses;
        /// <summary>
        /// Public IP Addresses assigned to server. Must contain at least 1 item.
        /// </summary>
        public readonly ImmutableArray<string> PublicIpAddresses;
        /// <summary>
        /// The status of the server.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Storage configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerStorageConfigurationResult> StorageConfigurations;
        /// <summary>
        /// Unique identifier of the server to which the reservation has been transferred.
        /// </summary>
        public readonly string SupersededBy;
        /// <summary>
        /// Unique identifier of the server from which the reservation has been transferred.
        /// </summary>
        public readonly string Supersedes;
        /// <summary>
        /// The tags assigned to the server.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerTagResult> Tags;
        /// <summary>
        /// Server type ID. Cannot be changed once a server is created.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetServerResult(
            string hostname,

            string id,

            string location,

            ImmutableArray<Outputs.GetServerNetrisControllerResult> netrisControllers,

            ImmutableArray<Outputs.GetServerNetrisSoftgateResult> netrisSoftgates,

            ImmutableArray<Outputs.GetServerNetworkConfigurationResult> networkConfigurations,

            string networkType,

            string os,

            string primaryIpAddress,

            ImmutableArray<string> privateIpAddresses,

            ImmutableArray<string> publicIpAddresses,

            string status,

            ImmutableArray<Outputs.GetServerStorageConfigurationResult> storageConfigurations,

            string supersededBy,

            string supersedes,

            ImmutableArray<Outputs.GetServerTagResult> tags,

            string type)
        {
            Hostname = hostname;
            Id = id;
            Location = location;
            NetrisControllers = netrisControllers;
            NetrisSoftgates = netrisSoftgates;
            NetworkConfigurations = networkConfigurations;
            NetworkType = networkType;
            Os = os;
            PrimaryIpAddress = primaryIpAddress;
            PrivateIpAddresses = privateIpAddresses;
            PublicIpAddresses = publicIpAddresses;
            Status = status;
            StorageConfigurations = storageConfigurations;
            SupersededBy = supersededBy;
            Supersedes = supersedes;
            Tags = tags;
            Type = type;
        }
    }
}
