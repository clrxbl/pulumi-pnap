// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PhoenixNAP.Pulumi.Pnap
{
    public static class GetReservation
    {
        /// <summary>
        /// Provides a phoenixNAP reservation datasource. This can be used to read reservation details.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a reservation by ID or SKU and show it's details in alphabetical order. 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetReservation.Invoke(new()
        ///     {
        ///         Id = "e6afba51-7de8-4080-83ab-0f915570659c",
        ///         Sku = "XXX-XXX-XXX",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["reservation"] = test,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReservationResult> InvokeAsync(GetReservationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReservationResult>("pnap:index/getReservation:getReservation", args ?? new GetReservationArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP reservation datasource. This can be used to read reservation details.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a reservation by ID or SKU and show it's details in alphabetical order. 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetReservation.Invoke(new()
        ///     {
        ///         Id = "e6afba51-7de8-4080-83ab-0f915570659c",
        ///         Sku = "XXX-XXX-XXX",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["reservation"] = test,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetReservationResult> Invoke(GetReservationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReservationResult>("pnap:index/getReservation:getReservation", args ?? new GetReservationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReservationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The reservation identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The SKU code of product pricing plan.
        /// </summary>
        [Input("sku")]
        public string? Sku { get; set; }

        public GetReservationArgs()
        {
        }
        public static new GetReservationArgs Empty => new GetReservationArgs();
    }

    public sealed class GetReservationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The reservation identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The SKU code of product pricing plan.
        /// </summary>
        [Input("sku")]
        public Input<string>? Sku { get; set; }

        public GetReservationInvokeArgs()
        {
        }
        public static new GetReservationInvokeArgs Empty => new GetReservationInvokeArgs();
    }


    [OutputType]
    public sealed class GetReservationResult
    {
        /// <summary>
        /// The resource ID currently being assigned to reservation.
        /// </summary>
        public readonly string AssignedResourceId;
        /// <summary>
        /// A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).
        /// </summary>
        public readonly bool AutoRenew;
        /// <summary>
        /// The point in time (in UTC) when the reservation ends.
        /// </summary>
        public readonly string EndDateTime;
        /// <summary>
        /// The reservation identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.
        /// </summary>
        public readonly string InitialInvoiceModel;
        /// <summary>
        /// The point in time (in UTC) when the reservation was renewed last.
        /// </summary>
        public readonly string LastRenewalDateTime;
        /// <summary>
        /// The location code.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Next billing date for reservation.
        /// </summary>
        public readonly string NextBillingDate;
        /// <summary>
        /// The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.
        /// </summary>
        public readonly string NextRenewalDateTime;
        /// <summary>
        /// Reservation price.
        /// </summary>
        public readonly double Price;
        /// <summary>
        /// The unit to which the price applies.
        /// </summary>
        public readonly string PriceUnit;
        /// <summary>
        /// The product category.
        /// </summary>
        public readonly string ProductCategory;
        /// <summary>
        /// The code identifying the product. This code has significance across all locations.
        /// </summary>
        public readonly string ProductCode;
        /// <summary>
        /// The reservation model.
        /// </summary>
        public readonly string ReservationModel;
        /// <summary>
        /// The SKU applied to this reservation.
        /// </summary>
        public readonly string Sku;
        /// <summary>
        /// The point in time (in UTC) when the reservation starts.
        /// </summary>
        public readonly string StartDateTime;

        [OutputConstructor]
        private GetReservationResult(
            string assignedResourceId,

            bool autoRenew,

            string endDateTime,

            string id,

            string initialInvoiceModel,

            string lastRenewalDateTime,

            string location,

            string nextBillingDate,

            string nextRenewalDateTime,

            double price,

            string priceUnit,

            string productCategory,

            string productCode,

            string reservationModel,

            string sku,

            string startDateTime)
        {
            AssignedResourceId = assignedResourceId;
            AutoRenew = autoRenew;
            EndDateTime = endDateTime;
            Id = id;
            InitialInvoiceModel = initialInvoiceModel;
            LastRenewalDateTime = lastRenewalDateTime;
            Location = location;
            NextBillingDate = nextBillingDate;
            NextRenewalDateTime = nextRenewalDateTime;
            Price = price;
            PriceUnit = priceUnit;
            ProductCategory = productCategory;
            ProductCode = productCode;
            ReservationModel = reservationModel;
            Sku = sku;
            StartDateTime = startDateTime;
        }
    }
}
