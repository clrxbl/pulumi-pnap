// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PhoenixNAP.Pulumi.Pnap
{
    public static class GetPrivateNetwork
    {
        /// <summary>
        /// Provides a phoenixNAP Private Network datasource. This can be used to read private networks.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a private network by name and show it's servers 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test_Network_44 = Pnap.GetPrivateNetwork.Invoke(new()
        ///     {
        ///         Name = "qqq",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["servers"] = test_Network_44.Apply(test_Network_44 =&gt; test_Network_44.Apply(getPrivateNetworkResult =&gt; getPrivateNetworkResult.Servers)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPrivateNetworkResult> InvokeAsync(GetPrivateNetworkArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrivateNetworkResult>("pnap:index/getPrivateNetwork:getPrivateNetwork", args ?? new GetPrivateNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP Private Network datasource. This can be used to read private networks.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a private network by name and show it's servers 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test_Network_44 = Pnap.GetPrivateNetwork.Invoke(new()
        ///     {
        ///         Name = "qqq",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["servers"] = test_Network_44.Apply(test_Network_44 =&gt; test_Network_44.Apply(getPrivateNetworkResult =&gt; getPrivateNetworkResult.Servers)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPrivateNetworkResult> Invoke(GetPrivateNetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrivateNetworkResult>("pnap:index/getPrivateNetwork:getPrivateNetwork", args ?? new GetPrivateNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrivateNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The private network identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The friendly name of this private network.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetPrivateNetworkArgs()
        {
        }
        public static new GetPrivateNetworkArgs Empty => new GetPrivateNetworkArgs();
    }

    public sealed class GetPrivateNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The private network identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The friendly name of this private network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetPrivateNetworkInvokeArgs()
        {
        }
        public static new GetPrivateNetworkInvokeArgs Empty => new GetPrivateNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrivateNetworkResult
    {
        /// <summary>
        /// IP range associated with this private network in CIDR notation.
        /// * `vlan_id `- The VLAN of this private network.
        /// </summary>
        public readonly string Cidr;
        /// <summary>
        /// Date and time when this private network was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// The description of this private network.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The server identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of this private network.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Identifies network as the default private network for the specified location. Default value is `false`.
        /// </summary>
        public readonly bool LocationDefault;
        /// <summary>
        /// A list of resources that are members of this private network.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPrivateNetworkMembershipResult> Memberships;
        /// <summary>
        /// The friendly name of this private network.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetPrivateNetworkServerResult> Servers;
        /// <summary>
        /// The status of the private network.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The type of the private network.
        /// * `servers ` - (Deprecated) List of servers' details linked to the private network.
        /// </summary>
        public readonly string Type;
        public readonly int VlanId;

        [OutputConstructor]
        private GetPrivateNetworkResult(
            string cidr,

            string createdOn,

            string description,

            string id,

            string location,

            bool locationDefault,

            ImmutableArray<Outputs.GetPrivateNetworkMembershipResult> memberships,

            string name,

            ImmutableArray<Outputs.GetPrivateNetworkServerResult> servers,

            string status,

            string type,

            int vlanId)
        {
            Cidr = cidr;
            CreatedOn = createdOn;
            Description = description;
            Id = id;
            Location = location;
            LocationDefault = locationDefault;
            Memberships = memberships;
            Name = name;
            Servers = servers;
            Status = status;
            Type = type;
            VlanId = vlanId;
        }
    }
}
