// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PhoenixNAP.Pulumi.Pnap
{
    public static class GetRancherCluster
    {
        /// <summary>
        /// Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a Rancher Cluster by ID or name and show it's details in alphabetical order. 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetRancherCluster.Invoke(new()
        ///     {
        ///         Id = "123",
        ///         Name = "Rancher-Deployment-1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["rancher-cluster"] = test,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRancherClusterResult> InvokeAsync(GetRancherClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRancherClusterResult>("pnap:index/getRancherCluster:getRancherCluster", args ?? new GetRancherClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a Rancher Cluster by ID or name and show it's details in alphabetical order. 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetRancherCluster.Invoke(new()
        ///     {
        ///         Id = "123",
        ///         Name = "Rancher-Deployment-1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["rancher-cluster"] = test,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRancherClusterResult> Invoke(GetRancherClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRancherClusterResult>("pnap:index/getRancherCluster:getRancherCluster", args ?? new GetRancherClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRancherClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster (Rancher Cluster) identifier.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Cluster name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetRancherClusterArgs()
        {
        }
        public static new GetRancherClusterArgs Empty => new GetRancherClusterArgs();
    }

    public sealed class GetRancherClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster (Rancher Cluster) identifier.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetRancherClusterInvokeArgs()
        {
        }
        public static new GetRancherClusterInvokeArgs Empty => new GetRancherClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetRancherClusterResult
    {
        /// <summary>
        /// Cluster description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The cluster identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Rancher version that was installed on the cluster during the first creation process.
        /// </summary>
        public readonly string InitialClusterVersion;
        /// <summary>
        /// Deployment location.
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Connection parameters to use to connect to the Rancher Server Administrative GUI.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRancherClusterMetadataResult> Metadatas;
        /// <summary>
        /// The name of the node pool.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The node pools associated with the cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRancherClusterNodePoolResult> NodePools;
        /// <summary>
        /// The cluster status.
        /// </summary>
        public readonly string StatusDescription;

        [OutputConstructor]
        private GetRancherClusterResult(
            string description,

            string id,

            string initialClusterVersion,

            string location,

            ImmutableArray<Outputs.GetRancherClusterMetadataResult> metadatas,

            string name,

            ImmutableArray<Outputs.GetRancherClusterNodePoolResult> nodePools,

            string statusDescription)
        {
            Description = description;
            Id = id;
            InitialClusterVersion = initialClusterVersion;
            Location = location;
            Metadatas = metadatas;
            Name = name;
            NodePools = nodePools;
            StatusDescription = statusDescription;
        }
    }
}
