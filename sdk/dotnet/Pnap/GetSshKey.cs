// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PhoenixNAP.Pulumi.Pnap
{
    public static class GetSshKey
    {
        /// <summary>
        /// Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a SSH key by name and show it's key 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetSshKey.Invoke(new()
        ///     {
        ///         Name = "test3",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["key"] = test.Apply(getSshKeyResult =&gt; getSshKeyResult.Key),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSshKeyResult> InvokeAsync(GetSshKeyArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSshKeyResult>("pnap:index/getSshKey:getSshKey", args ?? new GetSshKeyArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch a SSH key by name and show it's key 
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Pnap.GetSshKey.Invoke(new()
        ///     {
        ///         Name = "test3",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["key"] = test.Apply(getSshKeyResult =&gt; getSshKeyResult.Key),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSshKeyResult> Invoke(GetSshKeyInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSshKeyResult>("pnap:index/getSshKey:getSshKey", args ?? new GetSshKeyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSshKeyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SSH Key.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Friendly SSH key name to represent an SSH key.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetSshKeyArgs()
        {
        }
        public static new GetSshKeyArgs Empty => new GetSshKeyArgs();
    }

    public sealed class GetSshKeyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the SSH Key.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Friendly SSH key name to represent an SSH key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetSshKeyInvokeArgs()
        {
        }
        public static new GetSshKeyInvokeArgs Empty => new GetSshKeyInvokeArgs();
    }


    [OutputType]
    public sealed class GetSshKeyResult
    {
        /// <summary>
        /// Keys marked as default are always included on server creation and reset unless toggled off in creation/reset request.
        /// </summary>
        public readonly bool Default;
        /// <summary>
        /// The unique identifier of the SSH Key.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// SSH Key value.
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// Friendly SSH key name to represent an SSH key.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetSshKeyResult(
            bool @default,

            string id,

            string key,

            string name)
        {
            Default = @default;
            Id = id;
            Key = key;
            Name = name;
        }
    }
}
