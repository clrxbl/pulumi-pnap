// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pnap
{
    /// <summary>
    /// Provides a phoenixNAP Rancher Cluster resource. This can be used to create and delete Rancher Server deployments.
    /// 
    /// ## Example Usage
    /// 
    /// Create a Rancher Cluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pnap = Pulumi.Pnap;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a Rancher Cluster
    ///     var rancher_Deployment_1 = new Pnap.RancherCluster("rancher-Deployment-1", new()
    ///     {
    ///         Description = "A Rancher Server deployment with specific server type.",
    ///         Location = "PHX",
    ///         NodePools = new Pnap.Inputs.RancherClusterNodePoolsArgs
    ///         {
    ///             NodeCount = 1,
    ///             ServerType = "s1.c1.medium",
    ///             SshConfig = new Pnap.Inputs.RancherClusterNodePoolsSshConfigArgs
    ///             {
    ///                 InstallDefaultKeys = false,
    ///                 Keys = new[]
    ///                 {
    ///                     "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne",
    ///                     "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [PnapResourceType("pnap:index/rancherCluster:RancherCluster")]
    public partial class RancherCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Rancher configuration parameters. The `configuration` block has 7 fields.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.RancherClusterConfiguration?> Configuration { get; private set; } = null!;

        /// <summary>
        /// Cluster description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Rancher version that was installed on the cluster during the first creation process.
        /// </summary>
        [Output("initialClusterVersion")]
        public Output<string> InitialClusterVersion { get; private set; } = null!;

        /// <summary>
        /// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Connection parameters to use to connect to the Rancher Server Administrative GUI.
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.RancherClusterMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// The name of the workload cluster. This field is autogenerated if not provided.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        /// </summary>
        [Output("nodePools")]
        public Output<Outputs.RancherClusterNodePools> NodePools { get; private set; } = null!;

        /// <summary>
        /// The cluster status.
        /// </summary>
        [Output("statusDescription")]
        public Output<string> StatusDescription { get; private set; } = null!;

        /// <summary>
        /// Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        /// </summary>
        [Output("workloadConfiguration")]
        public Output<Outputs.RancherClusterWorkloadConfiguration?> WorkloadConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a RancherCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RancherCluster(string name, RancherClusterArgs args, CustomResourceOptions? options = null)
            : base("pnap:index/rancherCluster:RancherCluster", name, args ?? new RancherClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RancherCluster(string name, Input<string> id, RancherClusterState? state = null, CustomResourceOptions? options = null)
            : base("pnap:index/rancherCluster:RancherCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/phoenixnap/pulumi-pnap/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RancherCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RancherCluster Get(string name, Input<string> id, RancherClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new RancherCluster(name, id, state, options);
        }
    }

    public sealed class RancherClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Rancher configuration parameters. The `configuration` block has 7 fields.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.RancherClusterConfigurationArgs>? Configuration { get; set; }

        /// <summary>
        /// Cluster description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// The name of the workload cluster. This field is autogenerated if not provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        /// </summary>
        [Input("nodePools")]
        public Input<Inputs.RancherClusterNodePoolsArgs>? NodePools { get; set; }

        /// <summary>
        /// Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        /// </summary>
        [Input("workloadConfiguration")]
        public Input<Inputs.RancherClusterWorkloadConfigurationArgs>? WorkloadConfiguration { get; set; }

        public RancherClusterArgs()
        {
        }
        public static new RancherClusterArgs Empty => new RancherClusterArgs();
    }

    public sealed class RancherClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Rancher configuration parameters. The `configuration` block has 7 fields.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.RancherClusterConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// Cluster description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Rancher version that was installed on the cluster during the first creation process.
        /// </summary>
        [Input("initialClusterVersion")]
        public Input<string>? InitialClusterVersion { get; set; }

        /// <summary>
        /// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("metadatas")]
        private InputList<Inputs.RancherClusterMetadataGetArgs>? _metadatas;

        /// <summary>
        /// Connection parameters to use to connect to the Rancher Server Administrative GUI.
        /// </summary>
        public InputList<Inputs.RancherClusterMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.RancherClusterMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// The name of the workload cluster. This field is autogenerated if not provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        /// </summary>
        [Input("nodePools")]
        public Input<Inputs.RancherClusterNodePoolsGetArgs>? NodePools { get; set; }

        /// <summary>
        /// The cluster status.
        /// </summary>
        [Input("statusDescription")]
        public Input<string>? StatusDescription { get; set; }

        /// <summary>
        /// Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        /// </summary>
        [Input("workloadConfiguration")]
        public Input<Inputs.RancherClusterWorkloadConfigurationGetArgs>? WorkloadConfiguration { get; set; }

        public RancherClusterState()
        {
        }
        public static new RancherClusterState Empty => new RancherClusterState();
    }
}
