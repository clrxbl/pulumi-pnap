// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pnap
{
    /// <summary>
    /// Provides a phoenixNAP server resource. This can be used to create,
    /// modify, and delete servers.
    /// 
    /// ## Example Usage
    /// 
    /// Create a server
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Pnap = Pulumi.Pnap;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a server
    ///     var test_Server_1 = new Pnap.Server("test-Server-1", new()
    ///     {
    ///         Hostname = "Test-Server-1",
    ///         Os = "ubuntu/bionic",
    ///         Type = "s1.c1.medium",
    ///         Location = "PHX",
    ///         InstallDefaultSshKeys = true,
    ///         SshKeys = new[]
    ///         {
    ///             "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126",
    ///         },
    ///         CloudInit = new Pnap.Inputs.ServerCloudInitArgs
    ///         {
    ///             UserData = ReadFileBase64("~/terraform-provider-pnap/create-folder.txt"),
    ///         },
    ///         NetworkConfiguration = new Pnap.Inputs.ServerNetworkConfigurationArgs
    ///         {
    ///             PrivateNetworkConfiguration = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationArgs
    ///             {
    ///                 ConfigurationType = "USER_DEFINED",
    ///                 PrivateNetworks = new[]
    ///                 {
    ///                     new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs
    ///                     {
    ///                         ServerPrivateNetwork = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs
    ///                         {
    ///                             Id = pnap_private_network.Test_Network_33.Id,
    ///                             Ips = new[]
    ///                             {
    ///                                 "10.0.0.12",
    ///                             },
    ///                         },
    ///                     },
    ///                     new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs
    ///                     {
    ///                         ServerPrivateNetwork = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs
    ///                         {
    ///                             Id = pnap_private_network.Test_Network_44.Id,
    ///                             Ips = new[]
    ///                             {
    ///                                 "172.16.0.12",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     //pricing_model = "ONE_MONTH_RESERVATION"
    ///     //allowed actions are: reboot, reset, powered-on, powered-off, shutdown
    ///     //action = "powered-on"
    /// });
    /// ```
    /// </summary>
    [PnapResourceType("pnap:index/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        /// </summary>
        [Output("action")]
        public Output<string?> Action { get; private set; } = null!;

        /// <summary>
        /// Cloud-init configuration details. Structure is documented below.
        /// </summary>
        [Output("cloudInit")]
        public Output<Outputs.ServerCloudInit> CloudInit { get; private set; } = null!;

        /// <summary>
        /// The cluster reference id if any.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The number of physical cores present on each CPU.
        /// </summary>
        [Output("coresPerCpu")]
        public Output<int> CoresPerCpu { get; private set; } = null!;

        /// <summary>
        /// A description of the machine CPU.
        /// </summary>
        [Output("cpu")]
        public Output<string> Cpu { get; private set; } = null!;

        /// <summary>
        /// The number of CPUs available in the system.
        /// </summary>
        [Output("cpuCount")]
        public Output<int> CpuCount { get; private set; } = null!;

        /// <summary>
        /// The CPU frequency in GHz.
        /// </summary>
        [Output("cpuFrequencyInGhz")]
        public Output<int> CpuFrequencyInGhz { get; private set; } = null!;

        /// <summary>
        /// Server description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
        /// 
        /// 
        /// The `cloud_init` block has one field:
        /// </summary>
        [Output("force")]
        public Output<bool?> Force { get; private set; } = null!;

        /// <summary>
        /// Server hostname.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        [Output("installDefaultSshKeys")]
        public Output<bool?> InstallDefaultSshKeys { get; private set; } = null!;

        /// <summary>
        /// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        /// </summary>
        [Output("installOsToRam")]
        public Output<bool> InstallOsToRam { get; private set; } = null!;

        /// <summary>
        /// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        /// </summary>
        [Output("managementAccessAllowedIps")]
        public Output<ImmutableArray<string>> ManagementAccessAllowedIps { get; private set; } = null!;

        /// <summary>
        /// The URL of the management UI which will only be returned in response to provisioning a server.
        /// </summary>
        [Output("managementUiUrl")]
        public Output<string> ManagementUiUrl { get; private set; } = null!;

        /// <summary>
        /// Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
        /// </summary>
        [Output("netrisControllers")]
        public Output<ImmutableArray<Outputs.ServerNetrisController>> NetrisControllers { get; private set; } = null!;

        /// <summary>
        /// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        /// </summary>
        [Output("netrisSoftgate")]
        public Output<Outputs.ServerNetrisSoftgate> NetrisSoftgate { get; private set; } = null!;

        /// <summary>
        /// Entire network details of bare metal server. Structure is documented below.
        /// </summary>
        [Output("networkConfiguration")]
        public Output<Outputs.ServerNetworkConfiguration> NetworkConfiguration { get; private set; } = null!;

        /// <summary>
        /// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        /// </summary>
        [Output("networkType")]
        public Output<string> NetworkType { get; private set; } = null!;

        /// <summary>
        /// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        /// </summary>
        [Output("os")]
        public Output<string> Os { get; private set; } = null!;

        /// <summary>
        /// Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        /// </summary>
        [Output("pricingModel")]
        public Output<string> PricingModel { get; private set; } = null!;

        /// <summary>
        /// Private IP Addresses assigned to server. Must contain at least 1 item.
        /// </summary>
        [Output("privateIpAddresses")]
        public Output<ImmutableArray<string>> PrivateIpAddresses { get; private set; } = null!;

        /// <summary>
        /// Date and time when server was provisioned.
        /// </summary>
        [Output("provisionedOn")]
        public Output<string> ProvisionedOn { get; private set; } = null!;

        /// <summary>
        /// Public IP Addresses assigned to server. Must contain at least 1 item.
        /// </summary>
        [Output("publicIpAddresses")]
        public Output<ImmutableArray<string>> PublicIpAddresses { get; private set; } = null!;

        /// <summary>
        /// A description of the machine RAM.
        /// </summary>
        [Output("ram")]
        public Output<string> Ram { get; private set; } = null!;

        /// <summary>
        /// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        /// </summary>
        [Output("rdpAllowedIps")]
        public Output<ImmutableArray<string>> RdpAllowedIps { get; private set; } = null!;

        /// <summary>
        /// Server reservation ID.
        /// </summary>
        [Output("reservationId")]
        public Output<string> ReservationId { get; private set; } = null!;

        /// <summary>
        /// Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
        /// </summary>
        [Output("rootPassword")]
        public Output<string> RootPassword { get; private set; } = null!;

        /// <summary>
        /// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        /// </summary>
        [Output("sshKeyIds")]
        public Output<ImmutableArray<string>> SshKeyIds { get; private set; } = null!;

        /// <summary>
        /// A list of SSH Keys that will be installed on the server.
        /// </summary>
        [Output("sshKeys")]
        public Output<ImmutableArray<string>> SshKeys { get; private set; } = null!;

        /// <summary>
        /// The status of the server.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A description of the machine storage.
        /// </summary>
        [Output("storage")]
        public Output<string> Storage { get; private set; } = null!;

        /// <summary>
        /// Storage configuration. Structure is documented below.
        /// </summary>
        [Output("storageConfiguration")]
        public Output<Outputs.ServerStorageConfiguration?> StorageConfiguration { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the server to which the reservation has been transferred.
        /// </summary>
        [Output("supersededBy")]
        public Output<string> SupersededBy { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the server from which the reservation has been transferred.
        /// </summary>
        [Output("supersedes")]
        public Output<string> Supersedes { get; private set; } = null!;

        /// <summary>
        /// Tags to set to server, if any. Structure is documented below.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.ServerTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("pnap:index/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("pnap:index/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/phoenixnap/pulumi-pnap/releases/",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Cloud-init configuration details. Structure is documented below.
        /// </summary>
        [Input("cloudInit")]
        public Input<Inputs.ServerCloudInitArgs>? CloudInit { get; set; }

        /// <summary>
        /// Server description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
        /// 
        /// 
        /// The `cloud_init` block has one field:
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// Server hostname.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        [Input("installDefaultSshKeys")]
        public Input<bool>? InstallDefaultSshKeys { get; set; }

        /// <summary>
        /// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        /// </summary>
        [Input("installOsToRam")]
        public Input<bool>? InstallOsToRam { get; set; }

        /// <summary>
        /// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("managementAccessAllowedIps")]
        private InputList<string>? _managementAccessAllowedIps;

        /// <summary>
        /// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        /// </summary>
        public InputList<string> ManagementAccessAllowedIps
        {
            get => _managementAccessAllowedIps ?? (_managementAccessAllowedIps = new InputList<string>());
            set => _managementAccessAllowedIps = value;
        }

        /// <summary>
        /// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        /// </summary>
        [Input("netrisSoftgate")]
        public Input<Inputs.ServerNetrisSoftgateArgs>? NetrisSoftgate { get; set; }

        /// <summary>
        /// Entire network details of bare metal server. Structure is documented below.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.ServerNetworkConfigurationArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        /// </summary>
        [Input("os", required: true)]
        public Input<string> Os { get; set; } = null!;

        /// <summary>
        /// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        /// </summary>
        [Input("pricingModel")]
        public Input<string>? PricingModel { get; set; }

        [Input("rdpAllowedIps")]
        private InputList<string>? _rdpAllowedIps;

        /// <summary>
        /// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        /// </summary>
        public InputList<string> RdpAllowedIps
        {
            get => _rdpAllowedIps ?? (_rdpAllowedIps = new InputList<string>());
            set => _rdpAllowedIps = value;
        }

        /// <summary>
        /// Server reservation ID.
        /// </summary>
        [Input("reservationId")]
        public Input<string>? ReservationId { get; set; }

        [Input("sshKeyIds")]
        private InputList<string>? _sshKeyIds;

        /// <summary>
        /// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        /// </summary>
        public InputList<string> SshKeyIds
        {
            get => _sshKeyIds ?? (_sshKeyIds = new InputList<string>());
            set => _sshKeyIds = value;
        }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// A list of SSH Keys that will be installed on the server.
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// Storage configuration. Structure is documented below.
        /// </summary>
        [Input("storageConfiguration")]
        public Input<Inputs.ServerStorageConfigurationArgs>? StorageConfiguration { get; set; }

        [Input("tags")]
        private InputList<Inputs.ServerTagArgs>? _tags;

        /// <summary>
        /// Tags to set to server, if any. Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServerTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ServerTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Cloud-init configuration details. Structure is documented below.
        /// </summary>
        [Input("cloudInit")]
        public Input<Inputs.ServerCloudInitGetArgs>? CloudInit { get; set; }

        /// <summary>
        /// The cluster reference id if any.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The number of physical cores present on each CPU.
        /// </summary>
        [Input("coresPerCpu")]
        public Input<int>? CoresPerCpu { get; set; }

        /// <summary>
        /// A description of the machine CPU.
        /// </summary>
        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        /// <summary>
        /// The number of CPUs available in the system.
        /// </summary>
        [Input("cpuCount")]
        public Input<int>? CpuCount { get; set; }

        /// <summary>
        /// The CPU frequency in GHz.
        /// </summary>
        [Input("cpuFrequencyInGhz")]
        public Input<int>? CpuFrequencyInGhz { get; set; }

        /// <summary>
        /// Server description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
        /// 
        /// 
        /// The `cloud_init` block has one field:
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// Server hostname.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("installDefaultSshKeys")]
        public Input<bool>? InstallDefaultSshKeys { get; set; }

        /// <summary>
        /// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        /// </summary>
        [Input("installOsToRam")]
        public Input<bool>? InstallOsToRam { get; set; }

        /// <summary>
        /// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("managementAccessAllowedIps")]
        private InputList<string>? _managementAccessAllowedIps;

        /// <summary>
        /// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        /// </summary>
        public InputList<string> ManagementAccessAllowedIps
        {
            get => _managementAccessAllowedIps ?? (_managementAccessAllowedIps = new InputList<string>());
            set => _managementAccessAllowedIps = value;
        }

        /// <summary>
        /// The URL of the management UI which will only be returned in response to provisioning a server.
        /// </summary>
        [Input("managementUiUrl")]
        public Input<string>? ManagementUiUrl { get; set; }

        [Input("netrisControllers")]
        private InputList<Inputs.ServerNetrisControllerGetArgs>? _netrisControllers;

        /// <summary>
        /// Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
        /// </summary>
        public InputList<Inputs.ServerNetrisControllerGetArgs> NetrisControllers
        {
            get => _netrisControllers ?? (_netrisControllers = new InputList<Inputs.ServerNetrisControllerGetArgs>());
            set => _netrisControllers = value;
        }

        /// <summary>
        /// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        /// </summary>
        [Input("netrisSoftgate")]
        public Input<Inputs.ServerNetrisSoftgateGetArgs>? NetrisSoftgate { get; set; }

        /// <summary>
        /// Entire network details of bare metal server. Structure is documented below.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.ServerNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        /// <summary>
        /// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        /// </summary>
        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        /// <summary>
        /// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        /// </summary>
        [Input("os")]
        public Input<string>? Os { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        /// </summary>
        [Input("pricingModel")]
        public Input<string>? PricingModel { get; set; }

        [Input("privateIpAddresses")]
        private InputList<string>? _privateIpAddresses;

        /// <summary>
        /// Private IP Addresses assigned to server. Must contain at least 1 item.
        /// </summary>
        public InputList<string> PrivateIpAddresses
        {
            get => _privateIpAddresses ?? (_privateIpAddresses = new InputList<string>());
            set => _privateIpAddresses = value;
        }

        /// <summary>
        /// Date and time when server was provisioned.
        /// </summary>
        [Input("provisionedOn")]
        public Input<string>? ProvisionedOn { get; set; }

        [Input("publicIpAddresses")]
        private InputList<string>? _publicIpAddresses;

        /// <summary>
        /// Public IP Addresses assigned to server. Must contain at least 1 item.
        /// </summary>
        public InputList<string> PublicIpAddresses
        {
            get => _publicIpAddresses ?? (_publicIpAddresses = new InputList<string>());
            set => _publicIpAddresses = value;
        }

        /// <summary>
        /// A description of the machine RAM.
        /// </summary>
        [Input("ram")]
        public Input<string>? Ram { get; set; }

        [Input("rdpAllowedIps")]
        private InputList<string>? _rdpAllowedIps;

        /// <summary>
        /// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        /// </summary>
        public InputList<string> RdpAllowedIps
        {
            get => _rdpAllowedIps ?? (_rdpAllowedIps = new InputList<string>());
            set => _rdpAllowedIps = value;
        }

        /// <summary>
        /// Server reservation ID.
        /// </summary>
        [Input("reservationId")]
        public Input<string>? ReservationId { get; set; }

        /// <summary>
        /// Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
        /// </summary>
        [Input("rootPassword")]
        public Input<string>? RootPassword { get; set; }

        [Input("sshKeyIds")]
        private InputList<string>? _sshKeyIds;

        /// <summary>
        /// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        /// </summary>
        public InputList<string> SshKeyIds
        {
            get => _sshKeyIds ?? (_sshKeyIds = new InputList<string>());
            set => _sshKeyIds = value;
        }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// A list of SSH Keys that will be installed on the server.
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// The status of the server.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A description of the machine storage.
        /// </summary>
        [Input("storage")]
        public Input<string>? Storage { get; set; }

        /// <summary>
        /// Storage configuration. Structure is documented below.
        /// </summary>
        [Input("storageConfiguration")]
        public Input<Inputs.ServerStorageConfigurationGetArgs>? StorageConfiguration { get; set; }

        /// <summary>
        /// Unique identifier of the server to which the reservation has been transferred.
        /// </summary>
        [Input("supersededBy")]
        public Input<string>? SupersededBy { get; set; }

        /// <summary>
        /// Unique identifier of the server from which the reservation has been transferred.
        /// </summary>
        [Input("supersedes")]
        public Input<string>? Supersedes { get; set; }

        [Input("tags")]
        private InputList<Inputs.ServerTagGetArgs>? _tags;

        /// <summary>
        /// Tags to set to server, if any. Structure is documented below.
        /// </summary>
        public InputList<Inputs.ServerTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ServerTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
