// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Pnap
{
    public static class GetLocations
    {
        /// <summary>
        /// Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch locations by product category and show their details.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var query_C = Pnap.GetLocations.Invoke(new()
        ///     {
        ///         ProductCategory = "BANDWIDTH",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["locations"] = query_C.Apply(query_C =&gt; query_C.Apply(getLocationsResult =&gt; getLocationsResult.Locations)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLocationsResult> InvokeAsync(GetLocationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocationsResult>("pnap:index/getLocations:getLocations", args ?? new GetLocationsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.
        /// 
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Fetch locations by product category and show their details.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pnap = Pulumi.Pnap;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var query_C = Pnap.GetLocations.Invoke(new()
        ///     {
        ///         ProductCategory = "BANDWIDTH",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["locations"] = query_C.Apply(query_C =&gt; query_C.Apply(getLocationsResult =&gt; getLocationsResult.Locations)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetLocationsResult> Invoke(GetLocationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationsResult>("pnap:index/getLocations:getLocations", args ?? new GetLocationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
        /// </summary>
        [Input("location")]
        public string? Location { get; set; }

        /// <summary>
        /// The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.
        /// </summary>
        [Input("productCategory")]
        public string? ProductCategory { get; set; }

        public GetLocationsArgs()
        {
        }
        public static new GetLocationsArgs Empty => new GetLocationsArgs();
    }

    public sealed class GetLocationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.
        /// </summary>
        [Input("productCategory")]
        public Input<string>? ProductCategory { get; set; }

        public GetLocationsInvokeArgs()
        {
        }
        public static new GetLocationsInvokeArgs Empty => new GetLocationsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocationsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location code.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The list of locations found.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLocationsLocationResult> Locations;
        /// <summary>
        /// The product category.
        /// </summary>
        public readonly string? ProductCategory;

        [OutputConstructor]
        private GetLocationsResult(
            string id,

            string? location,

            ImmutableArray<Outputs.GetLocationsLocationResult> locations,

            string? productCategory)
        {
            Id = id;
            Location = location;
            Locations = locations;
            ProductCategory = productCategory;
        }
    }
}
