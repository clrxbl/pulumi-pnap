# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetReservationResult',
    'AwaitableGetReservationResult',
    'get_reservation',
    'get_reservation_output',
]

@pulumi.output_type
class GetReservationResult:
    """
    A collection of values returned by getReservation.
    """
    def __init__(__self__, assigned_resource_id=None, auto_renew=None, end_date_time=None, id=None, initial_invoice_model=None, last_renewal_date_time=None, location=None, next_billing_date=None, next_renewal_date_time=None, price=None, price_unit=None, product_category=None, product_code=None, reservation_model=None, sku=None, start_date_time=None):
        if assigned_resource_id and not isinstance(assigned_resource_id, str):
            raise TypeError("Expected argument 'assigned_resource_id' to be a str")
        pulumi.set(__self__, "assigned_resource_id", assigned_resource_id)
        if auto_renew and not isinstance(auto_renew, bool):
            raise TypeError("Expected argument 'auto_renew' to be a bool")
        pulumi.set(__self__, "auto_renew", auto_renew)
        if end_date_time and not isinstance(end_date_time, str):
            raise TypeError("Expected argument 'end_date_time' to be a str")
        pulumi.set(__self__, "end_date_time", end_date_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if initial_invoice_model and not isinstance(initial_invoice_model, str):
            raise TypeError("Expected argument 'initial_invoice_model' to be a str")
        pulumi.set(__self__, "initial_invoice_model", initial_invoice_model)
        if last_renewal_date_time and not isinstance(last_renewal_date_time, str):
            raise TypeError("Expected argument 'last_renewal_date_time' to be a str")
        pulumi.set(__self__, "last_renewal_date_time", last_renewal_date_time)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if next_billing_date and not isinstance(next_billing_date, str):
            raise TypeError("Expected argument 'next_billing_date' to be a str")
        pulumi.set(__self__, "next_billing_date", next_billing_date)
        if next_renewal_date_time and not isinstance(next_renewal_date_time, str):
            raise TypeError("Expected argument 'next_renewal_date_time' to be a str")
        pulumi.set(__self__, "next_renewal_date_time", next_renewal_date_time)
        if price and not isinstance(price, float):
            raise TypeError("Expected argument 'price' to be a float")
        pulumi.set(__self__, "price", price)
        if price_unit and not isinstance(price_unit, str):
            raise TypeError("Expected argument 'price_unit' to be a str")
        pulumi.set(__self__, "price_unit", price_unit)
        if product_category and not isinstance(product_category, str):
            raise TypeError("Expected argument 'product_category' to be a str")
        pulumi.set(__self__, "product_category", product_category)
        if product_code and not isinstance(product_code, str):
            raise TypeError("Expected argument 'product_code' to be a str")
        pulumi.set(__self__, "product_code", product_code)
        if reservation_model and not isinstance(reservation_model, str):
            raise TypeError("Expected argument 'reservation_model' to be a str")
        pulumi.set(__self__, "reservation_model", reservation_model)
        if sku and not isinstance(sku, str):
            raise TypeError("Expected argument 'sku' to be a str")
        pulumi.set(__self__, "sku", sku)
        if start_date_time and not isinstance(start_date_time, str):
            raise TypeError("Expected argument 'start_date_time' to be a str")
        pulumi.set(__self__, "start_date_time", start_date_time)

    @property
    @pulumi.getter(name="assignedResourceId")
    def assigned_resource_id(self) -> str:
        """
        The resource ID currently being assigned to reservation.
        """
        return pulumi.get(self, "assigned_resource_id")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> bool:
        """
        A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="endDateTime")
    def end_date_time(self) -> str:
        """
        The point in time (in UTC) when the reservation ends.
        """
        return pulumi.get(self, "end_date_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The reservation identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialInvoiceModel")
    def initial_invoice_model(self) -> str:
        """
        Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.
        """
        return pulumi.get(self, "initial_invoice_model")

    @property
    @pulumi.getter(name="lastRenewalDateTime")
    def last_renewal_date_time(self) -> str:
        """
        The point in time (in UTC) when the reservation was renewed last.
        """
        return pulumi.get(self, "last_renewal_date_time")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location code.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="nextBillingDate")
    def next_billing_date(self) -> str:
        """
        Next billing date for reservation.
        """
        return pulumi.get(self, "next_billing_date")

    @property
    @pulumi.getter(name="nextRenewalDateTime")
    def next_renewal_date_time(self) -> str:
        """
        The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.
        """
        return pulumi.get(self, "next_renewal_date_time")

    @property
    @pulumi.getter
    def price(self) -> float:
        """
        Reservation price.
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="priceUnit")
    def price_unit(self) -> str:
        """
        The unit to which the price applies.
        """
        return pulumi.get(self, "price_unit")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> str:
        """
        The product category.
        """
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> str:
        """
        The code identifying the product. This code has significance across all locations.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter(name="reservationModel")
    def reservation_model(self) -> str:
        """
        The reservation model.
        """
        return pulumi.get(self, "reservation_model")

    @property
    @pulumi.getter
    def sku(self) -> str:
        """
        The SKU applied to this reservation.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="startDateTime")
    def start_date_time(self) -> str:
        """
        The point in time (in UTC) when the reservation starts.
        """
        return pulumi.get(self, "start_date_time")


class AwaitableGetReservationResult(GetReservationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReservationResult(
            assigned_resource_id=self.assigned_resource_id,
            auto_renew=self.auto_renew,
            end_date_time=self.end_date_time,
            id=self.id,
            initial_invoice_model=self.initial_invoice_model,
            last_renewal_date_time=self.last_renewal_date_time,
            location=self.location,
            next_billing_date=self.next_billing_date,
            next_renewal_date_time=self.next_renewal_date_time,
            price=self.price,
            price_unit=self.price_unit,
            product_category=self.product_category,
            product_code=self.product_code,
            reservation_model=self.reservation_model,
            sku=self.sku,
            start_date_time=self.start_date_time)


def get_reservation(id: Optional[str] = None,
                    sku: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReservationResult:
    """
    Provides a phoenixNAP reservation datasource. This can be used to read reservation details.

    ## Example Usage

    Fetch a reservation by ID or SKU and show it's details in alphabetical order.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test = pnap.get_reservation(id="e6afba51-7de8-4080-83ab-0f915570659c",
        sku="XXX-XXX-XXX")
    pulumi.export("reservation", test)
    ```


    :param str id: The reservation identifier.
    :param str sku: The SKU code of product pricing plan.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['sku'] = sku
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getReservation:getReservation', __args__, opts=opts, typ=GetReservationResult).value

    return AwaitableGetReservationResult(
        assigned_resource_id=pulumi.get(__ret__, 'assigned_resource_id'),
        auto_renew=pulumi.get(__ret__, 'auto_renew'),
        end_date_time=pulumi.get(__ret__, 'end_date_time'),
        id=pulumi.get(__ret__, 'id'),
        initial_invoice_model=pulumi.get(__ret__, 'initial_invoice_model'),
        last_renewal_date_time=pulumi.get(__ret__, 'last_renewal_date_time'),
        location=pulumi.get(__ret__, 'location'),
        next_billing_date=pulumi.get(__ret__, 'next_billing_date'),
        next_renewal_date_time=pulumi.get(__ret__, 'next_renewal_date_time'),
        price=pulumi.get(__ret__, 'price'),
        price_unit=pulumi.get(__ret__, 'price_unit'),
        product_category=pulumi.get(__ret__, 'product_category'),
        product_code=pulumi.get(__ret__, 'product_code'),
        reservation_model=pulumi.get(__ret__, 'reservation_model'),
        sku=pulumi.get(__ret__, 'sku'),
        start_date_time=pulumi.get(__ret__, 'start_date_time'))


@_utilities.lift_output_func(get_reservation)
def get_reservation_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                           sku: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReservationResult]:
    """
    Provides a phoenixNAP reservation datasource. This can be used to read reservation details.

    ## Example Usage

    Fetch a reservation by ID or SKU and show it's details in alphabetical order.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test = pnap.get_reservation(id="e6afba51-7de8-4080-83ab-0f915570659c",
        sku="XXX-XXX-XXX")
    pulumi.export("reservation", test)
    ```


    :param str id: The reservation identifier.
    :param str sku: The SKU code of product pricing plan.
    """
    ...
