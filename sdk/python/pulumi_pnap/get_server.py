# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetServerResult',
    'AwaitableGetServerResult',
    'get_server',
    'get_server_output',
]

@pulumi.output_type
class GetServerResult:
    """
    A collection of values returned by getServer.
    """
    def __init__(__self__, hostname=None, id=None, location=None, netris_controllers=None, netris_softgates=None, network_configurations=None, network_type=None, os=None, primary_ip_address=None, private_ip_addresses=None, public_ip_addresses=None, status=None, storage_configurations=None, superseded_by=None, supersedes=None, tags=None, type=None):
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if netris_controllers and not isinstance(netris_controllers, list):
            raise TypeError("Expected argument 'netris_controllers' to be a list")
        pulumi.set(__self__, "netris_controllers", netris_controllers)
        if netris_softgates and not isinstance(netris_softgates, list):
            raise TypeError("Expected argument 'netris_softgates' to be a list")
        pulumi.set(__self__, "netris_softgates", netris_softgates)
        if network_configurations and not isinstance(network_configurations, list):
            raise TypeError("Expected argument 'network_configurations' to be a list")
        pulumi.set(__self__, "network_configurations", network_configurations)
        if network_type and not isinstance(network_type, str):
            raise TypeError("Expected argument 'network_type' to be a str")
        pulumi.set(__self__, "network_type", network_type)
        if os and not isinstance(os, str):
            raise TypeError("Expected argument 'os' to be a str")
        pulumi.set(__self__, "os", os)
        if primary_ip_address and not isinstance(primary_ip_address, str):
            raise TypeError("Expected argument 'primary_ip_address' to be a str")
        pulumi.set(__self__, "primary_ip_address", primary_ip_address)
        if private_ip_addresses and not isinstance(private_ip_addresses, list):
            raise TypeError("Expected argument 'private_ip_addresses' to be a list")
        pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        if public_ip_addresses and not isinstance(public_ip_addresses, list):
            raise TypeError("Expected argument 'public_ip_addresses' to be a list")
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if storage_configurations and not isinstance(storage_configurations, list):
            raise TypeError("Expected argument 'storage_configurations' to be a list")
        pulumi.set(__self__, "storage_configurations", storage_configurations)
        if superseded_by and not isinstance(superseded_by, str):
            raise TypeError("Expected argument 'superseded_by' to be a str")
        pulumi.set(__self__, "superseded_by", superseded_by)
        if supersedes and not isinstance(supersedes, str):
            raise TypeError("Expected argument 'supersedes' to be a str")
        pulumi.set(__self__, "supersedes", supersedes)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Server Location ID. Cannot be changed once a server is created.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="netrisControllers")
    def netris_controllers(self) -> Sequence['outputs.GetServerNetrisControllerResult']:
        """
        Netris Controller configuration properties.
        """
        return pulumi.get(self, "netris_controllers")

    @property
    @pulumi.getter(name="netrisSoftgates")
    def netris_softgates(self) -> Sequence['outputs.GetServerNetrisSoftgateResult']:
        """
        Netris Softgate configuration properties.
        """
        return pulumi.get(self, "netris_softgates")

    @property
    @pulumi.getter(name="networkConfigurations")
    def network_configurations(self) -> Sequence['outputs.GetServerNetworkConfigurationResult']:
        """
        Entire network details of bare metal server.
        """
        return pulumi.get(self, "network_configurations")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        The type of network configuration for this server.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def os(self) -> str:
        """
        The serverâ€™s OS ID used when the server was created.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="primaryIpAddress")
    def primary_ip_address(self) -> str:
        """
        First usable public IP Address.
        """
        return pulumi.get(self, "primary_ip_address")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Sequence[str]:
        """
        Private IP Addresses assigned to server. Must contain at least 1 item.
        """
        return pulumi.get(self, "private_ip_addresses")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP Addresses assigned to server. Must contain at least 1 item.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the server.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageConfigurations")
    def storage_configurations(self) -> Sequence['outputs.GetServerStorageConfigurationResult']:
        """
        Storage configuration.
        """
        return pulumi.get(self, "storage_configurations")

    @property
    @pulumi.getter(name="supersededBy")
    def superseded_by(self) -> str:
        """
        Unique identifier of the server to which the reservation has been transferred.
        """
        return pulumi.get(self, "superseded_by")

    @property
    @pulumi.getter
    def supersedes(self) -> str:
        """
        Unique identifier of the server from which the reservation has been transferred.
        """
        return pulumi.get(self, "supersedes")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetServerTagResult']:
        """
        The tags assigned to the server.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Server type ID. Cannot be changed once a server is created.
        """
        return pulumi.get(self, "type")


class AwaitableGetServerResult(GetServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServerResult(
            hostname=self.hostname,
            id=self.id,
            location=self.location,
            netris_controllers=self.netris_controllers,
            netris_softgates=self.netris_softgates,
            network_configurations=self.network_configurations,
            network_type=self.network_type,
            os=self.os,
            primary_ip_address=self.primary_ip_address,
            private_ip_addresses=self.private_ip_addresses,
            public_ip_addresses=self.public_ip_addresses,
            status=self.status,
            storage_configurations=self.storage_configurations,
            superseded_by=self.superseded_by,
            supersedes=self.supersedes,
            tags=self.tags,
            type=self.type)


def get_server(hostname: Optional[str] = None,
               id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServerResult:
    """
    Provides a phoenixNAP server datasource. This can be used to read servers.

    ## Example Usage

    Fetch a server data by hostname and show it's primary public IP address

    ```python
    import pulumi
    import pulumi_pnap as pnap

    server_ds = pnap.get_server(hostname="demo-server")
    pulumi.export("serverId", server_ds.primary_ip_address)
    ```


    :param str hostname: Server hostname.
    :param str id: The unique identifier of the server.
    """
    __args__ = dict()
    __args__['hostname'] = hostname
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getServer:getServer', __args__, opts=opts, typ=GetServerResult).value

    return AwaitableGetServerResult(
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        netris_controllers=pulumi.get(__ret__, 'netris_controllers'),
        netris_softgates=pulumi.get(__ret__, 'netris_softgates'),
        network_configurations=pulumi.get(__ret__, 'network_configurations'),
        network_type=pulumi.get(__ret__, 'network_type'),
        os=pulumi.get(__ret__, 'os'),
        primary_ip_address=pulumi.get(__ret__, 'primary_ip_address'),
        private_ip_addresses=pulumi.get(__ret__, 'private_ip_addresses'),
        public_ip_addresses=pulumi.get(__ret__, 'public_ip_addresses'),
        status=pulumi.get(__ret__, 'status'),
        storage_configurations=pulumi.get(__ret__, 'storage_configurations'),
        superseded_by=pulumi.get(__ret__, 'superseded_by'),
        supersedes=pulumi.get(__ret__, 'supersedes'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_server)
def get_server_output(hostname: Optional[pulumi.Input[Optional[str]]] = None,
                      id: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServerResult]:
    """
    Provides a phoenixNAP server datasource. This can be used to read servers.

    ## Example Usage

    Fetch a server data by hostname and show it's primary public IP address

    ```python
    import pulumi
    import pulumi_pnap as pnap

    server_ds = pnap.get_server(hostname="demo-server")
    pulumi.export("serverId", server_ds.primary_ip_address)
    ```


    :param str hostname: Server hostname.
    :param str id: The unique identifier of the server.
    """
    ...
