# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PublicNetworkArgs', 'PublicNetwork']

@pulumi.input_type
class PublicNetworkArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkIpBlockArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a PublicNetwork resource.
        :param pulumi.Input[str] location: The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
               * `vlan_id `- The VLAN that will be assigned to this network.
        :param pulumi.Input[str] description: The description of this public network.
        :param pulumi.Input[Sequence[pulumi.Input['PublicNetworkIpBlockArgs']]] ip_blocks: A list of IP Blocks that will be associated with this public network (10 items at most).
        :param pulumi.Input[str] name: The friendly name of this public network. This name should be unique.
        """
        pulumi.set(__self__, "location", location)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        * `vlan_id `- The VLAN that will be assigned to this network.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this public network.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkIpBlockArgs']]]]:
        """
        A list of IP Blocks that will be associated with this public network (10 items at most).
        """
        return pulumi.get(self, "ip_blocks")

    @ip_blocks.setter
    def ip_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkIpBlockArgs']]]]):
        pulumi.set(self, "ip_blocks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of this public network. This name should be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class _PublicNetworkState:
    def __init__(__self__, *,
                 created_on: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkIpBlockArgs']]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 memberships: Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkMembershipArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering PublicNetwork resources.
        :param pulumi.Input[str] created_on: Date and time when this public network was created.
        :param pulumi.Input[str] description: The description of this public network.
        :param pulumi.Input[Sequence[pulumi.Input['PublicNetworkIpBlockArgs']]] ip_blocks: A list of IP Blocks that will be associated with this public network (10 items at most).
        :param pulumi.Input[str] location: The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
               * `vlan_id `- The VLAN that will be assigned to this network.
        :param pulumi.Input[Sequence[pulumi.Input['PublicNetworkMembershipArgs']]] memberships: A list of resources that are members of this public network.
        :param pulumi.Input[str] name: The friendly name of this public network. This name should be unique.
        :param pulumi.Input[str] status: The status of the public network.
        """
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if memberships is not None:
            pulumi.set(__self__, "memberships", memberships)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when this public network was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this public network.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkIpBlockArgs']]]]:
        """
        A list of IP Blocks that will be associated with this public network (10 items at most).
        """
        return pulumi.get(self, "ip_blocks")

    @ip_blocks.setter
    def ip_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkIpBlockArgs']]]]):
        pulumi.set(self, "ip_blocks", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        * `vlan_id `- The VLAN that will be assigned to this network.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def memberships(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkMembershipArgs']]]]:
        """
        A list of resources that are members of this public network.
        """
        return pulumi.get(self, "memberships")

    @memberships.setter
    def memberships(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PublicNetworkMembershipArgs']]]]):
        pulumi.set(self, "memberships", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of this public network. This name should be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the public network.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


class PublicNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublicNetworkIpBlockArgs']]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a phoenixNAP Public Network resource. This can be used to create,
        modify, and delete public networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a public network
        public__network_1 = pnap.PublicNetwork("public-Network-1",
            description="First public network.",
            ip_blocks=[
                pnap.PublicNetworkIpBlockArgs(
                    public_network_ip_block=pnap.PublicNetworkIpBlockPublicNetworkIpBlockArgs(
                        id="60473a6115e34466c9f8f083",
                    ),
                ),
                pnap.PublicNetworkIpBlockArgs(
                    public_network_ip_block=pnap.PublicNetworkIpBlockPublicNetworkIpBlockArgs(
                        id="616e6ec6d66b406a45ab8797",
                    ),
                ),
            ],
            location="PHX")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of this public network.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublicNetworkIpBlockArgs']]]] ip_blocks: A list of IP Blocks that will be associated with this public network (10 items at most).
        :param pulumi.Input[str] location: The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
               * `vlan_id `- The VLAN that will be assigned to this network.
        :param pulumi.Input[str] name: The friendly name of this public network. This name should be unique.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PublicNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a phoenixNAP Public Network resource. This can be used to create,
        modify, and delete public networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a public network
        public__network_1 = pnap.PublicNetwork("public-Network-1",
            description="First public network.",
            ip_blocks=[
                pnap.PublicNetworkIpBlockArgs(
                    public_network_ip_block=pnap.PublicNetworkIpBlockPublicNetworkIpBlockArgs(
                        id="60473a6115e34466c9f8f083",
                    ),
                ),
                pnap.PublicNetworkIpBlockArgs(
                    public_network_ip_block=pnap.PublicNetworkIpBlockPublicNetworkIpBlockArgs(
                        id="616e6ec6d66b406a45ab8797",
                    ),
                ),
            ],
            location="PHX")
        ```

        :param str resource_name: The name of the resource.
        :param PublicNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PublicNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublicNetworkIpBlockArgs']]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PublicNetworkArgs.__new__(PublicNetworkArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["ip_blocks"] = ip_blocks
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["created_on"] = None
            __props__.__dict__["memberships"] = None
            __props__.__dict__["status"] = None
        super(PublicNetwork, __self__).__init__(
            'pnap:index/publicNetwork:PublicNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_on: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublicNetworkIpBlockArgs']]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            memberships: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublicNetworkMembershipArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            vlan_id: Optional[pulumi.Input[int]] = None) -> 'PublicNetwork':
        """
        Get an existing PublicNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_on: Date and time when this public network was created.
        :param pulumi.Input[str] description: The description of this public network.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublicNetworkIpBlockArgs']]]] ip_blocks: A list of IP Blocks that will be associated with this public network (10 items at most).
        :param pulumi.Input[str] location: The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
               * `vlan_id `- The VLAN that will be assigned to this network.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublicNetworkMembershipArgs']]]] memberships: A list of resources that are members of this public network.
        :param pulumi.Input[str] name: The friendly name of this public network. This name should be unique.
        :param pulumi.Input[str] status: The status of the public network.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PublicNetworkState.__new__(_PublicNetworkState)

        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["ip_blocks"] = ip_blocks
        __props__.__dict__["location"] = location
        __props__.__dict__["memberships"] = memberships
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["vlan_id"] = vlan_id
        return PublicNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[str]:
        """
        Date and time when this public network was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this public network.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> pulumi.Output[Sequence['outputs.PublicNetworkIpBlock']]:
        """
        A list of IP Blocks that will be associated with this public network (10 items at most).
        """
        return pulumi.get(self, "ip_blocks")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        * `vlan_id `- The VLAN that will be assigned to this network.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def memberships(self) -> pulumi.Output[Sequence['outputs.PublicNetworkMembership']]:
        """
        A list of resources that are members of this public network.
        """
        return pulumi.get(self, "memberships")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The friendly name of this public network. This name should be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the public network.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vlan_id")

