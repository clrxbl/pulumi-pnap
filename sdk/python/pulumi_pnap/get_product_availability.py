# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetProductAvailabilityResult',
    'AwaitableGetProductAvailabilityResult',
    'get_product_availability',
    'get_product_availability_output',
]

@pulumi.output_type
class GetProductAvailabilityResult:
    """
    A collection of values returned by getProductAvailability.
    """
    def __init__(__self__, id=None, locations=None, min_quantity=None, product_availabilities=None, product_categories=None, product_codes=None, show_only_min_quantity_available=None, solutions=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if min_quantity and not isinstance(min_quantity, float):
            raise TypeError("Expected argument 'min_quantity' to be a float")
        pulumi.set(__self__, "min_quantity", min_quantity)
        if product_availabilities and not isinstance(product_availabilities, list):
            raise TypeError("Expected argument 'product_availabilities' to be a list")
        pulumi.set(__self__, "product_availabilities", product_availabilities)
        if product_categories and not isinstance(product_categories, list):
            raise TypeError("Expected argument 'product_categories' to be a list")
        pulumi.set(__self__, "product_categories", product_categories)
        if product_codes and not isinstance(product_codes, list):
            raise TypeError("Expected argument 'product_codes' to be a list")
        pulumi.set(__self__, "product_codes", product_codes)
        if show_only_min_quantity_available and not isinstance(show_only_min_quantity_available, bool):
            raise TypeError("Expected argument 'show_only_min_quantity_available' to be a bool")
        pulumi.set(__self__, "show_only_min_quantity_available", show_only_min_quantity_available)
        if solutions and not isinstance(solutions, list):
            raise TypeError("Expected argument 'solutions' to be a list")
        pulumi.set(__self__, "solutions", solutions)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        """
        The code identifying the location.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="minQuantity")
    def min_quantity(self) -> Optional[float]:
        return pulumi.get(self, "min_quantity")

    @property
    @pulumi.getter(name="productAvailabilities")
    def product_availabilities(self) -> Sequence['outputs.GetProductAvailabilityProductAvailabilityResult']:
        """
        List of product availabilities.
        """
        return pulumi.get(self, "product_availabilities")

    @property
    @pulumi.getter(name="productCategories")
    def product_categories(self) -> Optional[Sequence[str]]:
        """
        The product category.
        """
        return pulumi.get(self, "product_categories")

    @property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Optional[Sequence[str]]:
        """
        The code identifying the product.
        """
        return pulumi.get(self, "product_codes")

    @property
    @pulumi.getter(name="showOnlyMinQuantityAvailable")
    def show_only_min_quantity_available(self) -> Optional[bool]:
        return pulumi.get(self, "show_only_min_quantity_available")

    @property
    @pulumi.getter
    def solutions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "solutions")


class AwaitableGetProductAvailabilityResult(GetProductAvailabilityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProductAvailabilityResult(
            id=self.id,
            locations=self.locations,
            min_quantity=self.min_quantity,
            product_availabilities=self.product_availabilities,
            product_categories=self.product_categories,
            product_codes=self.product_codes,
            show_only_min_quantity_available=self.show_only_min_quantity_available,
            solutions=self.solutions)


def get_product_availability(locations: Optional[Sequence[str]] = None,
                             min_quantity: Optional[float] = None,
                             product_categories: Optional[Sequence[str]] = None,
                             product_codes: Optional[Sequence[str]] = None,
                             show_only_min_quantity_available: Optional[bool] = None,
                             solutions: Optional[Sequence[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProductAvailabilityResult:
    """
    Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.

    ## Example Usage

    Fetch product availabilities by product category, product codes and locations.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    query_1 = pnap.get_product_availability(product_categories=["SERVER"],
        product_codes=[
            "s1.c1.small",
            "s1.c1.medium",
        ],
        locations=[
            "PHX",
            "ASH",
        ])
    pulumi.export("availabilities", query_1.product_availabilities)
    ```


    :param Sequence[str] locations: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
    :param float min_quantity: Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.
    :param Sequence[str] product_categories: Product category. Currently only `SERVER` category is supported.
    :param Sequence[str] product_codes: The code identifying the product. This code has significance across all locations.
    :param bool show_only_min_quantity_available: Show only locations where product with requested quantity is available or all locations where product is offered. Default value is `true`.
    :param Sequence[str] solutions: Currently only the following value is allowed: `SERVER_RANCHER`.
    """
    __args__ = dict()
    __args__['locations'] = locations
    __args__['minQuantity'] = min_quantity
    __args__['productCategories'] = product_categories
    __args__['productCodes'] = product_codes
    __args__['showOnlyMinQuantityAvailable'] = show_only_min_quantity_available
    __args__['solutions'] = solutions
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getProductAvailability:getProductAvailability', __args__, opts=opts, typ=GetProductAvailabilityResult).value

    return AwaitableGetProductAvailabilityResult(
        id=pulumi.get(__ret__, 'id'),
        locations=pulumi.get(__ret__, 'locations'),
        min_quantity=pulumi.get(__ret__, 'min_quantity'),
        product_availabilities=pulumi.get(__ret__, 'product_availabilities'),
        product_categories=pulumi.get(__ret__, 'product_categories'),
        product_codes=pulumi.get(__ret__, 'product_codes'),
        show_only_min_quantity_available=pulumi.get(__ret__, 'show_only_min_quantity_available'),
        solutions=pulumi.get(__ret__, 'solutions'))


@_utilities.lift_output_func(get_product_availability)
def get_product_availability_output(locations: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    min_quantity: Optional[pulumi.Input[Optional[float]]] = None,
                                    product_categories: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    product_codes: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    show_only_min_quantity_available: Optional[pulumi.Input[Optional[bool]]] = None,
                                    solutions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProductAvailabilityResult]:
    """
    Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.

    ## Example Usage

    Fetch product availabilities by product category, product codes and locations.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    query_1 = pnap.get_product_availability(product_categories=["SERVER"],
        product_codes=[
            "s1.c1.small",
            "s1.c1.medium",
        ],
        locations=[
            "PHX",
            "ASH",
        ])
    pulumi.export("availabilities", query_1.product_availabilities)
    ```


    :param Sequence[str] locations: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
    :param float min_quantity: Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.
    :param Sequence[str] product_categories: Product category. Currently only `SERVER` category is supported.
    :param Sequence[str] product_codes: The code identifying the product. This code has significance across all locations.
    :param bool show_only_min_quantity_available: Show only locations where product with requested quantity is available or all locations where product is offered. Default value is `true`.
    :param Sequence[str] solutions: Currently only the following value is allowed: `SERVER_RANCHER`.
    """
    ...
