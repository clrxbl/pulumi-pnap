# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PrivateNetworkArgs', 'PrivateNetwork']

@pulumi.input_type
class PrivateNetworkArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 cidr: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 location_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a PrivateNetwork resource.
        :param pulumi.Input[str] location: The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        :param pulumi.Input[str] cidr: IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.
        :param pulumi.Input[str] description: The description of this private network.
        :param pulumi.Input[bool] force: Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.
        :param pulumi.Input[bool] location_default: Identifies network as the default private network for the specified location. Default value is `false`.
               * `vlan_id `- The VLAN that will be assigned to this network.
        :param pulumi.Input[str] name: The friendly name of this private network. This name should be unique.
        """
        pulumi.set(__self__, "location", location)
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if location_default is not None:
            pulumi.set(__self__, "location_default", location_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this private network.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="locationDefault")
    def location_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Identifies network as the default private network for the specified location. Default value is `false`.
        * `vlan_id `- The VLAN that will be assigned to this network.
        """
        return pulumi.get(self, "location_default")

    @location_default.setter
    def location_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "location_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of this private network. This name should be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class _PrivateNetworkState:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 location_default: Optional[pulumi.Input[bool]] = None,
                 memberships: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateNetworkMembershipArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateNetworkServerArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering PrivateNetwork resources.
        :param pulumi.Input[str] cidr: IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.
        :param pulumi.Input[str] created_on: Date and time when this private network was created.
        :param pulumi.Input[str] description: The description of this private network.
        :param pulumi.Input[bool] force: Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.
        :param pulumi.Input[str] location: The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        :param pulumi.Input[bool] location_default: Identifies network as the default private network for the specified location. Default value is `false`.
               * `vlan_id `- The VLAN that will be assigned to this network.
        :param pulumi.Input[Sequence[pulumi.Input['PrivateNetworkMembershipArgs']]] memberships: A list of resources that are members of this private network.
        :param pulumi.Input[str] name: The friendly name of this private network. This name should be unique.
        :param pulumi.Input[str] status: The status of the private network.
        :param pulumi.Input[str] type: The type of the private network.
               * `servers ` - (Deprecated) List of server details linked to the private network.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if location_default is not None:
            pulumi.set(__self__, "location_default", location_default)
        if memberships is not None:
            pulumi.set(__self__, "memberships", memberships)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when this private network was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this private network.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="locationDefault")
    def location_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Identifies network as the default private network for the specified location. Default value is `false`.
        * `vlan_id `- The VLAN that will be assigned to this network.
        """
        return pulumi.get(self, "location_default")

    @location_default.setter
    def location_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "location_default", value)

    @property
    @pulumi.getter
    def memberships(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateNetworkMembershipArgs']]]]:
        """
        A list of resources that are members of this private network.
        """
        return pulumi.get(self, "memberships")

    @memberships.setter
    def memberships(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateNetworkMembershipArgs']]]]):
        pulumi.set(self, "memberships", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of this private network. This name should be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PrivateNetworkServerArgs']]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PrivateNetworkServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the private network.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the private network.
        * `servers ` - (Deprecated) List of server details linked to the private network.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


class PrivateNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 location_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a phoenixNAP Private Network resource. This can be used to create,
        modify, and delete private networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a private network
        test__network_33 = pnap.PrivateNetwork("test-Network-33",
            cidr="10.0.0.0/24",
            location="PHX")
        test__network_44 = pnap.PrivateNetwork("test-Network-44",
            cidr="172.16.0.0/24",
            location="PHX")
        # Create a server
        test__server_1 = pnap.Server("test-Server-1",
            hostname="Test-Server-1",
            os="ubuntu/bionic",
            type="s1.c1.medium",
            location="PHX",
            install_default_ssh_keys=True,
            network_configuration=pnap.ServerNetworkConfigurationArgs(
                private_network_configuration=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs(
                    configuration_type="USER_DEFINED",
                    private_networks=[
                        pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(
                            server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(
                                id=test__network_33.id,
                                ips=["10.0.0.12"],
                            ),
                        ),
                        pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(
                            server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(
                                id=test__network_44.id,
                                ips=["172.16.0.12"],
                            ),
                        ),
                    ],
                ),
            ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.
        :param pulumi.Input[str] description: The description of this private network.
        :param pulumi.Input[bool] force: Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.
        :param pulumi.Input[str] location: The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        :param pulumi.Input[bool] location_default: Identifies network as the default private network for the specified location. Default value is `false`.
               * `vlan_id `- The VLAN that will be assigned to this network.
        :param pulumi.Input[str] name: The friendly name of this private network. This name should be unique.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a phoenixNAP Private Network resource. This can be used to create,
        modify, and delete private networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a private network
        test__network_33 = pnap.PrivateNetwork("test-Network-33",
            cidr="10.0.0.0/24",
            location="PHX")
        test__network_44 = pnap.PrivateNetwork("test-Network-44",
            cidr="172.16.0.0/24",
            location="PHX")
        # Create a server
        test__server_1 = pnap.Server("test-Server-1",
            hostname="Test-Server-1",
            os="ubuntu/bionic",
            type="s1.c1.medium",
            location="PHX",
            install_default_ssh_keys=True,
            network_configuration=pnap.ServerNetworkConfigurationArgs(
                private_network_configuration=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs(
                    configuration_type="USER_DEFINED",
                    private_networks=[
                        pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(
                            server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(
                                id=test__network_33.id,
                                ips=["10.0.0.12"],
                            ),
                        ),
                        pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(
                            server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(
                                id=test__network_44.id,
                                ips=["172.16.0.12"],
                            ),
                        ),
                    ],
                ),
            ))
        ```

        :param str resource_name: The name of the resource.
        :param PrivateNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 location_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateNetworkArgs.__new__(PrivateNetworkArgs)

            __props__.__dict__["cidr"] = cidr
            __props__.__dict__["description"] = description
            __props__.__dict__["force"] = force
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["location_default"] = location_default
            __props__.__dict__["name"] = name
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["created_on"] = None
            __props__.__dict__["memberships"] = None
            __props__.__dict__["servers"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        super(PrivateNetwork, __self__).__init__(
            'pnap:index/privateNetwork:PrivateNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr: Optional[pulumi.Input[str]] = None,
            created_on: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            force: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            location_default: Optional[pulumi.Input[bool]] = None,
            memberships: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivateNetworkMembershipArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivateNetworkServerArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vlan_id: Optional[pulumi.Input[int]] = None) -> 'PrivateNetwork':
        """
        Get an existing PrivateNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.
        :param pulumi.Input[str] created_on: Date and time when this private network was created.
        :param pulumi.Input[str] description: The description of this private network.
        :param pulumi.Input[bool] force: Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.
        :param pulumi.Input[str] location: The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        :param pulumi.Input[bool] location_default: Identifies network as the default private network for the specified location. Default value is `false`.
               * `vlan_id `- The VLAN that will be assigned to this network.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PrivateNetworkMembershipArgs']]]] memberships: A list of resources that are members of this private network.
        :param pulumi.Input[str] name: The friendly name of this private network. This name should be unique.
        :param pulumi.Input[str] status: The status of the private network.
        :param pulumi.Input[str] type: The type of the private network.
               * `servers ` - (Deprecated) List of server details linked to the private network.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivateNetworkState.__new__(_PrivateNetworkState)

        __props__.__dict__["cidr"] = cidr
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["force"] = force
        __props__.__dict__["location"] = location
        __props__.__dict__["location_default"] = location_default
        __props__.__dict__["memberships"] = memberships
        __props__.__dict__["name"] = name
        __props__.__dict__["servers"] = servers
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["vlan_id"] = vlan_id
        return PrivateNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Output[str]:
        """
        IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[str]:
        """
        Date and time when this private network was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this private network.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[bool]]:
        """
        Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.
        """
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="locationDefault")
    def location_default(self) -> pulumi.Output[bool]:
        """
        Identifies network as the default private network for the specified location. Default value is `false`.
        * `vlan_id `- The VLAN that will be assigned to this network.
        """
        return pulumi.get(self, "location_default")

    @property
    @pulumi.getter
    def memberships(self) -> pulumi.Output[Sequence['outputs.PrivateNetworkMembership']]:
        """
        A list of resources that are members of this private network.
        """
        return pulumi.get(self, "memberships")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The friendly name of this private network. This name should be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[Sequence['outputs.PrivateNetworkServer']]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the private network.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of the private network.
        * `servers ` - (Deprecated) List of server details linked to the private network.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vlan_id")

