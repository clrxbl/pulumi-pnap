# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEventsResult',
    'AwaitableGetEventsResult',
    'get_events',
    'get_events_output',
]

@pulumi.output_type
class GetEventsResult:
    """
    A collection of values returned by getEvents.
    """
    def __init__(__self__, events=None, id=None):
        if events and not isinstance(events, list):
            raise TypeError("Expected argument 'events' to be a list")
        pulumi.set(__self__, "events", events)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.GetEventsEventResult']:
        """
        The list of events recorded.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetEventsResult(GetEventsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventsResult(
            events=self.events,
            id=self.id)


def get_events(events: Optional[Sequence[pulumi.InputType['GetEventsEventArgs']]] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventsResult:
    """
    Provides a phoenixNAP events datasource. This can be used to read event logs.

    ## Example Usage

    Fetch event logs by name and show their details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test = pnap.get_events(events=[pnap.GetEventsEventArgs(
        name="API.SshKeysUpdate",
    )])
    pulumi.export("logs", test)
    ```


    :param Sequence[pulumi.InputType['GetEventsEventArgs']] events: Block `events` has field `name`.
    """
    __args__ = dict()
    __args__['events'] = events
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getEvents:getEvents', __args__, opts=opts, typ=GetEventsResult).value

    return AwaitableGetEventsResult(
        events=pulumi.get(__ret__, 'events'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_events)
def get_events_output(events: Optional[pulumi.Input[Sequence[pulumi.InputType['GetEventsEventArgs']]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEventsResult]:
    """
    Provides a phoenixNAP events datasource. This can be used to read event logs.

    ## Example Usage

    Fetch event logs by name and show their details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test = pnap.get_events(events=[pnap.GetEventsEventArgs(
        name="API.SshKeysUpdate",
    )])
    pulumi.export("logs", test)
    ```


    :param Sequence[pulumi.InputType['GetEventsEventArgs']] events: Block `events` has field `name`.
    """
    ...
