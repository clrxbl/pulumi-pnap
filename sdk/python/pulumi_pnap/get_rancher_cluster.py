# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRancherClusterResult',
    'AwaitableGetRancherClusterResult',
    'get_rancher_cluster',
    'get_rancher_cluster_output',
]

@pulumi.output_type
class GetRancherClusterResult:
    """
    A collection of values returned by getRancherCluster.
    """
    def __init__(__self__, description=None, id=None, initial_cluster_version=None, location=None, metadatas=None, name=None, node_pools=None, status_description=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if initial_cluster_version and not isinstance(initial_cluster_version, str):
            raise TypeError("Expected argument 'initial_cluster_version' to be a str")
        pulumi.set(__self__, "initial_cluster_version", initial_cluster_version)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_pools and not isinstance(node_pools, list):
            raise TypeError("Expected argument 'node_pools' to be a list")
        pulumi.set(__self__, "node_pools", node_pools)
        if status_description and not isinstance(status_description, str):
            raise TypeError("Expected argument 'status_description' to be a str")
        pulumi.set(__self__, "status_description", status_description)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Cluster description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The cluster identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialClusterVersion")
    def initial_cluster_version(self) -> str:
        """
        The Rancher version that was installed on the cluster during the first creation process.
        """
        return pulumi.get(self, "initial_cluster_version")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Deployment location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRancherClusterMetadataResult']:
        """
        Connection parameters to use to connect to the Rancher Server Administrative GUI.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the node pool.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Sequence['outputs.GetRancherClusterNodePoolResult']:
        """
        The node pools associated with the cluster.
        """
        return pulumi.get(self, "node_pools")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> str:
        """
        The cluster status.
        """
        return pulumi.get(self, "status_description")


class AwaitableGetRancherClusterResult(GetRancherClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRancherClusterResult(
            description=self.description,
            id=self.id,
            initial_cluster_version=self.initial_cluster_version,
            location=self.location,
            metadatas=self.metadatas,
            name=self.name,
            node_pools=self.node_pools,
            status_description=self.status_description)


def get_rancher_cluster(id: Optional[str] = None,
                        name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRancherClusterResult:
    """
    Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.

    ## Example Usage

    Fetch a Rancher Cluster by ID or name and show it's details in alphabetical order.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test = pnap.get_rancher_cluster(id="123",
        name="Rancher-Deployment-1")
    pulumi.export("rancher-cluster", test)
    ```


    :param str id: The cluster (Rancher Cluster) identifier.
    :param str name: Cluster name.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getRancherCluster:getRancherCluster', __args__, opts=opts, typ=GetRancherClusterResult).value

    return AwaitableGetRancherClusterResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        initial_cluster_version=pulumi.get(__ret__, 'initial_cluster_version'),
        location=pulumi.get(__ret__, 'location'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        name=pulumi.get(__ret__, 'name'),
        node_pools=pulumi.get(__ret__, 'node_pools'),
        status_description=pulumi.get(__ret__, 'status_description'))


@_utilities.lift_output_func(get_rancher_cluster)
def get_rancher_cluster_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRancherClusterResult]:
    """
    Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.

    ## Example Usage

    Fetch a Rancher Cluster by ID or name and show it's details in alphabetical order.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test = pnap.get_rancher_cluster(id="123",
        name="Rancher-Deployment-1")
    pulumi.export("rancher-cluster", test)
    ```


    :param str id: The cluster (Rancher Cluster) identifier.
    :param str name: Cluster name.
    """
    ...
