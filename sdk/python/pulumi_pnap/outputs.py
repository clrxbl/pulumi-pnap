# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'IpBlockTag',
    'IpBlockTagTagAssignment',
    'PrivateNetworkMembership',
    'PrivateNetworkServer',
    'PublicNetworkIpBlock',
    'PublicNetworkIpBlockPublicNetworkIpBlock',
    'PublicNetworkMembership',
    'RancherClusterConfiguration',
    'RancherClusterConfigurationCertificates',
    'RancherClusterMetadata',
    'RancherClusterNodePools',
    'RancherClusterNodePoolsNode',
    'RancherClusterNodePoolsSshConfig',
    'RancherClusterWorkloadConfiguration',
    'ServerCloudInit',
    'ServerNetrisController',
    'ServerNetrisSoftgate',
    'ServerNetworkConfiguration',
    'ServerNetworkConfigurationIpBlocksConfiguration',
    'ServerNetworkConfigurationIpBlocksConfigurationIpBlock',
    'ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock',
    'ServerNetworkConfigurationPrivateNetworkConfiguration',
    'ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork',
    'ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork',
    'ServerNetworkConfigurationPublicNetworkConfiguration',
    'ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork',
    'ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork',
    'ServerStorageConfiguration',
    'ServerStorageConfigurationRootPartition',
    'ServerTag',
    'ServerTagTagAssignment',
    'StorageNetworkVolume',
    'StorageNetworkVolumeVolume',
    'StorageNetworkVolumeVolumePermission',
    'StorageNetworkVolumeVolumePermissionNf',
    'StorageNetworkVolumeVolumeTag',
    'StorageNetworkVolumeVolumeTagTagAssignment',
    'TagResourceAssignment',
    'GetEventsEventResult',
    'GetEventsEventUserInfoResult',
    'GetInvoicesPaginatedInvoiceResult',
    'GetInvoicesPaginatedInvoiceResultResult',
    'GetIpBlockTagResult',
    'GetLocationsLocationResult',
    'GetLocationsLocationProductCategoryResult',
    'GetPrivateNetworkMembershipResult',
    'GetPrivateNetworkServerResult',
    'GetProductAvailabilityProductAvailabilityResult',
    'GetProductAvailabilityProductAvailabilityLocationAvailabilityDetailResult',
    'GetProductsProductResult',
    'GetProductsProductMetadataResult',
    'GetProductsProductPlanResult',
    'GetPublicNetworkIpBlockResult',
    'GetPublicNetworkMembershipResult',
    'GetQuotaQuotaEditLimitRequestDetailResult',
    'GetRancherClusterMetadataResult',
    'GetRancherClusterNodePoolResult',
    'GetRancherClusterNodePoolNodeResult',
    'GetServerNetrisControllerResult',
    'GetServerNetrisSoftgateResult',
    'GetServerNetworkConfigurationResult',
    'GetServerNetworkConfigurationIpBlocksConfigurationResult',
    'GetServerNetworkConfigurationIpBlocksConfigurationIpBlockResult',
    'GetServerNetworkConfigurationPrivateNetworkConfigurationResult',
    'GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkResult',
    'GetServerNetworkConfigurationPublicNetworkConfigurationResult',
    'GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkResult',
    'GetServerStorageConfigurationResult',
    'GetServerStorageConfigurationRootPartitionResult',
    'GetServerTagResult',
    'GetStorageNetworkVolumeResult',
    'GetStorageNetworkVolumePermissionResult',
    'GetStorageNetworkVolumePermissionNfResult',
    'GetStorageNetworkVolumeTagResult',
    'GetTagResourceAssignmentResult',
]

@pulumi.output_type
class IpBlockTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagAssignment":
            suggest = "tag_assignment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpBlockTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpBlockTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpBlockTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_assignment: Optional['outputs.IpBlockTagTagAssignment'] = None):
        """
        :param 'IpBlockTagTagAssignmentArgs' tag_assignment: Tag request to assign to the IP Block.
        """
        if tag_assignment is not None:
            pulumi.set(__self__, "tag_assignment", tag_assignment)

    @property
    @pulumi.getter(name="tagAssignment")
    def tag_assignment(self) -> Optional['outputs.IpBlockTagTagAssignment']:
        """
        Tag request to assign to the IP Block.
        """
        return pulumi.get(self, "tag_assignment")


@pulumi.output_type
class IpBlockTagTagAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "isBillingTag":
            suggest = "is_billing_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpBlockTagTagAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpBlockTagTagAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpBlockTagTagAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 created_by: Optional[str] = None,
                 id: Optional[str] = None,
                 is_billing_tag: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name of the tag.
        :param str created_by: Who the tag was created by.
        :param str id: The unique id of the tag.
        :param bool is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param str value: The value of the tag assigned to the IP Block.
        """
        pulumi.set(__self__, "name", name)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_billing_tag is not None:
            pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique id of the tag.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> Optional[bool]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the tag assigned to the IP Block.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PrivateNetworkMembership(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateNetworkMembership. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateNetworkMembership.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateNetworkMembership.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ips: Optional[Sequence[str]] = None,
                 resource_id: Optional[str] = None,
                 resource_type: Optional[str] = None):
        """
        :param Sequence[str] ips: List of public IPs associated to the resource.
        :param str resource_id: The resource identifier.
        :param str resource_type: The resource's type.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[str]]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        The resource identifier.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The resource's type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class PrivateNetworkServer(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 ips: Optional[Sequence[str]] = None):
        """
        :param str id: The server identifier.
        :param Sequence[str] ips: List of public IPs associated to the resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The server identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[str]]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")


@pulumi.output_type
class PublicNetworkIpBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicNetworkIpBlock":
            suggest = "public_network_ip_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublicNetworkIpBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublicNetworkIpBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublicNetworkIpBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_network_ip_block: Optional['outputs.PublicNetworkIpBlockPublicNetworkIpBlock'] = None):
        """
        :param 'PublicNetworkIpBlockPublicNetworkIpBlockArgs' public_network_ip_block: The assigned IP Block to the public network.
        """
        if public_network_ip_block is not None:
            pulumi.set(__self__, "public_network_ip_block", public_network_ip_block)

    @property
    @pulumi.getter(name="publicNetworkIpBlock")
    def public_network_ip_block(self) -> Optional['outputs.PublicNetworkIpBlockPublicNetworkIpBlock']:
        """
        The assigned IP Block to the public network.
        """
        return pulumi.get(self, "public_network_ip_block")


@pulumi.output_type
class PublicNetworkIpBlockPublicNetworkIpBlock(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The IP Block identifier.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The IP Block identifier.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PublicNetworkMembership(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublicNetworkMembership. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublicNetworkMembership.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublicNetworkMembership.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ips: Optional[Sequence[str]] = None,
                 resource_id: Optional[str] = None,
                 resource_type: Optional[str] = None):
        """
        :param Sequence[str] ips: List of public IPs associated to the resource.
        :param str resource_id: The resource identifier.
        :param str resource_type: The resource's type.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[str]]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        The resource identifier.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The resource's type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class RancherClusterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterDomain":
            suggest = "cluster_domain"
        elif key == "etcdSnapshotRetention":
            suggest = "etcd_snapshot_retention"
        elif key == "etcdSnapshotScheduleCron":
            suggest = "etcd_snapshot_schedule_cron"
        elif key == "nodeTaint":
            suggest = "node_taint"
        elif key == "tlsSan":
            suggest = "tls_san"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RancherClusterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RancherClusterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RancherClusterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificates: Optional['outputs.RancherClusterConfigurationCertificates'] = None,
                 cluster_domain: Optional[str] = None,
                 etcd_snapshot_retention: Optional[int] = None,
                 etcd_snapshot_schedule_cron: Optional[str] = None,
                 node_taint: Optional[str] = None,
                 tls_san: Optional[str] = None,
                 token: Optional[str] = None):
        """
        :param 'RancherClusterConfigurationCertificatesArgs' certificates: Define the custom SSL certificates to be used instead of defaults. The `certificates` block has 3 fields.
        :param str cluster_domain: This maps to rancher's cluster-domain. Cluster Domain.
        :param int etcd_snapshot_retention: This maps to rancher's etcd-snapshot-retention. Number of snapshots to retain. Default value is 5.
        :param str etcd_snapshot_schedule_cron: This maps to rancher's etcd-snapshot-schedule-cron. Snapshot interval time in cron spec.
        :param str node_taint: This maps to rancher's node-taint. Registering kubelet with set of taints.
        :param str tls_san: This maps to rancher's tls-san. Add additional hostname or IP as a Subject Alternative Name in the TLS cert.
        :param str token: Shared secret used to join a server or agent to a cluster.
        """
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if etcd_snapshot_retention is not None:
            pulumi.set(__self__, "etcd_snapshot_retention", etcd_snapshot_retention)
        if etcd_snapshot_schedule_cron is not None:
            pulumi.set(__self__, "etcd_snapshot_schedule_cron", etcd_snapshot_schedule_cron)
        if node_taint is not None:
            pulumi.set(__self__, "node_taint", node_taint)
        if tls_san is not None:
            pulumi.set(__self__, "tls_san", tls_san)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def certificates(self) -> Optional['outputs.RancherClusterConfigurationCertificates']:
        """
        Define the custom SSL certificates to be used instead of defaults. The `certificates` block has 3 fields.
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[str]:
        """
        This maps to rancher's cluster-domain. Cluster Domain.
        """
        return pulumi.get(self, "cluster_domain")

    @property
    @pulumi.getter(name="etcdSnapshotRetention")
    def etcd_snapshot_retention(self) -> Optional[int]:
        """
        This maps to rancher's etcd-snapshot-retention. Number of snapshots to retain. Default value is 5.
        """
        return pulumi.get(self, "etcd_snapshot_retention")

    @property
    @pulumi.getter(name="etcdSnapshotScheduleCron")
    def etcd_snapshot_schedule_cron(self) -> Optional[str]:
        """
        This maps to rancher's etcd-snapshot-schedule-cron. Snapshot interval time in cron spec.
        """
        return pulumi.get(self, "etcd_snapshot_schedule_cron")

    @property
    @pulumi.getter(name="nodeTaint")
    def node_taint(self) -> Optional[str]:
        """
        This maps to rancher's node-taint. Registering kubelet with set of taints.
        """
        return pulumi.get(self, "node_taint")

    @property
    @pulumi.getter(name="tlsSan")
    def tls_san(self) -> Optional[str]:
        """
        This maps to rancher's tls-san. Add additional hostname or IP as a Subject Alternative Name in the TLS cert.
        """
        return pulumi.get(self, "tls_san")

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        """
        Shared secret used to join a server or agent to a cluster.
        """
        return pulumi.get(self, "token")


@pulumi.output_type
class RancherClusterConfigurationCertificates(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "certificateKey":
            suggest = "certificate_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RancherClusterConfigurationCertificates. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RancherClusterConfigurationCertificates.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RancherClusterConfigurationCertificates.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None,
                 certificate: Optional[str] = None,
                 certificate_key: Optional[str] = None):
        """
        :param str ca_certificate: The SSL CA certificate to be used for rancher admin.
        :param str certificate: The SSL certificate to be used for rancher admin.
        :param str certificate_key: The SSL certificate key to be used for rancher admin.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_key is not None:
            pulumi.set(__self__, "certificate_key", certificate_key)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        The SSL CA certificate to be used for rancher admin.
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[str]:
        """
        The SSL certificate to be used for rancher admin.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="certificateKey")
    def certificate_key(self) -> Optional[str]:
        """
        The SSL certificate key to be used for rancher admin.
        """
        return pulumi.get(self, "certificate_key")


@pulumi.output_type
class RancherClusterMetadata(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 url: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str password: This is the password to be used to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
        :param str url: The Rancher Server URL.
        :param str username: The username to use to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        This is the password to be used to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The Rancher Server URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username to use to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class RancherClusterNodePools(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeCount":
            suggest = "node_count"
        elif key == "serverType":
            suggest = "server_type"
        elif key == "sshConfig":
            suggest = "ssh_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RancherClusterNodePools. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RancherClusterNodePools.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RancherClusterNodePools.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 node_count: Optional[int] = None,
                 nodes: Optional[Sequence['outputs.RancherClusterNodePoolsNode']] = None,
                 server_type: Optional[str] = None,
                 ssh_config: Optional['outputs.RancherClusterNodePoolsSshConfig'] = None):
        """
        :param str name: The name of the workload cluster. This field is autogenerated if not provided.
        :param int node_count: Number of configured nodes. Currently only node counts of 1 and 3 are possible.
        :param Sequence['RancherClusterNodePoolsNodeArgs'] nodes: The nodes associated with this node pool.
        :param str server_type: Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param 'RancherClusterNodePoolsSshConfigArgs' ssh_config: Configuration defining which public SSH keys are pre-installed as authorized on the server. The `ssh_config` block has 3 fields.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if ssh_config is not None:
            pulumi.set(__self__, "ssh_config", ssh_config)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the workload cluster. This field is autogenerated if not provided.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[int]:
        """
        Number of configured nodes. Currently only node counts of 1 and 3 are possible.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.RancherClusterNodePoolsNode']]:
        """
        The nodes associated with this node pool.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[str]:
        """
        Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter(name="sshConfig")
    def ssh_config(self) -> Optional['outputs.RancherClusterNodePoolsSshConfig']:
        """
        Configuration defining which public SSH keys are pre-installed as authorized on the server. The `ssh_config` block has 3 fields.
        """
        return pulumi.get(self, "ssh_config")


@pulumi.output_type
class RancherClusterNodePoolsNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverId":
            suggest = "server_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RancherClusterNodePoolsNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RancherClusterNodePoolsNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RancherClusterNodePoolsNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_id: Optional[str] = None):
        """
        :param str server_id: The server identifier.
        """
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[str]:
        """
        The server identifier.
        """
        return pulumi.get(self, "server_id")


@pulumi.output_type
class RancherClusterNodePoolsSshConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "installDefaultKeys":
            suggest = "install_default_keys"
        elif key == "keyIds":
            suggest = "key_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RancherClusterNodePoolsSshConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RancherClusterNodePoolsSshConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RancherClusterNodePoolsSshConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 install_default_keys: Optional[bool] = None,
                 key_ids: Optional[Sequence[str]] = None,
                 keys: Optional[Sequence[str]] = None):
        """
        :param bool install_default_keys: Define whether public keys marked as default should be installed on this node. Default value is true.
        :param Sequence[str] key_ids: List of public SSH key identifiers.
        :param Sequence[str] keys: List of public SSH keys.
        """
        if install_default_keys is not None:
            pulumi.set(__self__, "install_default_keys", install_default_keys)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter(name="installDefaultKeys")
    def install_default_keys(self) -> Optional[bool]:
        """
        Define whether public keys marked as default should be installed on this node. Default value is true.
        """
        return pulumi.get(self, "install_default_keys")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[Sequence[str]]:
        """
        List of public SSH key identifiers.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        """
        List of public SSH keys.
        """
        return pulumi.get(self, "keys")


@pulumi.output_type
class RancherClusterWorkloadConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverType":
            suggest = "server_type"
        elif key == "serverCount":
            suggest = "server_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RancherClusterWorkloadConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RancherClusterWorkloadConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RancherClusterWorkloadConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 server_type: str,
                 name: Optional[str] = None,
                 server_count: Optional[int] = None):
        """
        :param str location: Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param str server_type: Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param str name: The name of the workload cluster. This field is autogenerated if not provided.
        :param int server_count: Number of configured servers. Currently only server counts of 1 and 3 are possible. Default value is 1.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "server_type", server_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_count is not None:
            pulumi.set(__self__, "server_count", server_count)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> str:
        """
        Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the workload cluster. This field is autogenerated if not provided.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> Optional[int]:
        """
        Number of configured servers. Currently only server counts of 1 and 3 are possible. Default value is 1.
        """
        return pulumi.get(self, "server_count")


@pulumi.output_type
class ServerCloudInit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userData":
            suggest = "user_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerCloudInit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerCloudInit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerCloudInit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_data: Optional[str] = None):
        """
        :param str user_data: User data for the [cloud-init](https://cloudinit.readthedocs.io/en/latest/) configuration in base64 encoding. NoCloud format is supported. Follow the [instructions](https://phoenixnap.com/kb/bmc-cloud-init) on how to provision a server using cloud-init. Only ubuntu/bionic and ubuntu/focal and ubuntu/jammy are supported.
               
               
               The `netris_softgate` block has three fields:
        """
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        """
        User data for the [cloud-init](https://cloudinit.readthedocs.io/en/latest/) configuration in base64 encoding. NoCloud format is supported. Follow the [instructions](https://phoenixnap.com/kb/bmc-cloud-init) on how to provision a server using cloud-init. Only ubuntu/bionic and ubuntu/focal and ubuntu/jammy are supported.


        The `netris_softgate` block has three fields:
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class ServerNetrisController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostOs":
            suggest = "host_os"
        elif key == "netrisUserPassword":
            suggest = "netris_user_password"
        elif key == "netrisWebConsoleUrl":
            suggest = "netris_web_console_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetrisController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetrisController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetrisController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_os: Optional[str] = None,
                 netris_user_password: Optional[str] = None,
                 netris_web_console_url: Optional[str] = None):
        """
        :param str host_os: Host OS on which the Netris Softgate is installed.
        :param str netris_user_password: Auto-generated password set for user 'netris' in the web console.
        :param str netris_web_console_url: The URL for the Netris Controller web console.
        """
        if host_os is not None:
            pulumi.set(__self__, "host_os", host_os)
        if netris_user_password is not None:
            pulumi.set(__self__, "netris_user_password", netris_user_password)
        if netris_web_console_url is not None:
            pulumi.set(__self__, "netris_web_console_url", netris_web_console_url)

    @property
    @pulumi.getter(name="hostOs")
    def host_os(self) -> Optional[str]:
        """
        Host OS on which the Netris Softgate is installed.
        """
        return pulumi.get(self, "host_os")

    @property
    @pulumi.getter(name="netrisUserPassword")
    def netris_user_password(self) -> Optional[str]:
        """
        Auto-generated password set for user 'netris' in the web console.
        """
        return pulumi.get(self, "netris_user_password")

    @property
    @pulumi.getter(name="netrisWebConsoleUrl")
    def netris_web_console_url(self) -> Optional[str]:
        """
        The URL for the Netris Controller web console.
        """
        return pulumi.get(self, "netris_web_console_url")


@pulumi.output_type
class ServerNetrisSoftgate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controllerAddress":
            suggest = "controller_address"
        elif key == "controllerAuthKey":
            suggest = "controller_auth_key"
        elif key == "controllerVersion":
            suggest = "controller_version"
        elif key == "hostOs":
            suggest = "host_os"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetrisSoftgate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetrisSoftgate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetrisSoftgate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 controller_address: Optional[str] = None,
                 controller_auth_key: Optional[str] = None,
                 controller_version: Optional[str] = None,
                 host_os: Optional[str] = None):
        """
        :param str controller_address: IP address or hostname through which to reach the Netris Controller.
        :param str controller_auth_key: The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.
               
               
               The `tags` block has field `tag_assignment`.
               The `tag_assignment` block has 2 fields:
        :param str controller_version: The version of the Netris Controller to connect to.
        :param str host_os: Host OS on which the Netris Softgate is installed.
        """
        if controller_address is not None:
            pulumi.set(__self__, "controller_address", controller_address)
        if controller_auth_key is not None:
            pulumi.set(__self__, "controller_auth_key", controller_auth_key)
        if controller_version is not None:
            pulumi.set(__self__, "controller_version", controller_version)
        if host_os is not None:
            pulumi.set(__self__, "host_os", host_os)

    @property
    @pulumi.getter(name="controllerAddress")
    def controller_address(self) -> Optional[str]:
        """
        IP address or hostname through which to reach the Netris Controller.
        """
        return pulumi.get(self, "controller_address")

    @property
    @pulumi.getter(name="controllerAuthKey")
    def controller_auth_key(self) -> Optional[str]:
        """
        The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.


        The `tags` block has field `tag_assignment`.
        The `tag_assignment` block has 2 fields:
        """
        return pulumi.get(self, "controller_auth_key")

    @property
    @pulumi.getter(name="controllerVersion")
    def controller_version(self) -> Optional[str]:
        """
        The version of the Netris Controller to connect to.
        """
        return pulumi.get(self, "controller_version")

    @property
    @pulumi.getter(name="hostOs")
    def host_os(self) -> Optional[str]:
        """
        Host OS on which the Netris Softgate is installed.
        """
        return pulumi.get(self, "host_os")


@pulumi.output_type
class ServerNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gatewayAddress":
            suggest = "gateway_address"
        elif key == "ipBlocksConfiguration":
            suggest = "ip_blocks_configuration"
        elif key == "privateNetworkConfiguration":
            suggest = "private_network_configuration"
        elif key == "publicNetworkConfiguration":
            suggest = "public_network_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway_address: Optional[str] = None,
                 ip_blocks_configuration: Optional['outputs.ServerNetworkConfigurationIpBlocksConfiguration'] = None,
                 private_network_configuration: Optional['outputs.ServerNetworkConfigurationPrivateNetworkConfiguration'] = None,
                 public_network_configuration: Optional['outputs.ServerNetworkConfigurationPublicNetworkConfiguration'] = None):
        """
        :param str gateway_address: The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
        """
        if gateway_address is not None:
            pulumi.set(__self__, "gateway_address", gateway_address)
        if ip_blocks_configuration is not None:
            pulumi.set(__self__, "ip_blocks_configuration", ip_blocks_configuration)
        if private_network_configuration is not None:
            pulumi.set(__self__, "private_network_configuration", private_network_configuration)
        if public_network_configuration is not None:
            pulumi.set(__self__, "public_network_configuration", public_network_configuration)

    @property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> Optional[str]:
        """
        The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
        """
        return pulumi.get(self, "gateway_address")

    @property
    @pulumi.getter(name="ipBlocksConfiguration")
    def ip_blocks_configuration(self) -> Optional['outputs.ServerNetworkConfigurationIpBlocksConfiguration']:
        return pulumi.get(self, "ip_blocks_configuration")

    @property
    @pulumi.getter(name="privateNetworkConfiguration")
    def private_network_configuration(self) -> Optional['outputs.ServerNetworkConfigurationPrivateNetworkConfiguration']:
        return pulumi.get(self, "private_network_configuration")

    @property
    @pulumi.getter(name="publicNetworkConfiguration")
    def public_network_configuration(self) -> Optional['outputs.ServerNetworkConfigurationPublicNetworkConfiguration']:
        return pulumi.get(self, "public_network_configuration")


@pulumi.output_type
class ServerNetworkConfigurationIpBlocksConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationType":
            suggest = "configuration_type"
        elif key == "ipBlocks":
            suggest = "ip_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationIpBlocksConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationIpBlocksConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationIpBlocksConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_type: Optional[str] = None,
                 ip_blocks: Optional[Sequence['outputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlock']] = None):
        """
        :param str configuration_type: Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
        :param Sequence['ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs'] ip_blocks: Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
               
               The `ip_blocks` block has field `server_ip_block`.
               The `server_ip_block` block has 2 fields:
        """
        if configuration_type is not None:
            pulumi.set(__self__, "configuration_type", configuration_type)
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> Optional[str]:
        """
        Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[Sequence['outputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlock']]:
        """
        Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.

        The `ip_blocks` block has field `server_ip_block`.
        The `server_ip_block` block has 2 fields:
        """
        return pulumi.get(self, "ip_blocks")


@pulumi.output_type
class ServerNetworkConfigurationIpBlocksConfigurationIpBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverIpBlock":
            suggest = "server_ip_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationIpBlocksConfigurationIpBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationIpBlocksConfigurationIpBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationIpBlocksConfigurationIpBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_ip_block: Optional['outputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock'] = None):
        if server_ip_block is not None:
            pulumi.set(__self__, "server_ip_block", server_ip_block)

    @property
    @pulumi.getter(name="serverIpBlock")
    def server_ip_block(self) -> Optional['outputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock']:
        return pulumi.get(self, "server_ip_block")


@pulumi.output_type
class ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 vlan_id: Optional[int] = None):
        """
        :param str id: The network identifier.
        :param int vlan_id: The VLAN on which this IP block has been configured within the network switch.
               
               The `public_network_configuration` is the fourth field of the `network_configuration` block.
               The `public_network_configuration` block has field `public_networks`:
               
               The `public_networks` block has field `server_public_network`.
               The `server_public_network` block has 2 fields:
        """
        pulumi.set(__self__, "id", id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        The VLAN on which this IP block has been configured within the network switch.

        The `public_network_configuration` is the fourth field of the `network_configuration` block.
        The `public_network_configuration` block has field `public_networks`:

        The `public_networks` block has field `server_public_network`.
        The `server_public_network` block has 2 fields:
        """
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class ServerNetworkConfigurationPrivateNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationType":
            suggest = "configuration_type"
        elif key == "gatewayAddress":
            suggest = "gateway_address"
        elif key == "privateNetworks":
            suggest = "private_networks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationPrivateNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationPrivateNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationPrivateNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_type: Optional[str] = None,
                 gateway_address: Optional[str] = None,
                 private_networks: Optional[Sequence['outputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork']] = None):
        """
        :param str configuration_type: Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
        :param str gateway_address: The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
        :param Sequence['ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs'] private_networks: The list of private networks this server is member of. When this field is part of request body, it'll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
               
               The `private_networks` block has field `server_private_network`.
               The `server_private_network` block has 3 fields:
        """
        if configuration_type is not None:
            pulumi.set(__self__, "configuration_type", configuration_type)
        if gateway_address is not None:
            pulumi.set(__self__, "gateway_address", gateway_address)
        if private_networks is not None:
            pulumi.set(__self__, "private_networks", private_networks)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> Optional[str]:
        """
        Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> Optional[str]:
        """
        The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
        """
        return pulumi.get(self, "gateway_address")

    @property
    @pulumi.getter(name="privateNetworks")
    def private_networks(self) -> Optional[Sequence['outputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork']]:
        """
        The list of private networks this server is member of. When this field is part of request body, it'll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.

        The `private_networks` block has field `server_private_network`.
        The `server_private_network` block has 3 fields:
        """
        return pulumi.get(self, "private_networks")


@pulumi.output_type
class ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverPrivateNetwork":
            suggest = "server_private_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_private_network: Optional['outputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork'] = None):
        if server_private_network is not None:
            pulumi.set(__self__, "server_private_network", server_private_network)

    @property
    @pulumi.getter(name="serverPrivateNetwork")
    def server_private_network(self) -> Optional['outputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork']:
        return pulumi.get(self, "server_private_network")


@pulumi.output_type
class ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusDescription":
            suggest = "status_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 dhcp: Optional[bool] = None,
                 ips: Optional[Sequence[str]] = None,
                 status_description: Optional[str] = None):
        """
        :param str id: The network identifier.
        :param bool dhcp: Determines whether DHCP is enabled for this server. Should be false if ips is not an empty list. Not supported for proxmox OS. Default value is `false`.
               
               The `ip_blocks_configuration` is the third field of the `network_configuration` block.
               The `ip_blocks_configuration` block has 2 fields:
        :param Sequence[str] ips: IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.
               
               
               The `storage_configuration` block has field `root_partition`.
               The `root_partition` block has two fields:
        """
        pulumi.set(__self__, "id", id)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if status_description is not None:
            pulumi.set(__self__, "status_description", status_description)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[bool]:
        """
        Determines whether DHCP is enabled for this server. Should be false if ips is not an empty list. Not supported for proxmox OS. Default value is `false`.

        The `ip_blocks_configuration` is the third field of the `network_configuration` block.
        The `ip_blocks_configuration` block has 2 fields:
        """
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def ips(self) -> Optional[Sequence[str]]:
        """
        IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.


        The `storage_configuration` block has field `root_partition`.
        The `root_partition` block has two fields:
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> Optional[str]:
        return pulumi.get(self, "status_description")


@pulumi.output_type
class ServerNetworkConfigurationPublicNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicNetworks":
            suggest = "public_networks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationPublicNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationPublicNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationPublicNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_networks: Optional[Sequence['outputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork']] = None):
        if public_networks is not None:
            pulumi.set(__self__, "public_networks", public_networks)

    @property
    @pulumi.getter(name="publicNetworks")
    def public_networks(self) -> Optional[Sequence['outputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork']]:
        return pulumi.get(self, "public_networks")


@pulumi.output_type
class ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverPublicNetwork":
            suggest = "server_public_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 server_public_network: Optional['outputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork'] = None):
        if server_public_network is not None:
            pulumi.set(__self__, "server_public_network", server_public_network)

    @property
    @pulumi.getter(name="serverPublicNetwork")
    def server_public_network(self) -> Optional['outputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork']:
        return pulumi.get(self, "server_public_network")


@pulumi.output_type
class ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusDescription":
            suggest = "status_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 ips: Sequence[str],
                 status_description: Optional[str] = None):
        """
        :param str id: The network identifier.
        :param Sequence[str] ips: IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.
               
               
               The `storage_configuration` block has field `root_partition`.
               The `root_partition` block has two fields:
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ips", ips)
        if status_description is not None:
            pulumi.set(__self__, "status_description", status_description)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        """
        IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.


        The `storage_configuration` block has field `root_partition`.
        The `root_partition` block has two fields:
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> Optional[str]:
        return pulumi.get(self, "status_description")


@pulumi.output_type
class ServerStorageConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootPartition":
            suggest = "root_partition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerStorageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerStorageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerStorageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 root_partition: Optional['outputs.ServerStorageConfigurationRootPartition'] = None):
        if root_partition is not None:
            pulumi.set(__self__, "root_partition", root_partition)

    @property
    @pulumi.getter(name="rootPartition")
    def root_partition(self) -> Optional['outputs.ServerStorageConfigurationRootPartition']:
        return pulumi.get(self, "root_partition")


@pulumi.output_type
class ServerStorageConfigurationRootPartition(dict):
    def __init__(__self__, *,
                 raid: Optional[str] = None,
                 size: Optional[int] = None):
        """
        :param str raid: Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
        :param int size: The size of the root partition in GB. `-1` to use all available space.
        """
        if raid is not None:
            pulumi.set(__self__, "raid", raid)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def raid(self) -> Optional[str]:
        """
        Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
        """
        return pulumi.get(self, "raid")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The size of the root partition in GB. `-1` to use all available space.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class ServerTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagAssignment":
            suggest = "tag_assignment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_assignment: Optional['outputs.ServerTagTagAssignment'] = None):
        if tag_assignment is not None:
            pulumi.set(__self__, "tag_assignment", tag_assignment)

    @property
    @pulumi.getter(name="tagAssignment")
    def tag_assignment(self) -> Optional['outputs.ServerTagTagAssignment']:
        return pulumi.get(self, "tag_assignment")


@pulumi.output_type
class ServerTagTagAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "isBillingTag":
            suggest = "is_billing_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerTagTagAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerTagTagAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerTagTagAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 created_by: Optional[str] = None,
                 id: Optional[str] = None,
                 is_billing_tag: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name of the tag.
        :param str created_by: Who the tag was created by.
        :param str id: The network identifier.
        :param bool is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param str value: The value of the tag assigned to the IP Block.
               
               
               The `network_configuration` block has 4 fields: `gateway_address`, `private_network_configuration`, `ip_blocks_configuration` and `public_network_configuration`.
        """
        pulumi.set(__self__, "name", name)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_billing_tag is not None:
            pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> Optional[bool]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the tag assigned to the IP Block.


        The `network_configuration` block has 4 fields: `gateway_address`, `private_network_configuration`, `ip_blocks_configuration` and `public_network_configuration`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class StorageNetworkVolume(dict):
    def __init__(__self__, *,
                 volume: 'outputs.StorageNetworkVolumeVolume'):
        """
        :param 'StorageNetworkVolumeVolumeArgs' volume: Volume to be created alongside storage.
        """
        pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def volume(self) -> 'outputs.StorageNetworkVolumeVolume':
        """
        Volume to be created alongside storage.
        """
        return pulumi.get(self, "volume")


@pulumi.output_type
class StorageNetworkVolumeVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "capacityInGb":
            suggest = "capacity_in_gb"
        elif key == "createdOn":
            suggest = "created_on"
        elif key == "deleteRequestedOn":
            suggest = "delete_requested_on"
        elif key == "pathSuffix":
            suggest = "path_suffix"
        elif key == "usedCapacityInGb":
            suggest = "used_capacity_in_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageNetworkVolumeVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageNetworkVolumeVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageNetworkVolumeVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 capacity_in_gb: int,
                 name: str,
                 created_on: Optional[str] = None,
                 delete_requested_on: Optional[str] = None,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 path: Optional[str] = None,
                 path_suffix: Optional[str] = None,
                 permissions: Optional[Sequence['outputs.StorageNetworkVolumeVolumePermission']] = None,
                 protocol: Optional[str] = None,
                 status: Optional[str] = None,
                 tags: Optional[Sequence['outputs.StorageNetworkVolumeVolumeTag']] = None,
                 used_capacity_in_gb: Optional[int] = None):
        """
        :param int capacity_in_gb: Capacity of volume in GB. Currently only whole numbers and multiples of 1000 GB are supported.
        :param str name: The name of the tag.
        :param str created_on: Date and time when this volume was created.
        :param str delete_requested_on: Date and time of the initial request for volume deletion.
        :param str description: Volume description.
        :param str id: The unique id of the tag.
        :param str path: Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
        :param str path_suffix: Last part of volume's path.
        :param Sequence['StorageNetworkVolumeVolumePermissionArgs'] permissions: Permissions for the volume.
        :param str protocol: File system protocol.
        :param str status: Volume's status.
        :param Sequence['StorageNetworkVolumeVolumeTagArgs'] tags: Tags to set to the volume.
        :param int used_capacity_in_gb: Used capacity in GB, updated periodically.
        """
        pulumi.set(__self__, "capacity_in_gb", capacity_in_gb)
        pulumi.set(__self__, "name", name)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if delete_requested_on is not None:
            pulumi.set(__self__, "delete_requested_on", delete_requested_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_suffix is not None:
            pulumi.set(__self__, "path_suffix", path_suffix)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if used_capacity_in_gb is not None:
            pulumi.set(__self__, "used_capacity_in_gb", used_capacity_in_gb)

    @property
    @pulumi.getter(name="capacityInGb")
    def capacity_in_gb(self) -> int:
        """
        Capacity of volume in GB. Currently only whole numbers and multiples of 1000 GB are supported.
        """
        return pulumi.get(self, "capacity_in_gb")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        """
        Date and time when this volume was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="deleteRequestedOn")
    def delete_requested_on(self) -> Optional[str]:
        """
        Date and time of the initial request for volume deletion.
        """
        return pulumi.get(self, "delete_requested_on")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Volume description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique id of the tag.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathSuffix")
    def path_suffix(self) -> Optional[str]:
        """
        Last part of volume's path.
        """
        return pulumi.get(self, "path_suffix")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence['outputs.StorageNetworkVolumeVolumePermission']]:
        """
        Permissions for the volume.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        File system protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Volume's status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.StorageNetworkVolumeVolumeTag']]:
        """
        Tags to set to the volume.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usedCapacityInGb")
    def used_capacity_in_gb(self) -> Optional[int]:
        """
        Used capacity in GB, updated periodically.
        """
        return pulumi.get(self, "used_capacity_in_gb")


@pulumi.output_type
class StorageNetworkVolumeVolumePermission(dict):
    def __init__(__self__, *,
                 nfs: Optional[Sequence['outputs.StorageNetworkVolumeVolumePermissionNf']] = None):
        """
        :param Sequence['StorageNetworkVolumeVolumePermissionNfArgs'] nfs: NFS specific permissions on the volume.
        """
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[Sequence['outputs.StorageNetworkVolumeVolumePermissionNf']]:
        """
        NFS specific permissions on the volume.
        """
        return pulumi.get(self, "nfs")


@pulumi.output_type
class StorageNetworkVolumeVolumePermissionNf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allSquashes":
            suggest = "all_squashes"
        elif key == "noSquashes":
            suggest = "no_squashes"
        elif key == "readOnlies":
            suggest = "read_onlies"
        elif key == "readWrites":
            suggest = "read_writes"
        elif key == "rootSquashes":
            suggest = "root_squashes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageNetworkVolumeVolumePermissionNf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageNetworkVolumeVolumePermissionNf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageNetworkVolumeVolumePermissionNf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_squashes: Optional[Sequence[str]] = None,
                 no_squashes: Optional[Sequence[str]] = None,
                 read_onlies: Optional[Sequence[str]] = None,
                 read_writes: Optional[Sequence[str]] = None,
                 root_squashes: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] all_squashes: All squash permission.
        :param Sequence[str] no_squashes: No squash permission.
        :param Sequence[str] read_onlies: Read only access.
        :param Sequence[str] read_writes: Read/Write access.
        :param Sequence[str] root_squashes: Root squash permission.
        """
        if all_squashes is not None:
            pulumi.set(__self__, "all_squashes", all_squashes)
        if no_squashes is not None:
            pulumi.set(__self__, "no_squashes", no_squashes)
        if read_onlies is not None:
            pulumi.set(__self__, "read_onlies", read_onlies)
        if read_writes is not None:
            pulumi.set(__self__, "read_writes", read_writes)
        if root_squashes is not None:
            pulumi.set(__self__, "root_squashes", root_squashes)

    @property
    @pulumi.getter(name="allSquashes")
    def all_squashes(self) -> Optional[Sequence[str]]:
        """
        All squash permission.
        """
        return pulumi.get(self, "all_squashes")

    @property
    @pulumi.getter(name="noSquashes")
    def no_squashes(self) -> Optional[Sequence[str]]:
        """
        No squash permission.
        """
        return pulumi.get(self, "no_squashes")

    @property
    @pulumi.getter(name="readOnlies")
    def read_onlies(self) -> Optional[Sequence[str]]:
        """
        Read only access.
        """
        return pulumi.get(self, "read_onlies")

    @property
    @pulumi.getter(name="readWrites")
    def read_writes(self) -> Optional[Sequence[str]]:
        """
        Read/Write access.
        """
        return pulumi.get(self, "read_writes")

    @property
    @pulumi.getter(name="rootSquashes")
    def root_squashes(self) -> Optional[Sequence[str]]:
        """
        Root squash permission.
        """
        return pulumi.get(self, "root_squashes")


@pulumi.output_type
class StorageNetworkVolumeVolumeTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagAssignment":
            suggest = "tag_assignment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageNetworkVolumeVolumeTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageNetworkVolumeVolumeTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageNetworkVolumeVolumeTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_assignment: Optional['outputs.StorageNetworkVolumeVolumeTagTagAssignment'] = None):
        """
        :param 'StorageNetworkVolumeVolumeTagTagAssignmentArgs' tag_assignment: Tag to set to the volume.
        """
        if tag_assignment is not None:
            pulumi.set(__self__, "tag_assignment", tag_assignment)

    @property
    @pulumi.getter(name="tagAssignment")
    def tag_assignment(self) -> Optional['outputs.StorageNetworkVolumeVolumeTagTagAssignment']:
        """
        Tag to set to the volume.
        """
        return pulumi.get(self, "tag_assignment")


@pulumi.output_type
class StorageNetworkVolumeVolumeTagTagAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"
        elif key == "isBillingTag":
            suggest = "is_billing_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageNetworkVolumeVolumeTagTagAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageNetworkVolumeVolumeTagTagAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageNetworkVolumeVolumeTagTagAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 created_by: Optional[str] = None,
                 id: Optional[str] = None,
                 is_billing_tag: Optional[bool] = None,
                 value: Optional[str] = None):
        """
        :param str name: The name of the tag.
        :param str created_by: Who the tag was created by.
        :param str id: The unique id of the tag.
        :param bool is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param str value: The value of the tag assigned to the volume.
        """
        pulumi.set(__self__, "name", name)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_billing_tag is not None:
            pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique id of the tag.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> Optional[bool]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the tag assigned to the volume.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TagResourceAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagResourceAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagResourceAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagResourceAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str resource_name: The resource name.
        :param str value: The value of the tag assigned to the resource.
               * `created_by ` - The tag's creator.
        """
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the tag assigned to the resource.
        * `created_by ` - The tag's creator.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEventsEventResult(dict):
    def __init__(__self__, *,
                 name: str,
                 timestamp: str,
                 user_infos: Sequence['outputs.GetEventsEventUserInfoResult']):
        """
        :param str name: Event name.
        :param str timestamp: The UTC time the event initiated.
        :param Sequence['GetEventsEventUserInfoArgs'] user_infos: Details related to the user / application.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "user_infos", user_infos)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Event name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        """
        The UTC time the event initiated.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="userInfos")
    def user_infos(self) -> Sequence['outputs.GetEventsEventUserInfoResult']:
        """
        Details related to the user / application.
        """
        return pulumi.get(self, "user_infos")


@pulumi.output_type
class GetEventsEventUserInfoResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 client_id: str,
                 username: str):
        """
        :param str account_id: The BMC account ID.
        :param str client_id: The client ID of the application.
        :param str username: The logged in user or owner of the client application.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The BMC account ID.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the application.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The logged in user or owner of the client application.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetInvoicesPaginatedInvoiceResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 offset: int,
                 results: Sequence['outputs.GetInvoicesPaginatedInvoiceResultResult'],
                 total: int):
        """
        :param int limit: The limit of the number of results returned. The number of records returned may be smaller than the limit.
        :param int offset: The number of items to skip in the results.
        :param Sequence['GetInvoicesPaginatedInvoiceResultArgs'] results: The list of invoices.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "results", results)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        The limit of the number of results returned. The number of records returned may be smaller than the limit.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> int:
        """
        The number of items to skip in the results.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetInvoicesPaginatedInvoiceResultResult']:
        """
        The list of invoices.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter
    def total(self) -> int:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetInvoicesPaginatedInvoiceResultResult(dict):
    def __init__(__self__, *,
                 amount: float,
                 currency: str,
                 due_date: str,
                 id: str,
                 number: str,
                 outstanding_amount: float,
                 sent_on: str,
                 status: str):
        """
        :param float amount: The invoice amount.
        :param str currency: The currency of the invoice.
        :param str due_date: Date and time when the invoice payment is due.
        :param str id: The unique resource identifier of the invoice.
        :param str number: A user-friendly reference number assigned to the invoice.
        :param float outstanding_amount: The invoice outstanding amount.
        :param str sent_on: Date and time when the invoice was sent.
        :param str status: Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "due_date", due_date)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "outstanding_amount", outstanding_amount)
        pulumi.set(__self__, "sent_on", sent_on)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def amount(self) -> float:
        """
        The invoice amount.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        The currency of the invoice.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> str:
        """
        Date and time when the invoice payment is due.
        """
        return pulumi.get(self, "due_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique resource identifier of the invoice.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def number(self) -> str:
        """
        A user-friendly reference number assigned to the invoice.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="outstandingAmount")
    def outstanding_amount(self) -> float:
        """
        The invoice outstanding amount.
        """
        return pulumi.get(self, "outstanding_amount")

    @property
    @pulumi.getter(name="sentOn")
    def sent_on(self) -> str:
        """
        Date and time when the invoice was sent.
        """
        return pulumi.get(self, "sent_on")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetIpBlockTagResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 id: str,
                 is_billing_tag: bool,
                 name: str,
                 value: str):
        """
        :param str created_by: Who the tag was created by.
        :param str id: The IP Block identifier.
        :param bool is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param str name: The name of the tag.
        :param str value: The value of the tag assigned to the IP Block.
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The IP Block identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> bool:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag assigned to the IP Block.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLocationsLocationResult(dict):
    def __init__(__self__, *,
                 location: str,
                 location_description: str,
                 product_categories: Sequence['outputs.GetLocationsLocationProductCategoryResult']):
        """
        :param str location: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
        :param str location_description: Description of the location.
        :param Sequence['GetLocationsLocationProductCategoryArgs'] product_categories: The list of product categories.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "location_description", location_description)
        pulumi.set(__self__, "product_categories", product_categories)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="locationDescription")
    def location_description(self) -> str:
        """
        Description of the location.
        """
        return pulumi.get(self, "location_description")

    @property
    @pulumi.getter(name="productCategories")
    def product_categories(self) -> Sequence['outputs.GetLocationsLocationProductCategoryResult']:
        """
        The list of product categories.
        """
        return pulumi.get(self, "product_categories")


@pulumi.output_type
class GetLocationsLocationProductCategoryResult(dict):
    def __init__(__self__, *,
                 product_category: str,
                 product_category_description: str):
        """
        :param str product_category: The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.
        :param str product_category_description: Description of the product category.
        """
        pulumi.set(__self__, "product_category", product_category)
        pulumi.set(__self__, "product_category_description", product_category_description)

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> str:
        """
        The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.
        """
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="productCategoryDescription")
    def product_category_description(self) -> str:
        """
        Description of the product category.
        """
        return pulumi.get(self, "product_category_description")


@pulumi.output_type
class GetPrivateNetworkMembershipResult(dict):
    def __init__(__self__, *,
                 ips: Sequence[str],
                 resource_id: str,
                 resource_type: str):
        """
        :param Sequence[str] ips: List of public IPs associated to the resource.
        :param str resource_id: The resource identifier.
        :param str resource_type: The resource's type.
        """
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The resource identifier.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource's type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetPrivateNetworkServerResult(dict):
    def __init__(__self__, *,
                 id: str,
                 ips: Sequence[str]):
        """
        :param str id: The private network identifier.
        :param Sequence[str] ips: List of public IPs associated to the resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ips", ips)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The private network identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")


@pulumi.output_type
class GetProductAvailabilityProductAvailabilityResult(dict):
    def __init__(__self__, *,
                 location_availability_details: Sequence['outputs.GetProductAvailabilityProductAvailabilityLocationAvailabilityDetailResult'],
                 product_category: str,
                 product_code: str):
        """
        :param Sequence['GetProductAvailabilityProductAvailabilityLocationAvailabilityDetailArgs'] location_availability_details: Infos about location, solutions and availability for a product.
        :param str product_category: Product category. Currently only `SERVER` category is supported.
        :param str product_code: The code identifying the product. This code has significance across all locations.
        """
        pulumi.set(__self__, "location_availability_details", location_availability_details)
        pulumi.set(__self__, "product_category", product_category)
        pulumi.set(__self__, "product_code", product_code)

    @property
    @pulumi.getter(name="locationAvailabilityDetails")
    def location_availability_details(self) -> Sequence['outputs.GetProductAvailabilityProductAvailabilityLocationAvailabilityDetailResult']:
        """
        Infos about location, solutions and availability for a product.
        """
        return pulumi.get(self, "location_availability_details")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> str:
        """
        Product category. Currently only `SERVER` category is supported.
        """
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> str:
        """
        The code identifying the product. This code has significance across all locations.
        """
        return pulumi.get(self, "product_code")


@pulumi.output_type
class GetProductAvailabilityProductAvailabilityLocationAvailabilityDetailResult(dict):
    def __init__(__self__, *,
                 available_quantity: int,
                 location: str,
                 min_quantity_available: bool,
                 min_quantity_requested: int,
                 solutions: Sequence[str]):
        """
        :param int available_quantity: Total available quantity of product in specific location. Max value is 10.
        :param str location: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
        :param bool min_quantity_available: Is product available in specific location for requested quantity.
        :param int min_quantity_requested: Requested quantity.
        :param Sequence[str] solutions: Solutions supported in specific location for a product.
        """
        pulumi.set(__self__, "available_quantity", available_quantity)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "min_quantity_available", min_quantity_available)
        pulumi.set(__self__, "min_quantity_requested", min_quantity_requested)
        pulumi.set(__self__, "solutions", solutions)

    @property
    @pulumi.getter(name="availableQuantity")
    def available_quantity(self) -> int:
        """
        Total available quantity of product in specific location. Max value is 10.
        """
        return pulumi.get(self, "available_quantity")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="minQuantityAvailable")
    def min_quantity_available(self) -> bool:
        """
        Is product available in specific location for requested quantity.
        """
        return pulumi.get(self, "min_quantity_available")

    @property
    @pulumi.getter(name="minQuantityRequested")
    def min_quantity_requested(self) -> int:
        """
        Requested quantity.
        """
        return pulumi.get(self, "min_quantity_requested")

    @property
    @pulumi.getter
    def solutions(self) -> Sequence[str]:
        """
        Solutions supported in specific location for a product.
        """
        return pulumi.get(self, "solutions")


@pulumi.output_type
class GetProductsProductResult(dict):
    def __init__(__self__, *,
                 metadatas: Sequence['outputs.GetProductsProductMetadataResult'],
                 plans: Sequence['outputs.GetProductsProductPlanResult'],
                 product_category: str,
                 product_code: str):
        """
        :param Sequence['GetProductsProductMetadataArgs'] metadatas: Details of the server product.
        :param Sequence['GetProductsProductPlanArgs'] plans: The pricing plans available for this product.
        :param str product_category: The product category.
        :param str product_code: The code identifying the product. This code has significance across all locations.
        """
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "plans", plans)
        pulumi.set(__self__, "product_category", product_category)
        pulumi.set(__self__, "product_code", product_code)

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetProductsProductMetadataResult']:
        """
        Details of the server product.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def plans(self) -> Sequence['outputs.GetProductsProductPlanResult']:
        """
        The pricing plans available for this product.
        """
        return pulumi.get(self, "plans")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> str:
        """
        The product category.
        """
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> str:
        """
        The code identifying the product. This code has significance across all locations.
        """
        return pulumi.get(self, "product_code")


@pulumi.output_type
class GetProductsProductMetadataResult(dict):
    def __init__(__self__, *,
                 cores_per_cpu: int,
                 cpu: str,
                 cpu_count: int,
                 cpu_frequency: float,
                 network: str,
                 ram_in_gb: int,
                 storage: str):
        """
        :param int cores_per_cpu: The number of physical cores present on each CPU.
        :param str cpu: CPU name.
        :param int cpu_count: Number of CPUs.
        :param float cpu_frequency: CPU frequency in GHz.
        :param str network: Server network.
        :param int ram_in_gb: RAM in GB.
        :param str storage: Server storage.
        """
        pulumi.set(__self__, "cores_per_cpu", cores_per_cpu)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "cpu_count", cpu_count)
        pulumi.set(__self__, "cpu_frequency", cpu_frequency)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "ram_in_gb", ram_in_gb)
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="coresPerCpu")
    def cores_per_cpu(self) -> int:
        """
        The number of physical cores present on each CPU.
        """
        return pulumi.get(self, "cores_per_cpu")

    @property
    @pulumi.getter
    def cpu(self) -> str:
        """
        CPU name.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> int:
        """
        Number of CPUs.
        """
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="cpuFrequency")
    def cpu_frequency(self) -> float:
        """
        CPU frequency in GHz.
        """
        return pulumi.get(self, "cpu_frequency")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Server network.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="ramInGb")
    def ram_in_gb(self) -> int:
        """
        RAM in GB.
        """
        return pulumi.get(self, "ram_in_gb")

    @property
    @pulumi.getter
    def storage(self) -> str:
        """
        Server storage.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetProductsProductPlanResult(dict):
    def __init__(__self__, *,
                 correlated_product_code: str,
                 location: str,
                 package_quantity: int,
                 package_unit: str,
                 price: float,
                 price_unit: str,
                 pricing_model: str,
                 sku: str,
                 sku_description: str):
        """
        :param str correlated_product_code: Product code of the correlated product.
        :param str location: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
        :param int package_quantity: Package size per month.
        :param str package_unit: Package size unit.
        :param float price: Price per unit.
        :param str price_unit: The unit to which the price applies.
        :param str pricing_model: The pricing model.
        :param str sku: The SKU identifying the pricing plan.
        :param str sku_description: Description of the pricing plan.
        """
        pulumi.set(__self__, "correlated_product_code", correlated_product_code)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "package_quantity", package_quantity)
        pulumi.set(__self__, "package_unit", package_unit)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "price_unit", price_unit)
        pulumi.set(__self__, "pricing_model", pricing_model)
        pulumi.set(__self__, "sku", sku)
        pulumi.set(__self__, "sku_description", sku_description)

    @property
    @pulumi.getter(name="correlatedProductCode")
    def correlated_product_code(self) -> str:
        """
        Product code of the correlated product.
        """
        return pulumi.get(self, "correlated_product_code")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="packageQuantity")
    def package_quantity(self) -> int:
        """
        Package size per month.
        """
        return pulumi.get(self, "package_quantity")

    @property
    @pulumi.getter(name="packageUnit")
    def package_unit(self) -> str:
        """
        Package size unit.
        """
        return pulumi.get(self, "package_unit")

    @property
    @pulumi.getter
    def price(self) -> float:
        """
        Price per unit.
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="priceUnit")
    def price_unit(self) -> str:
        """
        The unit to which the price applies.
        """
        return pulumi.get(self, "price_unit")

    @property
    @pulumi.getter(name="pricingModel")
    def pricing_model(self) -> str:
        """
        The pricing model.
        """
        return pulumi.get(self, "pricing_model")

    @property
    @pulumi.getter
    def sku(self) -> str:
        """
        The SKU identifying the pricing plan.
        """
        return pulumi.get(self, "sku")

    @property
    @pulumi.getter(name="skuDescription")
    def sku_description(self) -> str:
        """
        Description of the pricing plan.
        """
        return pulumi.get(self, "sku_description")


@pulumi.output_type
class GetPublicNetworkIpBlockResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The public network identifier.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The public network identifier.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPublicNetworkMembershipResult(dict):
    def __init__(__self__, *,
                 ips: Sequence[str],
                 resource_id: str,
                 resource_type: str):
        """
        :param Sequence[str] ips: List of public IPs associated to the resource.
        :param str resource_id: The resource identifier.
        :param str resource_type: The resource's type.
        """
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The resource identifier.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The resource's type.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetQuotaQuotaEditLimitRequestDetailResult(dict):
    def __init__(__self__, *,
                 limit: int,
                 reason: str,
                 requested_on: str):
        """
        :param int limit: The new limit that is requested.
        :param str reason: The reason for changing the limit.
        :param str requested_on: The point in time the request was submitted.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "reason", reason)
        pulumi.set(__self__, "requested_on", requested_on)

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        The new limit that is requested.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def reason(self) -> str:
        """
        The reason for changing the limit.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="requestedOn")
    def requested_on(self) -> str:
        """
        The point in time the request was submitted.
        """
        return pulumi.get(self, "requested_on")


@pulumi.output_type
class GetRancherClusterMetadataResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The Rancher Server URL.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The Rancher Server URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetRancherClusterNodePoolResult(dict):
    def __init__(__self__, *,
                 name: str,
                 node_count: int,
                 nodes: Sequence['outputs.GetRancherClusterNodePoolNodeResult'],
                 server_type: str):
        """
        :param str name: Cluster name.
        :param int node_count: Number of configured nodes.
        :param Sequence['GetRancherClusterNodePoolNodeArgs'] nodes: The nodes associated with this node pool.
        :param str server_type: Node server type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "nodes", nodes)
        pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of configured nodes.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetRancherClusterNodePoolNodeResult']:
        """
        The nodes associated with this node pool.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> str:
        """
        Node server type.
        """
        return pulumi.get(self, "server_type")


@pulumi.output_type
class GetRancherClusterNodePoolNodeResult(dict):
    def __init__(__self__, *,
                 server_id: str):
        """
        :param str server_id: The server identifier.
        """
        pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> str:
        """
        The server identifier.
        """
        return pulumi.get(self, "server_id")


@pulumi.output_type
class GetServerNetrisControllerResult(dict):
    def __init__(__self__, *,
                 host_os: str):
        """
        :param str host_os: Host OS on which the Netris Softgate is installed.
        """
        pulumi.set(__self__, "host_os", host_os)

    @property
    @pulumi.getter(name="hostOs")
    def host_os(self) -> str:
        """
        Host OS on which the Netris Softgate is installed.
        """
        return pulumi.get(self, "host_os")


@pulumi.output_type
class GetServerNetrisSoftgateResult(dict):
    def __init__(__self__, *,
                 host_os: str):
        """
        :param str host_os: Host OS on which the Netris Softgate is installed.
        """
        pulumi.set(__self__, "host_os", host_os)

    @property
    @pulumi.getter(name="hostOs")
    def host_os(self) -> str:
        """
        Host OS on which the Netris Softgate is installed.
        """
        return pulumi.get(self, "host_os")


@pulumi.output_type
class GetServerNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 gateway_address: str,
                 ip_blocks_configurations: Sequence['outputs.GetServerNetworkConfigurationIpBlocksConfigurationResult'],
                 private_network_configurations: Sequence['outputs.GetServerNetworkConfigurationPrivateNetworkConfigurationResult'],
                 public_network_configurations: Sequence['outputs.GetServerNetworkConfigurationPublicNetworkConfigurationResult']):
        """
        :param str gateway_address: The address of the gateway assigned to the server.
        :param Sequence['GetServerNetworkConfigurationIpBlocksConfigurationArgs'] ip_blocks_configurations: IP block details of bare metal server.
        :param Sequence['GetServerNetworkConfigurationPrivateNetworkConfigurationArgs'] private_network_configurations: Private network details of bare metal server.
        :param Sequence['GetServerNetworkConfigurationPublicNetworkConfigurationArgs'] public_network_configurations: Public network details of bare metal server.
        """
        pulumi.set(__self__, "gateway_address", gateway_address)
        pulumi.set(__self__, "ip_blocks_configurations", ip_blocks_configurations)
        pulumi.set(__self__, "private_network_configurations", private_network_configurations)
        pulumi.set(__self__, "public_network_configurations", public_network_configurations)

    @property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> str:
        """
        The address of the gateway assigned to the server.
        """
        return pulumi.get(self, "gateway_address")

    @property
    @pulumi.getter(name="ipBlocksConfigurations")
    def ip_blocks_configurations(self) -> Sequence['outputs.GetServerNetworkConfigurationIpBlocksConfigurationResult']:
        """
        IP block details of bare metal server.
        """
        return pulumi.get(self, "ip_blocks_configurations")

    @property
    @pulumi.getter(name="privateNetworkConfigurations")
    def private_network_configurations(self) -> Sequence['outputs.GetServerNetworkConfigurationPrivateNetworkConfigurationResult']:
        """
        Private network details of bare metal server.
        """
        return pulumi.get(self, "private_network_configurations")

    @property
    @pulumi.getter(name="publicNetworkConfigurations")
    def public_network_configurations(self) -> Sequence['outputs.GetServerNetworkConfigurationPublicNetworkConfigurationResult']:
        """
        Public network details of bare metal server.
        """
        return pulumi.get(self, "public_network_configurations")


@pulumi.output_type
class GetServerNetworkConfigurationIpBlocksConfigurationResult(dict):
    def __init__(__self__, *,
                 configuration_type: str,
                 ip_blocks: Sequence['outputs.GetServerNetworkConfigurationIpBlocksConfigurationIpBlockResult']):
        """
        :param str configuration_type: Determines the approach for configuring IP blocks for the server being provisioned.
        :param Sequence['GetServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs'] ip_blocks: The IP blocks assigned to this server.
        """
        pulumi.set(__self__, "configuration_type", configuration_type)
        pulumi.set(__self__, "ip_blocks", ip_blocks)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        Determines the approach for configuring IP blocks for the server being provisioned.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Sequence['outputs.GetServerNetworkConfigurationIpBlocksConfigurationIpBlockResult']:
        """
        The IP blocks assigned to this server.
        """
        return pulumi.get(self, "ip_blocks")


@pulumi.output_type
class GetServerNetworkConfigurationIpBlocksConfigurationIpBlockResult(dict):
    def __init__(__self__, *,
                 id: str,
                 vlan_id: int):
        """
        :param str id: The unique identifier of the server.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetServerNetworkConfigurationPrivateNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 configuration_type: str,
                 private_networks: Sequence['outputs.GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkResult']):
        """
        :param str configuration_type: Determines the approach for configuring IP blocks for the server being provisioned.
        :param Sequence['GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs'] private_networks: The list of private networks this server is member of.
        """
        pulumi.set(__self__, "configuration_type", configuration_type)
        pulumi.set(__self__, "private_networks", private_networks)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> str:
        """
        Determines the approach for configuring IP blocks for the server being provisioned.
        """
        return pulumi.get(self, "configuration_type")

    @property
    @pulumi.getter(name="privateNetworks")
    def private_networks(self) -> Sequence['outputs.GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkResult']:
        """
        The list of private networks this server is member of.
        """
        return pulumi.get(self, "private_networks")


@pulumi.output_type
class GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkResult(dict):
    def __init__(__self__, *,
                 dhcp: bool,
                 id: str,
                 ips: Sequence[str],
                 status_description: str):
        """
        :param bool dhcp: Determines whether DHCP is enabled for this server.
        :param str id: The unique identifier of the server.
        :param Sequence[str] ips: IPs configured on the server.
        :param str status_description: The status of the assignment to the network.
        """
        pulumi.set(__self__, "dhcp", dhcp)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "status_description", status_description)

    @property
    @pulumi.getter
    def dhcp(self) -> bool:
        """
        Determines whether DHCP is enabled for this server.
        """
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        """
        IPs configured on the server.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> str:
        """
        The status of the assignment to the network.
        """
        return pulumi.get(self, "status_description")


@pulumi.output_type
class GetServerNetworkConfigurationPublicNetworkConfigurationResult(dict):
    def __init__(__self__, *,
                 public_networks: Sequence['outputs.GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkResult']):
        """
        :param Sequence['GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkArgs'] public_networks: The list of public networks this server is member of.
        """
        pulumi.set(__self__, "public_networks", public_networks)

    @property
    @pulumi.getter(name="publicNetworks")
    def public_networks(self) -> Sequence['outputs.GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkResult']:
        """
        The list of public networks this server is member of.
        """
        return pulumi.get(self, "public_networks")


@pulumi.output_type
class GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 ips: Sequence[str],
                 status_description: str):
        """
        :param str id: The unique identifier of the server.
        :param Sequence[str] ips: IPs configured on the server.
        :param str status_description: The status of the assignment to the network.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "status_description", status_description)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        """
        IPs configured on the server.
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> str:
        """
        The status of the assignment to the network.
        """
        return pulumi.get(self, "status_description")


@pulumi.output_type
class GetServerStorageConfigurationResult(dict):
    def __init__(__self__, *,
                 root_partitions: Sequence['outputs.GetServerStorageConfigurationRootPartitionResult']):
        """
        :param Sequence['GetServerStorageConfigurationRootPartitionArgs'] root_partitions: Root partition configuration.
        """
        pulumi.set(__self__, "root_partitions", root_partitions)

    @property
    @pulumi.getter(name="rootPartitions")
    def root_partitions(self) -> Sequence['outputs.GetServerStorageConfigurationRootPartitionResult']:
        """
        Root partition configuration.
        """
        return pulumi.get(self, "root_partitions")


@pulumi.output_type
class GetServerStorageConfigurationRootPartitionResult(dict):
    def __init__(__self__, *,
                 raid: str,
                 size: int):
        """
        :param str raid: Software RAID configuration.
        :param int size: The size of the root partition in GB.
        """
        pulumi.set(__self__, "raid", raid)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def raid(self) -> str:
        """
        Software RAID configuration.
        """
        return pulumi.get(self, "raid")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The size of the root partition in GB.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class GetServerTagResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 id: str,
                 is_billing_tag: bool,
                 name: str,
                 value: str):
        """
        :param str created_by: Who the tag was created by.
        :param str id: The unique identifier of the server.
        :param bool is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param str name: The name of the tag.
        :param str value: The value of the tag assigned to the server.
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the server.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> bool:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag assigned to the server.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetStorageNetworkVolumeResult(dict):
    def __init__(__self__, *,
                 capacity_in_gb: int,
                 created_on: str,
                 delete_requested_on: str,
                 description: str,
                 id: str,
                 name: str,
                 path: str,
                 path_suffix: str,
                 permissions: Sequence['outputs.GetStorageNetworkVolumePermissionResult'],
                 protocol: str,
                 status: str,
                 tags: Sequence['outputs.GetStorageNetworkVolumeTagResult'],
                 used_capacity_in_gb: int):
        """
        :param int capacity_in_gb: Maximum capacity in GB.
        :param str created_on: Date and time when this volume was created.
        :param str delete_requested_on: Date and time of the initial request for volume deletion.
        :param str description: Volume description.
        :param str id: The storage network identifier.
        :param str name: The friendly name of this storage network.
        :param str path: Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
        :param str path_suffix: Last part of volume's path.
        :param Sequence['GetStorageNetworkVolumePermissionArgs'] permissions: Permissions for the volume.
        :param str protocol: File system protocol.
        :param str status: Volume's status.
        :param Sequence['GetStorageNetworkVolumeTagArgs'] tags: The tags assigned to the volume.
        :param int used_capacity_in_gb: Used capacity in GB, updated periodically.
        """
        pulumi.set(__self__, "capacity_in_gb", capacity_in_gb)
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "delete_requested_on", delete_requested_on)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "path_suffix", path_suffix)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "used_capacity_in_gb", used_capacity_in_gb)

    @property
    @pulumi.getter(name="capacityInGb")
    def capacity_in_gb(self) -> int:
        """
        Maximum capacity in GB.
        """
        return pulumi.get(self, "capacity_in_gb")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Date and time when this volume was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="deleteRequestedOn")
    def delete_requested_on(self) -> str:
        """
        Date and time of the initial request for volume deletion.
        """
        return pulumi.get(self, "delete_requested_on")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Volume description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The storage network identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The friendly name of this storage network.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pathSuffix")
    def path_suffix(self) -> str:
        """
        Last part of volume's path.
        """
        return pulumi.get(self, "path_suffix")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetStorageNetworkVolumePermissionResult']:
        """
        Permissions for the volume.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        File system protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Volume's status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetStorageNetworkVolumeTagResult']:
        """
        The tags assigned to the volume.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usedCapacityInGb")
    def used_capacity_in_gb(self) -> int:
        """
        Used capacity in GB, updated periodically.
        """
        return pulumi.get(self, "used_capacity_in_gb")


@pulumi.output_type
class GetStorageNetworkVolumePermissionResult(dict):
    def __init__(__self__, *,
                 nfs: Sequence['outputs.GetStorageNetworkVolumePermissionNfResult']):
        """
        :param Sequence['GetStorageNetworkVolumePermissionNfArgs'] nfs: NFS specific permissions on the volume.
        """
        pulumi.set(__self__, "nfs", nfs)

    @property
    @pulumi.getter
    def nfs(self) -> Sequence['outputs.GetStorageNetworkVolumePermissionNfResult']:
        """
        NFS specific permissions on the volume.
        """
        return pulumi.get(self, "nfs")


@pulumi.output_type
class GetStorageNetworkVolumePermissionNfResult(dict):
    def __init__(__self__, *,
                 all_squashes: Sequence[str],
                 no_squashes: Sequence[str],
                 read_onlies: Sequence[str],
                 read_writes: Sequence[str],
                 root_squashes: Sequence[str]):
        """
        :param Sequence[str] all_squashes: All squash permission.
        :param Sequence[str] no_squashes: No squash permission.
        :param Sequence[str] read_onlies: Read only access.
        :param Sequence[str] read_writes: Read/Write access.
        :param Sequence[str] root_squashes: Root squash permission.
        """
        pulumi.set(__self__, "all_squashes", all_squashes)
        pulumi.set(__self__, "no_squashes", no_squashes)
        pulumi.set(__self__, "read_onlies", read_onlies)
        pulumi.set(__self__, "read_writes", read_writes)
        pulumi.set(__self__, "root_squashes", root_squashes)

    @property
    @pulumi.getter(name="allSquashes")
    def all_squashes(self) -> Sequence[str]:
        """
        All squash permission.
        """
        return pulumi.get(self, "all_squashes")

    @property
    @pulumi.getter(name="noSquashes")
    def no_squashes(self) -> Sequence[str]:
        """
        No squash permission.
        """
        return pulumi.get(self, "no_squashes")

    @property
    @pulumi.getter(name="readOnlies")
    def read_onlies(self) -> Sequence[str]:
        """
        Read only access.
        """
        return pulumi.get(self, "read_onlies")

    @property
    @pulumi.getter(name="readWrites")
    def read_writes(self) -> Sequence[str]:
        """
        Read/Write access.
        """
        return pulumi.get(self, "read_writes")

    @property
    @pulumi.getter(name="rootSquashes")
    def root_squashes(self) -> Sequence[str]:
        """
        Root squash permission.
        """
        return pulumi.get(self, "root_squashes")


@pulumi.output_type
class GetStorageNetworkVolumeTagResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 id: str,
                 is_billing_tag: bool,
                 name: str,
                 value: str):
        """
        :param str created_by: Who the tag was created by.
        :param str id: The storage network identifier.
        :param bool is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param str name: The friendly name of this storage network.
        :param str value: The value of the tag assigned to the volume.
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The storage network identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> bool:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The friendly name of this storage network.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag assigned to the volume.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagResourceAssignmentResult(dict):
    def __init__(__self__, *,
                 resource_name: str,
                 value: str):
        """
        :param str resource_name: The resource name.
        :param str value: The value of the tag assigned to the resource.
               * `created_by ` - The tag's creator.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag assigned to the resource.
        * `created_by ` - The tag's creator.
        """
        return pulumi.get(self, "value")


