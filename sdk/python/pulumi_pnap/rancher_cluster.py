# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RancherClusterArgs', 'RancherCluster']

@pulumi.input_type
class RancherClusterArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 configuration: Optional[pulumi.Input['RancherClusterConfigurationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pools: Optional[pulumi.Input['RancherClusterNodePoolsArgs']] = None,
                 workload_configuration: Optional[pulumi.Input['RancherClusterWorkloadConfigurationArgs']] = None):
        """
        The set of arguments for constructing a RancherCluster resource.
        :param pulumi.Input[str] location: Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param pulumi.Input['RancherClusterConfigurationArgs'] configuration: Rancher configuration parameters. The `configuration` block has 7 fields.
        :param pulumi.Input[str] description: Cluster description.
        :param pulumi.Input[str] name: The name of the workload cluster. This field is autogenerated if not provided.
        :param pulumi.Input['RancherClusterNodePoolsArgs'] node_pools: The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        :param pulumi.Input['RancherClusterWorkloadConfigurationArgs'] workload_configuration: Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        """
        pulumi.set(__self__, "location", location)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if workload_configuration is not None:
            pulumi.set(__self__, "workload_configuration", workload_configuration)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['RancherClusterConfigurationArgs']]:
        """
        Rancher configuration parameters. The `configuration` block has 7 fields.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['RancherClusterConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workload cluster. This field is autogenerated if not provided.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input['RancherClusterNodePoolsArgs']]:
        """
        The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input['RancherClusterNodePoolsArgs']]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="workloadConfiguration")
    def workload_configuration(self) -> Optional[pulumi.Input['RancherClusterWorkloadConfigurationArgs']]:
        """
        Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        """
        return pulumi.get(self, "workload_configuration")

    @workload_configuration.setter
    def workload_configuration(self, value: Optional[pulumi.Input['RancherClusterWorkloadConfigurationArgs']]):
        pulumi.set(self, "workload_configuration", value)


@pulumi.input_type
class _RancherClusterState:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['RancherClusterConfigurationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 initial_cluster_version: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['RancherClusterMetadataArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pools: Optional[pulumi.Input['RancherClusterNodePoolsArgs']] = None,
                 status_description: Optional[pulumi.Input[str]] = None,
                 workload_configuration: Optional[pulumi.Input['RancherClusterWorkloadConfigurationArgs']] = None):
        """
        Input properties used for looking up and filtering RancherCluster resources.
        :param pulumi.Input['RancherClusterConfigurationArgs'] configuration: Rancher configuration parameters. The `configuration` block has 7 fields.
        :param pulumi.Input[str] description: Cluster description.
        :param pulumi.Input[str] initial_cluster_version: The Rancher version that was installed on the cluster during the first creation process.
        :param pulumi.Input[str] location: Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param pulumi.Input[Sequence[pulumi.Input['RancherClusterMetadataArgs']]] metadatas: Connection parameters to use to connect to the Rancher Server Administrative GUI.
        :param pulumi.Input[str] name: The name of the workload cluster. This field is autogenerated if not provided.
        :param pulumi.Input['RancherClusterNodePoolsArgs'] node_pools: The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        :param pulumi.Input[str] status_description: The cluster status.
        :param pulumi.Input['RancherClusterWorkloadConfigurationArgs'] workload_configuration: Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if initial_cluster_version is not None:
            pulumi.set(__self__, "initial_cluster_version", initial_cluster_version)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_pools is not None:
            pulumi.set(__self__, "node_pools", node_pools)
        if status_description is not None:
            pulumi.set(__self__, "status_description", status_description)
        if workload_configuration is not None:
            pulumi.set(__self__, "workload_configuration", workload_configuration)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['RancherClusterConfigurationArgs']]:
        """
        Rancher configuration parameters. The `configuration` block has 7 fields.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['RancherClusterConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="initialClusterVersion")
    def initial_cluster_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Rancher version that was installed on the cluster during the first creation process.
        """
        return pulumi.get(self, "initial_cluster_version")

    @initial_cluster_version.setter
    def initial_cluster_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "initial_cluster_version", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RancherClusterMetadataArgs']]]]:
        """
        Connection parameters to use to connect to the Rancher Server Administrative GUI.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RancherClusterMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workload cluster. This field is autogenerated if not provided.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input['RancherClusterNodePoolsArgs']]:
        """
        The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input['RancherClusterNodePoolsArgs']]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster status.
        """
        return pulumi.get(self, "status_description")

    @status_description.setter
    def status_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_description", value)

    @property
    @pulumi.getter(name="workloadConfiguration")
    def workload_configuration(self) -> Optional[pulumi.Input['RancherClusterWorkloadConfigurationArgs']]:
        """
        Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        """
        return pulumi.get(self, "workload_configuration")

    @workload_configuration.setter
    def workload_configuration(self, value: Optional[pulumi.Input['RancherClusterWorkloadConfigurationArgs']]):
        pulumi.set(self, "workload_configuration", value)


class RancherCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['RancherClusterConfigurationArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pools: Optional[pulumi.Input[pulumi.InputType['RancherClusterNodePoolsArgs']]] = None,
                 workload_configuration: Optional[pulumi.Input[pulumi.InputType['RancherClusterWorkloadConfigurationArgs']]] = None,
                 __props__=None):
        """
        Provides a phoenixNAP Rancher Cluster resource. This can be used to create and delete Rancher Server deployments.

        ## Example Usage

        Create a Rancher Cluster

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a Rancher Cluster
        rancher__deployment_1 = pnap.RancherCluster("rancher-Deployment-1",
            description="A Rancher Server deployment with specific server type.",
            location="PHX",
            node_pools=pnap.RancherClusterNodePoolsArgs(
                node_count=1,
                server_type="s1.c1.medium",
                ssh_config=pnap.RancherClusterNodePoolsSshConfigArgs(
                    install_default_keys=False,
                    keys=[
                        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne",
                        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo",
                    ],
                ),
            ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RancherClusterConfigurationArgs']] configuration: Rancher configuration parameters. The `configuration` block has 7 fields.
        :param pulumi.Input[str] description: Cluster description.
        :param pulumi.Input[str] location: Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param pulumi.Input[str] name: The name of the workload cluster. This field is autogenerated if not provided.
        :param pulumi.Input[pulumi.InputType['RancherClusterNodePoolsArgs']] node_pools: The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        :param pulumi.Input[pulumi.InputType['RancherClusterWorkloadConfigurationArgs']] workload_configuration: Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RancherClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a phoenixNAP Rancher Cluster resource. This can be used to create and delete Rancher Server deployments.

        ## Example Usage

        Create a Rancher Cluster

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a Rancher Cluster
        rancher__deployment_1 = pnap.RancherCluster("rancher-Deployment-1",
            description="A Rancher Server deployment with specific server type.",
            location="PHX",
            node_pools=pnap.RancherClusterNodePoolsArgs(
                node_count=1,
                server_type="s1.c1.medium",
                ssh_config=pnap.RancherClusterNodePoolsSshConfigArgs(
                    install_default_keys=False,
                    keys=[
                        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne",
                        "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo",
                    ],
                ),
            ))
        ```

        :param str resource_name: The name of the resource.
        :param RancherClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RancherClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['RancherClusterConfigurationArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pools: Optional[pulumi.Input[pulumi.InputType['RancherClusterNodePoolsArgs']]] = None,
                 workload_configuration: Optional[pulumi.Input[pulumi.InputType['RancherClusterWorkloadConfigurationArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RancherClusterArgs.__new__(RancherClusterArgs)

            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["description"] = description
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["node_pools"] = node_pools
            __props__.__dict__["workload_configuration"] = workload_configuration
            __props__.__dict__["initial_cluster_version"] = None
            __props__.__dict__["metadatas"] = None
            __props__.__dict__["status_description"] = None
        super(RancherCluster, __self__).__init__(
            'pnap:index/rancherCluster:RancherCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configuration: Optional[pulumi.Input[pulumi.InputType['RancherClusterConfigurationArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            initial_cluster_version: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RancherClusterMetadataArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_pools: Optional[pulumi.Input[pulumi.InputType['RancherClusterNodePoolsArgs']]] = None,
            status_description: Optional[pulumi.Input[str]] = None,
            workload_configuration: Optional[pulumi.Input[pulumi.InputType['RancherClusterWorkloadConfigurationArgs']]] = None) -> 'RancherCluster':
        """
        Get an existing RancherCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RancherClusterConfigurationArgs']] configuration: Rancher configuration parameters. The `configuration` block has 7 fields.
        :param pulumi.Input[str] description: Cluster description.
        :param pulumi.Input[str] initial_cluster_version: The Rancher version that was installed on the cluster during the first creation process.
        :param pulumi.Input[str] location: Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RancherClusterMetadataArgs']]]] metadatas: Connection parameters to use to connect to the Rancher Server Administrative GUI.
        :param pulumi.Input[str] name: The name of the workload cluster. This field is autogenerated if not provided.
        :param pulumi.Input[pulumi.InputType['RancherClusterNodePoolsArgs']] node_pools: The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        :param pulumi.Input[str] status_description: The cluster status.
        :param pulumi.Input[pulumi.InputType['RancherClusterWorkloadConfigurationArgs']] workload_configuration: Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RancherClusterState.__new__(_RancherClusterState)

        __props__.__dict__["configuration"] = configuration
        __props__.__dict__["description"] = description
        __props__.__dict__["initial_cluster_version"] = initial_cluster_version
        __props__.__dict__["location"] = location
        __props__.__dict__["metadatas"] = metadatas
        __props__.__dict__["name"] = name
        __props__.__dict__["node_pools"] = node_pools
        __props__.__dict__["status_description"] = status_description
        __props__.__dict__["workload_configuration"] = workload_configuration
        return RancherCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output[Optional['outputs.RancherClusterConfiguration']]:
        """
        Rancher configuration parameters. The `configuration` block has 7 fields.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="initialClusterVersion")
    def initial_cluster_version(self) -> pulumi.Output[str]:
        """
        The Rancher version that was installed on the cluster during the first creation process.
        """
        return pulumi.get(self, "initial_cluster_version")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metadatas(self) -> pulumi.Output[Sequence['outputs.RancherClusterMetadata']]:
        """
        Connection parameters to use to connect to the Rancher Server Administrative GUI.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the workload cluster. This field is autogenerated if not provided.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> pulumi.Output['outputs.RancherClusterNodePools']:
        """
        The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
        """
        return pulumi.get(self, "node_pools")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> pulumi.Output[str]:
        """
        The cluster status.
        """
        return pulumi.get(self, "status_description")

    @property
    @pulumi.getter(name="workloadConfiguration")
    def workload_configuration(self) -> pulumi.Output[Optional['outputs.RancherClusterWorkloadConfiguration']]:
        """
        Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
        """
        return pulumi.get(self, "workload_configuration")

