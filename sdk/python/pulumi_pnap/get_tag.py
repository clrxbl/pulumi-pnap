# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetTagResult',
    'AwaitableGetTagResult',
    'get_tag',
    'get_tag_output',
]

@pulumi.output_type
class GetTagResult:
    """
    A collection of values returned by getTag.
    """
    def __init__(__self__, created_by=None, description=None, id=None, is_billing_tag=None, name=None, resource_assignments=None, values=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_billing_tag and not isinstance(is_billing_tag, bool):
            raise TypeError("Expected argument 'is_billing_tag' to be a bool")
        pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_assignments and not isinstance(resource_assignments, list):
            raise TypeError("Expected argument 'resource_assignments' to be a list")
        pulumi.set(__self__, "resource_assignments", resource_assignments)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the tag.
        * `is_billing_tag `- Whether or not to show the tag as part of billing and invoices.
        * `resource_assignments ` - The tag's assigned resources.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier of the tag.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> bool:
        return pulumi.get(self, "is_billing_tag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceAssignments")
    def resource_assignments(self) -> Sequence['outputs.GetTagResourceAssignmentResult']:
        return pulumi.get(self, "resource_assignments")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The optional values of the tag..
        """
        return pulumi.get(self, "values")


class AwaitableGetTagResult(GetTagResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTagResult(
            created_by=self.created_by,
            description=self.description,
            id=self.id,
            is_billing_tag=self.is_billing_tag,
            name=self.name,
            resource_assignments=self.resource_assignments,
            values=self.values)


def get_tag(id: Optional[str] = None,
            name: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTagResult:
    """
    Provides a phoenixNAP tag datasource. This can be used to read tags.

    ## Example Usage

    Fetch a tag by name and show it's details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test = pnap.get_tag(name="tag3")
    pulumi.export("details", test)
    ```


    :param str id: The unique identifier of the tag.
    :param str name: The unique name of the tag.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getTag:getTag', __args__, opts=opts, typ=GetTagResult).value

    return AwaitableGetTagResult(
        created_by=pulumi.get(__ret__, 'created_by'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        is_billing_tag=pulumi.get(__ret__, 'is_billing_tag'),
        name=pulumi.get(__ret__, 'name'),
        resource_assignments=pulumi.get(__ret__, 'resource_assignments'),
        values=pulumi.get(__ret__, 'values'))


@_utilities.lift_output_func(get_tag)
def get_tag_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                   name: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTagResult]:
    """
    Provides a phoenixNAP tag datasource. This can be used to read tags.

    ## Example Usage

    Fetch a tag by name and show it's details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test = pnap.get_tag(name="tag3")
    pulumi.export("details", test)
    ```


    :param str id: The unique identifier of the tag.
    :param str name: The unique name of the tag.
    """
    ...
