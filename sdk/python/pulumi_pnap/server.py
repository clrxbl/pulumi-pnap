# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServerArgs', 'Server']

@pulumi.input_type
class ServerArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 location: pulumi.Input[str],
                 os: pulumi.Input[str],
                 type: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 cloud_init: Optional[pulumi.Input['ServerCloudInitArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 install_default_ssh_keys: Optional[pulumi.Input[bool]] = None,
                 install_os_to_ram: Optional[pulumi.Input[bool]] = None,
                 management_access_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 netris_softgate: Optional[pulumi.Input['ServerNetrisSoftgateArgs']] = None,
                 network_configuration: Optional[pulumi.Input['ServerNetworkConfigurationArgs']] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 pricing_model: Optional[pulumi.Input[str]] = None,
                 rdp_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reservation_id: Optional[pulumi.Input[str]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_configuration: Optional[pulumi.Input['ServerStorageConfigurationArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTagArgs']]]] = None):
        """
        The set of arguments for constructing a Server resource.
        :param pulumi.Input[str] hostname: Server hostname.
        :param pulumi.Input[str] location: Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        :param pulumi.Input[str] os: The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        :param pulumi.Input[str] type: Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        :param pulumi.Input[str] action: Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        :param pulumi.Input['ServerCloudInitArgs'] cloud_init: Cloud-init configuration details. Structure is documented below.
        :param pulumi.Input[str] description: Server description.
        :param pulumi.Input[bool] force: Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
               
               
               The `cloud_init` block has one field:
        :param pulumi.Input[bool] install_os_to_ram: If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] management_access_allowed_ips: Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        :param pulumi.Input['ServerNetrisSoftgateArgs'] netris_softgate: Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        :param pulumi.Input['ServerNetworkConfigurationArgs'] network_configuration: Entire network details of bare metal server. Structure is documented below.
        :param pulumi.Input[str] network_type: The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        :param pulumi.Input[str] pricing_model: Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rdp_allowed_ips: List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        :param pulumi.Input[str] reservation_id: Server reservation ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_ids: A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: A list of SSH Keys that will be installed on the server.
        :param pulumi.Input['ServerStorageConfigurationArgs'] storage_configuration: Storage configuration. Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ServerTagArgs']]] tags: Tags to set to server, if any. Structure is documented below.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "type", type)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if cloud_init is not None:
            pulumi.set(__self__, "cloud_init", cloud_init)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if install_default_ssh_keys is not None:
            pulumi.set(__self__, "install_default_ssh_keys", install_default_ssh_keys)
        if install_os_to_ram is not None:
            pulumi.set(__self__, "install_os_to_ram", install_os_to_ram)
        if management_access_allowed_ips is not None:
            pulumi.set(__self__, "management_access_allowed_ips", management_access_allowed_ips)
        if netris_softgate is not None:
            pulumi.set(__self__, "netris_softgate", netris_softgate)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if pricing_model is not None:
            pulumi.set(__self__, "pricing_model", pricing_model)
        if rdp_allowed_ips is not None:
            pulumi.set(__self__, "rdp_allowed_ips", rdp_allowed_ips)
        if reservation_id is not None:
            pulumi.set(__self__, "reservation_id", reservation_id)
        if ssh_key_ids is not None:
            pulumi.set(__self__, "ssh_key_ids", ssh_key_ids)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if storage_configuration is not None:
            pulumi.set(__self__, "storage_configuration", storage_configuration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Server hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def os(self) -> pulumi.Input[str]:
        """
        The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: pulumi.Input[str]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="cloudInit")
    def cloud_init(self) -> Optional[pulumi.Input['ServerCloudInitArgs']]:
        """
        Cloud-init configuration details. Structure is documented below.
        """
        return pulumi.get(self, "cloud_init")

    @cloud_init.setter
    def cloud_init(self, value: Optional[pulumi.Input['ServerCloudInitArgs']]):
        pulumi.set(self, "cloud_init", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Server description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.


        The `cloud_init` block has one field:
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="installDefaultSshKeys")
    def install_default_ssh_keys(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "install_default_ssh_keys")

    @install_default_ssh_keys.setter
    def install_default_ssh_keys(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_default_ssh_keys", value)

    @property
    @pulumi.getter(name="installOsToRam")
    def install_os_to_ram(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        """
        return pulumi.get(self, "install_os_to_ram")

    @install_os_to_ram.setter
    def install_os_to_ram(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_os_to_ram", value)

    @property
    @pulumi.getter(name="managementAccessAllowedIps")
    def management_access_allowed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        """
        return pulumi.get(self, "management_access_allowed_ips")

    @management_access_allowed_ips.setter
    def management_access_allowed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "management_access_allowed_ips", value)

    @property
    @pulumi.getter(name="netrisSoftgate")
    def netris_softgate(self) -> Optional[pulumi.Input['ServerNetrisSoftgateArgs']]:
        """
        Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        """
        return pulumi.get(self, "netris_softgate")

    @netris_softgate.setter
    def netris_softgate(self, value: Optional[pulumi.Input['ServerNetrisSoftgateArgs']]):
        pulumi.set(self, "netris_softgate", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional[pulumi.Input['ServerNetworkConfigurationArgs']]:
        """
        Entire network details of bare metal server. Structure is documented below.
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: Optional[pulumi.Input['ServerNetworkConfigurationArgs']]):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="pricingModel")
    def pricing_model(self) -> Optional[pulumi.Input[str]]:
        """
        Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        """
        return pulumi.get(self, "pricing_model")

    @pricing_model.setter
    def pricing_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pricing_model", value)

    @property
    @pulumi.getter(name="rdpAllowedIps")
    def rdp_allowed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        """
        return pulumi.get(self, "rdp_allowed_ips")

    @rdp_allowed_ips.setter
    def rdp_allowed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rdp_allowed_ips", value)

    @property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> Optional[pulumi.Input[str]]:
        """
        Server reservation ID.
        """
        return pulumi.get(self, "reservation_id")

    @reservation_id.setter
    def reservation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reservation_id", value)

    @property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        """
        return pulumi.get(self, "ssh_key_ids")

    @ssh_key_ids.setter
    def ssh_key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_key_ids", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of SSH Keys that will be installed on the server.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> Optional[pulumi.Input['ServerStorageConfigurationArgs']]:
        """
        Storage configuration. Structure is documented below.
        """
        return pulumi.get(self, "storage_configuration")

    @storage_configuration.setter
    def storage_configuration(self, value: Optional[pulumi.Input['ServerStorageConfigurationArgs']]):
        pulumi.set(self, "storage_configuration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerTagArgs']]]]:
        """
        Tags to set to server, if any. Structure is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ServerState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 cloud_init: Optional[pulumi.Input['ServerCloudInitArgs']] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cores_per_cpu: Optional[pulumi.Input[int]] = None,
                 cpu: Optional[pulumi.Input[str]] = None,
                 cpu_count: Optional[pulumi.Input[int]] = None,
                 cpu_frequency_in_ghz: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 install_default_ssh_keys: Optional[pulumi.Input[bool]] = None,
                 install_os_to_ram: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 management_access_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 management_ui_url: Optional[pulumi.Input[str]] = None,
                 netris_controllers: Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetrisControllerArgs']]]] = None,
                 netris_softgate: Optional[pulumi.Input['ServerNetrisSoftgateArgs']] = None,
                 network_configuration: Optional[pulumi.Input['ServerNetworkConfigurationArgs']] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pricing_model: Optional[pulumi.Input[str]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 provisioned_on: Optional[pulumi.Input[str]] = None,
                 public_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ram: Optional[pulumi.Input[str]] = None,
                 rdp_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reservation_id: Optional[pulumi.Input[str]] = None,
                 root_password: Optional[pulumi.Input[str]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 storage_configuration: Optional[pulumi.Input['ServerStorageConfigurationArgs']] = None,
                 superseded_by: Optional[pulumi.Input[str]] = None,
                 supersedes: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Server resources.
        :param pulumi.Input[str] action: Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        :param pulumi.Input['ServerCloudInitArgs'] cloud_init: Cloud-init configuration details. Structure is documented below.
        :param pulumi.Input[str] cluster_id: The cluster reference id if any.
        :param pulumi.Input[int] cores_per_cpu: The number of physical cores present on each CPU.
        :param pulumi.Input[str] cpu: A description of the machine CPU.
        :param pulumi.Input[int] cpu_count: The number of CPUs available in the system.
        :param pulumi.Input[int] cpu_frequency_in_ghz: The CPU frequency in GHz.
        :param pulumi.Input[str] description: Server description.
        :param pulumi.Input[bool] force: Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
               
               
               The `cloud_init` block has one field:
        :param pulumi.Input[str] hostname: Server hostname.
        :param pulumi.Input[bool] install_os_to_ram: If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        :param pulumi.Input[str] location: Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] management_access_allowed_ips: Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        :param pulumi.Input[str] management_ui_url: The URL of the management UI which will only be returned in response to provisioning a server.
        :param pulumi.Input[Sequence[pulumi.Input['ServerNetrisControllerArgs']]] netris_controllers: Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
        :param pulumi.Input['ServerNetrisSoftgateArgs'] netris_softgate: Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        :param pulumi.Input['ServerNetworkConfigurationArgs'] network_configuration: Entire network details of bare metal server. Structure is documented below.
        :param pulumi.Input[str] network_type: The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        :param pulumi.Input[str] os: The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        :param pulumi.Input[str] password: Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
        :param pulumi.Input[str] pricing_model: Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ip_addresses: Private IP Addresses assigned to server. Must contain at least 1 item.
        :param pulumi.Input[str] provisioned_on: Date and time when server was provisioned.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ip_addresses: Public IP Addresses assigned to server. Must contain at least 1 item.
        :param pulumi.Input[str] ram: A description of the machine RAM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rdp_allowed_ips: List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        :param pulumi.Input[str] reservation_id: Server reservation ID.
        :param pulumi.Input[str] root_password: Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_ids: A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: A list of SSH Keys that will be installed on the server.
        :param pulumi.Input[str] status: The status of the server.
        :param pulumi.Input[str] storage: A description of the machine storage.
        :param pulumi.Input['ServerStorageConfigurationArgs'] storage_configuration: Storage configuration. Structure is documented below.
        :param pulumi.Input[str] superseded_by: Unique identifier of the server to which the reservation has been transferred.
        :param pulumi.Input[str] supersedes: Unique identifier of the server from which the reservation has been transferred.
        :param pulumi.Input[Sequence[pulumi.Input['ServerTagArgs']]] tags: Tags to set to server, if any. Structure is documented below.
        :param pulumi.Input[str] type: Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if cloud_init is not None:
            pulumi.set(__self__, "cloud_init", cloud_init)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cores_per_cpu is not None:
            pulumi.set(__self__, "cores_per_cpu", cores_per_cpu)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if cpu_frequency_in_ghz is not None:
            pulumi.set(__self__, "cpu_frequency_in_ghz", cpu_frequency_in_ghz)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if install_default_ssh_keys is not None:
            pulumi.set(__self__, "install_default_ssh_keys", install_default_ssh_keys)
        if install_os_to_ram is not None:
            pulumi.set(__self__, "install_os_to_ram", install_os_to_ram)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if management_access_allowed_ips is not None:
            pulumi.set(__self__, "management_access_allowed_ips", management_access_allowed_ips)
        if management_ui_url is not None:
            pulumi.set(__self__, "management_ui_url", management_ui_url)
        if netris_controllers is not None:
            pulumi.set(__self__, "netris_controllers", netris_controllers)
        if netris_softgate is not None:
            pulumi.set(__self__, "netris_softgate", netris_softgate)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pricing_model is not None:
            pulumi.set(__self__, "pricing_model", pricing_model)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        if provisioned_on is not None:
            pulumi.set(__self__, "provisioned_on", provisioned_on)
        if public_ip_addresses is not None:
            pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        if ram is not None:
            pulumi.set(__self__, "ram", ram)
        if rdp_allowed_ips is not None:
            pulumi.set(__self__, "rdp_allowed_ips", rdp_allowed_ips)
        if reservation_id is not None:
            pulumi.set(__self__, "reservation_id", reservation_id)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if ssh_key_ids is not None:
            pulumi.set(__self__, "ssh_key_ids", ssh_key_ids)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if storage_configuration is not None:
            pulumi.set(__self__, "storage_configuration", storage_configuration)
        if superseded_by is not None:
            pulumi.set(__self__, "superseded_by", superseded_by)
        if supersedes is not None:
            pulumi.set(__self__, "supersedes", supersedes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="cloudInit")
    def cloud_init(self) -> Optional[pulumi.Input['ServerCloudInitArgs']]:
        """
        Cloud-init configuration details. Structure is documented below.
        """
        return pulumi.get(self, "cloud_init")

    @cloud_init.setter
    def cloud_init(self, value: Optional[pulumi.Input['ServerCloudInitArgs']]):
        pulumi.set(self, "cloud_init", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster reference id if any.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="coresPerCpu")
    def cores_per_cpu(self) -> Optional[pulumi.Input[int]]:
        """
        The number of physical cores present on each CPU.
        """
        return pulumi.get(self, "cores_per_cpu")

    @cores_per_cpu.setter
    def cores_per_cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cores_per_cpu", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the machine CPU.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPUs available in the system.
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="cpuFrequencyInGhz")
    def cpu_frequency_in_ghz(self) -> Optional[pulumi.Input[int]]:
        """
        The CPU frequency in GHz.
        """
        return pulumi.get(self, "cpu_frequency_in_ghz")

    @cpu_frequency_in_ghz.setter
    def cpu_frequency_in_ghz(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_frequency_in_ghz", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Server description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.


        The `cloud_init` block has one field:
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Server hostname.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="installDefaultSshKeys")
    def install_default_ssh_keys(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "install_default_ssh_keys")

    @install_default_ssh_keys.setter
    def install_default_ssh_keys(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_default_ssh_keys", value)

    @property
    @pulumi.getter(name="installOsToRam")
    def install_os_to_ram(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        """
        return pulumi.get(self, "install_os_to_ram")

    @install_os_to_ram.setter
    def install_os_to_ram(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_os_to_ram", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managementAccessAllowedIps")
    def management_access_allowed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        """
        return pulumi.get(self, "management_access_allowed_ips")

    @management_access_allowed_ips.setter
    def management_access_allowed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "management_access_allowed_ips", value)

    @property
    @pulumi.getter(name="managementUiUrl")
    def management_ui_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the management UI which will only be returned in response to provisioning a server.
        """
        return pulumi.get(self, "management_ui_url")

    @management_ui_url.setter
    def management_ui_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_ui_url", value)

    @property
    @pulumi.getter(name="netrisControllers")
    def netris_controllers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetrisControllerArgs']]]]:
        """
        Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
        """
        return pulumi.get(self, "netris_controllers")

    @netris_controllers.setter
    def netris_controllers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetrisControllerArgs']]]]):
        pulumi.set(self, "netris_controllers", value)

    @property
    @pulumi.getter(name="netrisSoftgate")
    def netris_softgate(self) -> Optional[pulumi.Input['ServerNetrisSoftgateArgs']]:
        """
        Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        """
        return pulumi.get(self, "netris_softgate")

    @netris_softgate.setter
    def netris_softgate(self, value: Optional[pulumi.Input['ServerNetrisSoftgateArgs']]):
        pulumi.set(self, "netris_softgate", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional[pulumi.Input['ServerNetworkConfigurationArgs']]:
        """
        Entire network details of bare metal server. Structure is documented below.
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: Optional[pulumi.Input['ServerNetworkConfigurationArgs']]):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="pricingModel")
    def pricing_model(self) -> Optional[pulumi.Input[str]]:
        """
        Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        """
        return pulumi.get(self, "pricing_model")

    @pricing_model.setter
    def pricing_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pricing_model", value)

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Private IP Addresses assigned to server. Must contain at least 1 item.
        """
        return pulumi.get(self, "private_ip_addresses")

    @private_ip_addresses.setter
    def private_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ip_addresses", value)

    @property
    @pulumi.getter(name="provisionedOn")
    def provisioned_on(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when server was provisioned.
        """
        return pulumi.get(self, "provisioned_on")

    @provisioned_on.setter
    def provisioned_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioned_on", value)

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Public IP Addresses assigned to server. Must contain at least 1 item.
        """
        return pulumi.get(self, "public_ip_addresses")

    @public_ip_addresses.setter
    def public_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_ip_addresses", value)

    @property
    @pulumi.getter
    def ram(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the machine RAM.
        """
        return pulumi.get(self, "ram")

    @ram.setter
    def ram(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ram", value)

    @property
    @pulumi.getter(name="rdpAllowedIps")
    def rdp_allowed_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        """
        return pulumi.get(self, "rdp_allowed_ips")

    @rdp_allowed_ips.setter
    def rdp_allowed_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rdp_allowed_ips", value)

    @property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> Optional[pulumi.Input[str]]:
        """
        Server reservation ID.
        """
        return pulumi.get(self, "reservation_id")

    @reservation_id.setter
    def reservation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reservation_id", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        """
        return pulumi.get(self, "ssh_key_ids")

    @ssh_key_ids.setter
    def ssh_key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_key_ids", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of SSH Keys that will be installed on the server.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the server.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the machine storage.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> Optional[pulumi.Input['ServerStorageConfigurationArgs']]:
        """
        Storage configuration. Structure is documented below.
        """
        return pulumi.get(self, "storage_configuration")

    @storage_configuration.setter
    def storage_configuration(self, value: Optional[pulumi.Input['ServerStorageConfigurationArgs']]):
        pulumi.set(self, "storage_configuration", value)

    @property
    @pulumi.getter(name="supersededBy")
    def superseded_by(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the server to which the reservation has been transferred.
        """
        return pulumi.get(self, "superseded_by")

    @superseded_by.setter
    def superseded_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "superseded_by", value)

    @property
    @pulumi.getter
    def supersedes(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the server from which the reservation has been transferred.
        """
        return pulumi.get(self, "supersedes")

    @supersedes.setter
    def supersedes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supersedes", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerTagArgs']]]]:
        """
        Tags to set to server, if any. Structure is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Server(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 cloud_init: Optional[pulumi.Input[pulumi.InputType['ServerCloudInitArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 install_default_ssh_keys: Optional[pulumi.Input[bool]] = None,
                 install_os_to_ram: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 management_access_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 netris_softgate: Optional[pulumi.Input[pulumi.InputType['ServerNetrisSoftgateArgs']]] = None,
                 network_configuration: Optional[pulumi.Input[pulumi.InputType['ServerNetworkConfigurationArgs']]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 pricing_model: Optional[pulumi.Input[str]] = None,
                 rdp_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reservation_id: Optional[pulumi.Input[str]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_configuration: Optional[pulumi.Input[pulumi.InputType['ServerStorageConfigurationArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTagArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a phoenixNAP server resource. This can be used to create,
        modify, and delete servers.

        ## Example Usage

        Create a server

        ```python
        import pulumi
        import base64
        import pulumi_pnap as pnap

        # Create a server
        test__server_1 = pnap.Server("test-Server-1",
            hostname="Test-Server-1",
            os="ubuntu/bionic",
            type="s1.c1.medium",
            location="PHX",
            install_default_ssh_keys=True,
            ssh_keys=["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126"],
            cloud_init=pnap.ServerCloudInitArgs(
                user_data=(lambda path: base64.b64encode(open(path).read().encode()).decode())("~/terraform-provider-pnap/create-folder.txt"),
            ),
            network_configuration=pnap.ServerNetworkConfigurationArgs(
                private_network_configuration=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs(
                    configuration_type="USER_DEFINED",
                    private_networks=[
                        pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(
                            server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(
                                id=pnap_private_network["Test-Network-33"]["id"],
                                ips=["10.0.0.12"],
                            ),
                        ),
                        pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(
                            server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(
                                id=pnap_private_network["Test-Network-44"]["id"],
                                ips=["172.16.0.12"],
                            ),
                        ),
                    ],
                ),
            ))
        #pricing_model = "ONE_MONTH_RESERVATION"
        #allowed actions are: reboot, reset, powered-on, powered-off, shutdown
        #action = "powered-on"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        :param pulumi.Input[pulumi.InputType['ServerCloudInitArgs']] cloud_init: Cloud-init configuration details. Structure is documented below.
        :param pulumi.Input[str] description: Server description.
        :param pulumi.Input[bool] force: Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
               
               
               The `cloud_init` block has one field:
        :param pulumi.Input[str] hostname: Server hostname.
        :param pulumi.Input[bool] install_os_to_ram: If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        :param pulumi.Input[str] location: Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] management_access_allowed_ips: Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        :param pulumi.Input[pulumi.InputType['ServerNetrisSoftgateArgs']] netris_softgate: Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ServerNetworkConfigurationArgs']] network_configuration: Entire network details of bare metal server. Structure is documented below.
        :param pulumi.Input[str] network_type: The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        :param pulumi.Input[str] os: The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        :param pulumi.Input[str] pricing_model: Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rdp_allowed_ips: List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        :param pulumi.Input[str] reservation_id: Server reservation ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_ids: A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: A list of SSH Keys that will be installed on the server.
        :param pulumi.Input[pulumi.InputType['ServerStorageConfigurationArgs']] storage_configuration: Storage configuration. Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTagArgs']]]] tags: Tags to set to server, if any. Structure is documented below.
        :param pulumi.Input[str] type: Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a phoenixNAP server resource. This can be used to create,
        modify, and delete servers.

        ## Example Usage

        Create a server

        ```python
        import pulumi
        import base64
        import pulumi_pnap as pnap

        # Create a server
        test__server_1 = pnap.Server("test-Server-1",
            hostname="Test-Server-1",
            os="ubuntu/bionic",
            type="s1.c1.medium",
            location="PHX",
            install_default_ssh_keys=True,
            ssh_keys=["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126"],
            cloud_init=pnap.ServerCloudInitArgs(
                user_data=(lambda path: base64.b64encode(open(path).read().encode()).decode())("~/terraform-provider-pnap/create-folder.txt"),
            ),
            network_configuration=pnap.ServerNetworkConfigurationArgs(
                private_network_configuration=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs(
                    configuration_type="USER_DEFINED",
                    private_networks=[
                        pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(
                            server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(
                                id=pnap_private_network["Test-Network-33"]["id"],
                                ips=["10.0.0.12"],
                            ),
                        ),
                        pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(
                            server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(
                                id=pnap_private_network["Test-Network-44"]["id"],
                                ips=["172.16.0.12"],
                            ),
                        ),
                    ],
                ),
            ))
        #pricing_model = "ONE_MONTH_RESERVATION"
        #allowed actions are: reboot, reset, powered-on, powered-off, shutdown
        #action = "powered-on"
        ```

        :param str resource_name: The name of the resource.
        :param ServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 cloud_init: Optional[pulumi.Input[pulumi.InputType['ServerCloudInitArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 install_default_ssh_keys: Optional[pulumi.Input[bool]] = None,
                 install_os_to_ram: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 management_access_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 netris_softgate: Optional[pulumi.Input[pulumi.InputType['ServerNetrisSoftgateArgs']]] = None,
                 network_configuration: Optional[pulumi.Input[pulumi.InputType['ServerNetworkConfigurationArgs']]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 pricing_model: Optional[pulumi.Input[str]] = None,
                 rdp_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reservation_id: Optional[pulumi.Input[str]] = None,
                 ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage_configuration: Optional[pulumi.Input[pulumi.InputType['ServerStorageConfigurationArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTagArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerArgs.__new__(ServerArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["cloud_init"] = cloud_init
            __props__.__dict__["description"] = description
            __props__.__dict__["force"] = force
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["install_default_ssh_keys"] = install_default_ssh_keys
            __props__.__dict__["install_os_to_ram"] = install_os_to_ram
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["management_access_allowed_ips"] = management_access_allowed_ips
            __props__.__dict__["netris_softgate"] = netris_softgate
            __props__.__dict__["network_configuration"] = network_configuration
            __props__.__dict__["network_type"] = network_type
            if os is None and not opts.urn:
                raise TypeError("Missing required property 'os'")
            __props__.__dict__["os"] = os
            __props__.__dict__["pricing_model"] = pricing_model
            __props__.__dict__["rdp_allowed_ips"] = rdp_allowed_ips
            __props__.__dict__["reservation_id"] = reservation_id
            __props__.__dict__["ssh_key_ids"] = ssh_key_ids
            __props__.__dict__["ssh_keys"] = ssh_keys
            __props__.__dict__["storage_configuration"] = storage_configuration
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["cluster_id"] = None
            __props__.__dict__["cores_per_cpu"] = None
            __props__.__dict__["cpu"] = None
            __props__.__dict__["cpu_count"] = None
            __props__.__dict__["cpu_frequency_in_ghz"] = None
            __props__.__dict__["management_ui_url"] = None
            __props__.__dict__["netris_controllers"] = None
            __props__.__dict__["password"] = None
            __props__.__dict__["private_ip_addresses"] = None
            __props__.__dict__["provisioned_on"] = None
            __props__.__dict__["public_ip_addresses"] = None
            __props__.__dict__["ram"] = None
            __props__.__dict__["root_password"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["storage"] = None
            __props__.__dict__["superseded_by"] = None
            __props__.__dict__["supersedes"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Server, __self__).__init__(
            'pnap:index/server:Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            cloud_init: Optional[pulumi.Input[pulumi.InputType['ServerCloudInitArgs']]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cores_per_cpu: Optional[pulumi.Input[int]] = None,
            cpu: Optional[pulumi.Input[str]] = None,
            cpu_count: Optional[pulumi.Input[int]] = None,
            cpu_frequency_in_ghz: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            force: Optional[pulumi.Input[bool]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            install_default_ssh_keys: Optional[pulumi.Input[bool]] = None,
            install_os_to_ram: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            management_access_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            management_ui_url: Optional[pulumi.Input[str]] = None,
            netris_controllers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerNetrisControllerArgs']]]]] = None,
            netris_softgate: Optional[pulumi.Input[pulumi.InputType['ServerNetrisSoftgateArgs']]] = None,
            network_configuration: Optional[pulumi.Input[pulumi.InputType['ServerNetworkConfigurationArgs']]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            os: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            pricing_model: Optional[pulumi.Input[str]] = None,
            private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            provisioned_on: Optional[pulumi.Input[str]] = None,
            public_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ram: Optional[pulumi.Input[str]] = None,
            rdp_allowed_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            reservation_id: Optional[pulumi.Input[str]] = None,
            root_password: Optional[pulumi.Input[str]] = None,
            ssh_key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            storage: Optional[pulumi.Input[str]] = None,
            storage_configuration: Optional[pulumi.Input[pulumi.InputType['ServerStorageConfigurationArgs']]] = None,
            superseded_by: Optional[pulumi.Input[str]] = None,
            supersedes: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTagArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Server':
        """
        Get an existing Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        :param pulumi.Input[pulumi.InputType['ServerCloudInitArgs']] cloud_init: Cloud-init configuration details. Structure is documented below.
        :param pulumi.Input[str] cluster_id: The cluster reference id if any.
        :param pulumi.Input[int] cores_per_cpu: The number of physical cores present on each CPU.
        :param pulumi.Input[str] cpu: A description of the machine CPU.
        :param pulumi.Input[int] cpu_count: The number of CPUs available in the system.
        :param pulumi.Input[int] cpu_frequency_in_ghz: The CPU frequency in GHz.
        :param pulumi.Input[str] description: Server description.
        :param pulumi.Input[bool] force: Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
               
               
               The `cloud_init` block has one field:
        :param pulumi.Input[str] hostname: Server hostname.
        :param pulumi.Input[bool] install_os_to_ram: If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        :param pulumi.Input[str] location: Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] management_access_allowed_ips: Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        :param pulumi.Input[str] management_ui_url: The URL of the management UI which will only be returned in response to provisioning a server.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerNetrisControllerArgs']]]] netris_controllers: Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
        :param pulumi.Input[pulumi.InputType['ServerNetrisSoftgateArgs']] netris_softgate: Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ServerNetworkConfigurationArgs']] network_configuration: Entire network details of bare metal server. Structure is documented below.
        :param pulumi.Input[str] network_type: The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        :param pulumi.Input[str] os: The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        :param pulumi.Input[str] password: Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
        :param pulumi.Input[str] pricing_model: Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ip_addresses: Private IP Addresses assigned to server. Must contain at least 1 item.
        :param pulumi.Input[str] provisioned_on: Date and time when server was provisioned.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ip_addresses: Public IP Addresses assigned to server. Must contain at least 1 item.
        :param pulumi.Input[str] ram: A description of the machine RAM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rdp_allowed_ips: List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        :param pulumi.Input[str] reservation_id: Server reservation ID.
        :param pulumi.Input[str] root_password: Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_key_ids: A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_keys: A list of SSH Keys that will be installed on the server.
        :param pulumi.Input[str] status: The status of the server.
        :param pulumi.Input[str] storage: A description of the machine storage.
        :param pulumi.Input[pulumi.InputType['ServerStorageConfigurationArgs']] storage_configuration: Storage configuration. Structure is documented below.
        :param pulumi.Input[str] superseded_by: Unique identifier of the server to which the reservation has been transferred.
        :param pulumi.Input[str] supersedes: Unique identifier of the server from which the reservation has been transferred.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServerTagArgs']]]] tags: Tags to set to server, if any. Structure is documented below.
        :param pulumi.Input[str] type: Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerState.__new__(_ServerState)

        __props__.__dict__["action"] = action
        __props__.__dict__["cloud_init"] = cloud_init
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cores_per_cpu"] = cores_per_cpu
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["cpu_count"] = cpu_count
        __props__.__dict__["cpu_frequency_in_ghz"] = cpu_frequency_in_ghz
        __props__.__dict__["description"] = description
        __props__.__dict__["force"] = force
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["install_default_ssh_keys"] = install_default_ssh_keys
        __props__.__dict__["install_os_to_ram"] = install_os_to_ram
        __props__.__dict__["location"] = location
        __props__.__dict__["management_access_allowed_ips"] = management_access_allowed_ips
        __props__.__dict__["management_ui_url"] = management_ui_url
        __props__.__dict__["netris_controllers"] = netris_controllers
        __props__.__dict__["netris_softgate"] = netris_softgate
        __props__.__dict__["network_configuration"] = network_configuration
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["os"] = os
        __props__.__dict__["password"] = password
        __props__.__dict__["pricing_model"] = pricing_model
        __props__.__dict__["private_ip_addresses"] = private_ip_addresses
        __props__.__dict__["provisioned_on"] = provisioned_on
        __props__.__dict__["public_ip_addresses"] = public_ip_addresses
        __props__.__dict__["ram"] = ram
        __props__.__dict__["rdp_allowed_ips"] = rdp_allowed_ips
        __props__.__dict__["reservation_id"] = reservation_id
        __props__.__dict__["root_password"] = root_password
        __props__.__dict__["ssh_key_ids"] = ssh_key_ids
        __props__.__dict__["ssh_keys"] = ssh_keys
        __props__.__dict__["status"] = status
        __props__.__dict__["storage"] = storage
        __props__.__dict__["storage_configuration"] = storage_configuration
        __props__.__dict__["superseded_by"] = superseded_by
        __props__.__dict__["supersedes"] = supersedes
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        return Server(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[str]]:
        """
        Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cloudInit")
    def cloud_init(self) -> pulumi.Output['outputs.ServerCloudInit']:
        """
        Cloud-init configuration details. Structure is documented below.
        """
        return pulumi.get(self, "cloud_init")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The cluster reference id if any.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="coresPerCpu")
    def cores_per_cpu(self) -> pulumi.Output[int]:
        """
        The number of physical cores present on each CPU.
        """
        return pulumi.get(self, "cores_per_cpu")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[str]:
        """
        A description of the machine CPU.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> pulumi.Output[int]:
        """
        The number of CPUs available in the system.
        """
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="cpuFrequencyInGhz")
    def cpu_frequency_in_ghz(self) -> pulumi.Output[int]:
        """
        The CPU frequency in GHz.
        """
        return pulumi.get(self, "cpu_frequency_in_ghz")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Server description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[bool]]:
        """
        Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.


        The `cloud_init` block has one field:
        """
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        Server hostname.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="installDefaultSshKeys")
    def install_default_ssh_keys(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "install_default_ssh_keys")

    @property
    @pulumi.getter(name="installOsToRam")
    def install_os_to_ram(self) -> pulumi.Output[bool]:
        """
        If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
        """
        return pulumi.get(self, "install_os_to_ram")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="managementAccessAllowedIps")
    def management_access_allowed_ips(self) -> pulumi.Output[Sequence[str]]:
        """
        Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
        """
        return pulumi.get(self, "management_access_allowed_ips")

    @property
    @pulumi.getter(name="managementUiUrl")
    def management_ui_url(self) -> pulumi.Output[str]:
        """
        The URL of the management UI which will only be returned in response to provisioning a server.
        """
        return pulumi.get(self, "management_ui_url")

    @property
    @pulumi.getter(name="netrisControllers")
    def netris_controllers(self) -> pulumi.Output[Sequence['outputs.ServerNetrisController']]:
        """
        Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
        """
        return pulumi.get(self, "netris_controllers")

    @property
    @pulumi.getter(name="netrisSoftgate")
    def netris_softgate(self) -> pulumi.Output['outputs.ServerNetrisSoftgate']:
        """
        Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
        """
        return pulumi.get(self, "netris_softgate")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Output['outputs.ServerNetworkConfiguration']:
        """
        Entire network details of bare metal server. Structure is documented below.
        """
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[str]:
        """
        The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter
    def os(self) -> pulumi.Output[str]:
        """
        The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="pricingModel")
    def pricing_model(self) -> pulumi.Output[str]:
        """
        Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
        """
        return pulumi.get(self, "pricing_model")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> pulumi.Output[Sequence[str]]:
        """
        Private IP Addresses assigned to server. Must contain at least 1 item.
        """
        return pulumi.get(self, "private_ip_addresses")

    @property
    @pulumi.getter(name="provisionedOn")
    def provisioned_on(self) -> pulumi.Output[str]:
        """
        Date and time when server was provisioned.
        """
        return pulumi.get(self, "provisioned_on")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> pulumi.Output[Sequence[str]]:
        """
        Public IP Addresses assigned to server. Must contain at least 1 item.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def ram(self) -> pulumi.Output[str]:
        """
        A description of the machine RAM.
        """
        return pulumi.get(self, "ram")

    @property
    @pulumi.getter(name="rdpAllowedIps")
    def rdp_allowed_ips(self) -> pulumi.Output[Sequence[str]]:
        """
        List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
        """
        return pulumi.get(self, "rdp_allowed_ips")

    @property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> pulumi.Output[str]:
        """
        Server reservation ID.
        """
        return pulumi.get(self, "reservation_id")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> pulumi.Output[str]:
        """
        Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
        """
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="sshKeyIds")
    def ssh_key_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
        """
        return pulumi.get(self, "ssh_key_ids")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of SSH Keys that will be installed on the server.
        """
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the server.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[str]:
        """
        A description of the machine storage.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageConfiguration")
    def storage_configuration(self) -> pulumi.Output[Optional['outputs.ServerStorageConfiguration']]:
        """
        Storage configuration. Structure is documented below.
        """
        return pulumi.get(self, "storage_configuration")

    @property
    @pulumi.getter(name="supersededBy")
    def superseded_by(self) -> pulumi.Output[str]:
        """
        Unique identifier of the server to which the reservation has been transferred.
        """
        return pulumi.get(self, "superseded_by")

    @property
    @pulumi.getter
    def supersedes(self) -> pulumi.Output[str]:
        """
        Unique identifier of the server from which the reservation has been transferred.
        """
        return pulumi.get(self, "supersedes")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ServerTag']]]:
        """
        Tags to set to server, if any. Structure is documented below.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
        """
        return pulumi.get(self, "type")

