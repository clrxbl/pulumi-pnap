# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TagArgs', 'Tag']

@pulumi.input_type
class TagArgs:
    def __init__(__self__, *,
                 is_billing_tag: pulumi.Input[bool],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Tag resource.
        :param pulumi.Input[bool] is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param pulumi.Input[str] description: The description of the tag.
        :param pulumi.Input[str] name: The unique name of the tag.
        """
        pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> pulumi.Input[bool]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @is_billing_tag.setter
    def is_billing_tag(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_billing_tag", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the tag.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _TagState:
    def __init__(__self__, *,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_billing_tag: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['TagResourceAssignmentArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Tag resources.
        :param pulumi.Input[str] description: The description of the tag.
        :param pulumi.Input[bool] is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param pulumi.Input[str] name: The unique name of the tag.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The optional values of the tag..
        """
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_billing_tag is not None:
            pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_assignments is not None:
            pulumi.set(__self__, "resource_assignments", resource_assignments)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the tag.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @is_billing_tag.setter
    def is_billing_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_billing_tag", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceAssignments")
    def resource_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TagResourceAssignmentArgs']]]]:
        return pulumi.get(self, "resource_assignments")

    @resource_assignments.setter
    def resource_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TagResourceAssignmentArgs']]]]):
        pulumi.set(self, "resource_assignments", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The optional values of the tag..
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


class Tag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_billing_tag: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a phoenixNAP tag resource. This can be used to create, modify, and delete tags.

        ## Example Usage

        Create a tag

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a tag
        tag_1 = pnap.Tag("tag-1", is_billing_tag=False)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the tag.
        :param pulumi.Input[bool] is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param pulumi.Input[str] name: The unique name of the tag.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TagArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a phoenixNAP tag resource. This can be used to create, modify, and delete tags.

        ## Example Usage

        Create a tag

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a tag
        tag_1 = pnap.Tag("tag-1", is_billing_tag=False)
        ```

        :param str resource_name: The name of the resource.
        :param TagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_billing_tag: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TagArgs.__new__(TagArgs)

            __props__.__dict__["description"] = description
            if is_billing_tag is None and not opts.urn:
                raise TypeError("Missing required property 'is_billing_tag'")
            __props__.__dict__["is_billing_tag"] = is_billing_tag
            __props__.__dict__["name"] = name
            __props__.__dict__["created_by"] = None
            __props__.__dict__["resource_assignments"] = None
            __props__.__dict__["values"] = None
        super(Tag, __self__).__init__(
            'pnap:index/tag:Tag',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            is_billing_tag: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resource_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagResourceAssignmentArgs']]]]] = None,
            values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Tag':
        """
        Get an existing Tag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the tag.
        :param pulumi.Input[bool] is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param pulumi.Input[str] name: The unique name of the tag.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The optional values of the tag..
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TagState.__new__(_TagState)

        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["is_billing_tag"] = is_billing_tag
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_assignments"] = resource_assignments
        __props__.__dict__["values"] = values
        return Tag(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the tag.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> pulumi.Output[bool]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The unique name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceAssignments")
    def resource_assignments(self) -> pulumi.Output[Sequence['outputs.TagResourceAssignment']]:
        return pulumi.get(self, "resource_assignments")

    @property
    @pulumi.getter
    def values(self) -> pulumi.Output[Sequence[str]]:
        """
        The optional values of the tag..
        """
        return pulumi.get(self, "values")

