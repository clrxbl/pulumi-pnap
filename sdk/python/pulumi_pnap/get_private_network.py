# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPrivateNetworkResult',
    'AwaitableGetPrivateNetworkResult',
    'get_private_network',
    'get_private_network_output',
]

@pulumi.output_type
class GetPrivateNetworkResult:
    """
    A collection of values returned by getPrivateNetwork.
    """
    def __init__(__self__, cidr=None, created_on=None, description=None, id=None, location=None, location_default=None, memberships=None, name=None, servers=None, status=None, type=None, vlan_id=None):
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if location_default and not isinstance(location_default, bool):
            raise TypeError("Expected argument 'location_default' to be a bool")
        pulumi.set(__self__, "location_default", location_default)
        if memberships and not isinstance(memberships, list):
            raise TypeError("Expected argument 'memberships' to be a list")
        pulumi.set(__self__, "memberships", memberships)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vlan_id and not isinstance(vlan_id, int):
            raise TypeError("Expected argument 'vlan_id' to be a int")
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        IP range associated with this private network in CIDR notation.
        * `vlan_id `- The VLAN of this private network.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        """
        Date and time when this private network was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of this private network.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The server identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of this private network.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="locationDefault")
    def location_default(self) -> bool:
        """
        Identifies network as the default private network for the specified location. Default value is `false`.
        """
        return pulumi.get(self, "location_default")

    @property
    @pulumi.getter
    def memberships(self) -> Sequence['outputs.GetPrivateNetworkMembershipResult']:
        """
        A list of resources that are members of this private network.
        """
        return pulumi.get(self, "memberships")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The friendly name of this private network.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetPrivateNetworkServerResult']:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the private network.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the private network.
        * `servers ` - (Deprecated) List of servers' details linked to the private network.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        return pulumi.get(self, "vlan_id")


class AwaitableGetPrivateNetworkResult(GetPrivateNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateNetworkResult(
            cidr=self.cidr,
            created_on=self.created_on,
            description=self.description,
            id=self.id,
            location=self.location,
            location_default=self.location_default,
            memberships=self.memberships,
            name=self.name,
            servers=self.servers,
            status=self.status,
            type=self.type,
            vlan_id=self.vlan_id)


def get_private_network(id: Optional[str] = None,
                        name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateNetworkResult:
    """
    Provides a phoenixNAP Private Network datasource. This can be used to read private networks.

    ## Example Usage

    Fetch a private network by name and show it's servers

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test__network_44 = pnap.get_private_network(name="qqq")
    pulumi.export("servers", test__network_44.servers)
    ```


    :param str id: The private network identifier.
    :param str name: The friendly name of this private network.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getPrivateNetwork:getPrivateNetwork', __args__, opts=opts, typ=GetPrivateNetworkResult).value

    return AwaitableGetPrivateNetworkResult(
        cidr=pulumi.get(__ret__, 'cidr'),
        created_on=pulumi.get(__ret__, 'created_on'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        location_default=pulumi.get(__ret__, 'location_default'),
        memberships=pulumi.get(__ret__, 'memberships'),
        name=pulumi.get(__ret__, 'name'),
        servers=pulumi.get(__ret__, 'servers'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'),
        vlan_id=pulumi.get(__ret__, 'vlan_id'))


@_utilities.lift_output_func(get_private_network)
def get_private_network_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPrivateNetworkResult]:
    """
    Provides a phoenixNAP Private Network datasource. This can be used to read private networks.

    ## Example Usage

    Fetch a private network by name and show it's servers

    ```python
    import pulumi
    import pulumi_pnap as pnap

    test__network_44 = pnap.get_private_network(name="qqq")
    pulumi.export("servers", test__network_44.servers)
    ```


    :param str id: The private network identifier.
    :param str name: The friendly name of this private network.
    """
    ...
