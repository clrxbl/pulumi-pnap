# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StorageNetworkArgs', 'StorageNetwork']

@pulumi.input_type
class StorageNetworkArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 volumes: pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeArgs']]],
                 client_vlan: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StorageNetwork resource.
        :param pulumi.Input[str] location: The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
        :param pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeArgs']]] volumes: Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
        :param pulumi.Input[int] client_vlan: Custom Client VLAN that the Storage Network will be set to.
        :param pulumi.Input[str] description: Volume description.
        :param pulumi.Input[str] name: The name of the tag.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "volumes", volumes)
        if client_vlan is not None:
            pulumi.set(__self__, "client_vlan", client_vlan)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def volumes(self) -> pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeArgs']]]:
        """
        Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeArgs']]]):
        pulumi.set(self, "volumes", value)

    @property
    @pulumi.getter(name="clientVlan")
    def client_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Custom Client VLAN that the Storage Network will be set to.
        """
        return pulumi.get(self, "client_vlan")

    @client_vlan.setter
    def client_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_vlan", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Volume description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _StorageNetworkState:
    def __init__(__self__, *,
                 client_vlan: Optional[pulumi.Input[int]] = None,
                 created_on: Optional[pulumi.Input[str]] = None,
                 delete_requested_on: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeArgs']]]] = None):
        """
        Input properties used for looking up and filtering StorageNetwork resources.
        :param pulumi.Input[int] client_vlan: Custom Client VLAN that the Storage Network will be set to.
        :param pulumi.Input[str] created_on: Date and time when this volume was created.
        :param pulumi.Input[str] delete_requested_on: Date and time of the initial request for volume deletion.
        :param pulumi.Input[str] description: Volume description.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: IP of the storage network
        :param pulumi.Input[str] location: The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[str] status: Volume's status.
        :param pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeArgs']]] volumes: Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
        """
        if client_vlan is not None:
            pulumi.set(__self__, "client_vlan", client_vlan)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if delete_requested_on is not None:
            pulumi.set(__self__, "delete_requested_on", delete_requested_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="clientVlan")
    def client_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Custom Client VLAN that the Storage Network will be set to.
        """
        return pulumi.get(self, "client_vlan")

    @client_vlan.setter
    def client_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_vlan", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when this volume was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="deleteRequestedOn")
    def delete_requested_on(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time of the initial request for volume deletion.
        """
        return pulumi.get(self, "delete_requested_on")

    @delete_requested_on.setter
    def delete_requested_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_requested_on", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Volume description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IP of the storage network
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Volume's status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeArgs']]]]:
        """
        Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)


class StorageNetwork(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_vlan: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageNetworkVolumeArgs']]]]] = None,
                 __props__=None):
        """
        Provides a phoenixNAP Storage Network resource. This can be used to create, modify and delete storage networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a storage network and volume
        storage__network_1 = pnap.StorageNetwork("storage-Network-1",
            description="First storage network.",
            location="PHX",
            volumes=[pnap.StorageNetworkVolumeArgs(
                volume=pnap.StorageNetworkVolumeVolumeArgs(
                    capacity_in_gb=1000,
                    name="Volume-1",
                    path_suffix="/shared-docs",
                    tags=[
                        pnap.StorageNetworkVolumeVolumeTagArgs(
                            tag_assignment=pnap.StorageNetworkVolumeVolumeTagTagAssignmentArgs(
                                name="tag-1",
                                value="PROD",
                            ),
                        ),
                        pnap.StorageNetworkVolumeVolumeTagArgs(
                            tag_assignment=pnap.StorageNetworkVolumeVolumeTagTagAssignmentArgs(
                                name="tag-2",
                            ),
                        ),
                    ],
                ),
            )])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] client_vlan: Custom Client VLAN that the Storage Network will be set to.
        :param pulumi.Input[str] description: Volume description.
        :param pulumi.Input[str] location: The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageNetworkVolumeArgs']]]] volumes: Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StorageNetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a phoenixNAP Storage Network resource. This can be used to create, modify and delete storage networks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_pnap as pnap

        # Create a storage network and volume
        storage__network_1 = pnap.StorageNetwork("storage-Network-1",
            description="First storage network.",
            location="PHX",
            volumes=[pnap.StorageNetworkVolumeArgs(
                volume=pnap.StorageNetworkVolumeVolumeArgs(
                    capacity_in_gb=1000,
                    name="Volume-1",
                    path_suffix="/shared-docs",
                    tags=[
                        pnap.StorageNetworkVolumeVolumeTagArgs(
                            tag_assignment=pnap.StorageNetworkVolumeVolumeTagTagAssignmentArgs(
                                name="tag-1",
                                value="PROD",
                            ),
                        ),
                        pnap.StorageNetworkVolumeVolumeTagArgs(
                            tag_assignment=pnap.StorageNetworkVolumeVolumeTagTagAssignmentArgs(
                                name="tag-2",
                            ),
                        ),
                    ],
                ),
            )])
        ```

        :param str resource_name: The name of the resource.
        :param StorageNetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StorageNetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_vlan: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageNetworkVolumeArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StorageNetworkArgs.__new__(StorageNetworkArgs)

            __props__.__dict__["client_vlan"] = client_vlan
            __props__.__dict__["description"] = description
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if volumes is None and not opts.urn:
                raise TypeError("Missing required property 'volumes'")
            __props__.__dict__["volumes"] = volumes
            __props__.__dict__["created_on"] = None
            __props__.__dict__["delete_requested_on"] = None
            __props__.__dict__["ips"] = None
            __props__.__dict__["network_id"] = None
            __props__.__dict__["status"] = None
        super(StorageNetwork, __self__).__init__(
            'pnap:index/storageNetwork:StorageNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_vlan: Optional[pulumi.Input[int]] = None,
            created_on: Optional[pulumi.Input[str]] = None,
            delete_requested_on: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageNetworkVolumeArgs']]]]] = None) -> 'StorageNetwork':
        """
        Get an existing StorageNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] client_vlan: Custom Client VLAN that the Storage Network will be set to.
        :param pulumi.Input[str] created_on: Date and time when this volume was created.
        :param pulumi.Input[str] delete_requested_on: Date and time of the initial request for volume deletion.
        :param pulumi.Input[str] description: Volume description.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: IP of the storage network
        :param pulumi.Input[str] location: The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[str] status: Volume's status.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageNetworkVolumeArgs']]]] volumes: Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StorageNetworkState.__new__(_StorageNetworkState)

        __props__.__dict__["client_vlan"] = client_vlan
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["delete_requested_on"] = delete_requested_on
        __props__.__dict__["description"] = description
        __props__.__dict__["ips"] = ips
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["status"] = status
        __props__.__dict__["volumes"] = volumes
        return StorageNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientVlan")
    def client_vlan(self) -> pulumi.Output[Optional[int]]:
        """
        Custom Client VLAN that the Storage Network will be set to.
        """
        return pulumi.get(self, "client_vlan")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[str]:
        """
        Date and time when this volume was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="deleteRequestedOn")
    def delete_requested_on(self) -> pulumi.Output[str]:
        """
        Date and time of the initial request for volume deletion.
        """
        return pulumi.get(self, "delete_requested_on")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Volume description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def ips(self) -> pulumi.Output[Sequence[str]]:
        """
        IP of the storage network
        """
        return pulumi.get(self, "ips")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Volume's status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def volumes(self) -> pulumi.Output[Sequence['outputs.StorageNetworkVolume']]:
        """
        Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
        """
        return pulumi.get(self, "volumes")

