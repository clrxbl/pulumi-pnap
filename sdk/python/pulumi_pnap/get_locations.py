# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetLocationsResult',
    'AwaitableGetLocationsResult',
    'get_locations',
    'get_locations_output',
]

@pulumi.output_type
class GetLocationsResult:
    """
    A collection of values returned by getLocations.
    """
    def __init__(__self__, id=None, location=None, locations=None, product_category=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if product_category and not isinstance(product_category, str):
            raise TypeError("Expected argument 'product_category' to be a str")
        pulumi.set(__self__, "product_category", product_category)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The location code.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetLocationsLocationResult']:
        """
        The list of locations found.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        """
        The product category.
        """
        return pulumi.get(self, "product_category")


class AwaitableGetLocationsResult(GetLocationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLocationsResult(
            id=self.id,
            location=self.location,
            locations=self.locations,
            product_category=self.product_category)


def get_locations(location: Optional[str] = None,
                  product_category: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLocationsResult:
    """
    Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.

    ## Example Usage

    Fetch locations by product category and show their details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    query__c = pnap.get_locations(product_category="BANDWIDTH")
    pulumi.export("locations", query__c.locations)
    ```


    :param str location: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
    :param str product_category: The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['productCategory'] = product_category
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getLocations:getLocations', __args__, opts=opts, typ=GetLocationsResult).value

    return AwaitableGetLocationsResult(
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        locations=pulumi.get(__ret__, 'locations'),
        product_category=pulumi.get(__ret__, 'product_category'))


@_utilities.lift_output_func(get_locations)
def get_locations_output(location: Optional[pulumi.Input[Optional[str]]] = None,
                         product_category: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLocationsResult]:
    """
    Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.

    ## Example Usage

    Fetch locations by product category and show their details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    query__c = pnap.get_locations(product_category="BANDWIDTH")
    pulumi.export("locations", query__c.locations)
    ```


    :param str location: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
    :param str product_category: The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.
    """
    ...
