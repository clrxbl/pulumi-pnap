# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetProductsResult',
    'AwaitableGetProductsResult',
    'get_products',
    'get_products_output',
]

@pulumi.output_type
class GetProductsResult:
    """
    A collection of values returned by getProducts.
    """
    def __init__(__self__, id=None, location=None, product_category=None, product_code=None, products=None, sku_code=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if product_category and not isinstance(product_category, str):
            raise TypeError("Expected argument 'product_category' to be a str")
        pulumi.set(__self__, "product_category", product_category)
        if product_code and not isinstance(product_code, str):
            raise TypeError("Expected argument 'product_code' to be a str")
        pulumi.set(__self__, "product_code", product_code)
        if products and not isinstance(products, list):
            raise TypeError("Expected argument 'products' to be a list")
        pulumi.set(__self__, "products", products)
        if sku_code and not isinstance(sku_code, str):
            raise TypeError("Expected argument 'sku_code' to be a str")
        pulumi.set(__self__, "sku_code", sku_code)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The code identifying the location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="productCategory")
    def product_category(self) -> Optional[str]:
        """
        The product category.
        """
        return pulumi.get(self, "product_category")

    @property
    @pulumi.getter(name="productCode")
    def product_code(self) -> Optional[str]:
        """
        The code identifying the product.
        """
        return pulumi.get(self, "product_code")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetProductsProductResult']:
        """
        The list of products recorded.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="skuCode")
    def sku_code(self) -> Optional[str]:
        return pulumi.get(self, "sku_code")


class AwaitableGetProductsResult(GetProductsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProductsResult(
            id=self.id,
            location=self.location,
            product_category=self.product_category,
            product_code=self.product_code,
            products=self.products,
            sku_code=self.sku_code)


def get_products(location: Optional[str] = None,
                 product_category: Optional[str] = None,
                 product_code: Optional[str] = None,
                 sku_code: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProductsResult:
    """
    Provides a phoenixNAP products datasource. This can be used to read products.

    ## Example Usage

    Fetch products by product category and show their details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    query__b = pnap.get_products(product_category="BANDWIDTH")
    pulumi.export("products", query__b.products)
    ```


    :param str location: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
    :param str product_category: The product category.
    :param str product_code: The code identifying the product. This code has significance across all locations.
    :param str sku_code: The SKU identifier.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['productCategory'] = product_category
    __args__['productCode'] = product_code
    __args__['skuCode'] = sku_code
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getProducts:getProducts', __args__, opts=opts, typ=GetProductsResult).value

    return AwaitableGetProductsResult(
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        product_category=pulumi.get(__ret__, 'product_category'),
        product_code=pulumi.get(__ret__, 'product_code'),
        products=pulumi.get(__ret__, 'products'),
        sku_code=pulumi.get(__ret__, 'sku_code'))


@_utilities.lift_output_func(get_products)
def get_products_output(location: Optional[pulumi.Input[Optional[str]]] = None,
                        product_category: Optional[pulumi.Input[Optional[str]]] = None,
                        product_code: Optional[pulumi.Input[Optional[str]]] = None,
                        sku_code: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProductsResult]:
    """
    Provides a phoenixNAP products datasource. This can be used to read products.

    ## Example Usage

    Fetch products by product category and show their details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    query__b = pnap.get_products(product_category="BANDWIDTH")
    pulumi.export("products", query__b.products)
    ```


    :param str location: The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
    :param str product_category: The product category.
    :param str product_code: The code identifying the product. This code has significance across all locations.
    :param str sku_code: The SKU identifier.
    """
    ...
