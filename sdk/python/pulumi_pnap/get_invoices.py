# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetInvoicesResult',
    'AwaitableGetInvoicesResult',
    'get_invoices',
    'get_invoices_output',
]

@pulumi.output_type
class GetInvoicesResult:
    """
    A collection of values returned by getInvoices.
    """
    def __init__(__self__, id=None, limit=None, number=None, offset=None, paginated_invoices=None, sent_on_from=None, sent_on_to=None, sort_direction=None, sort_field=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if number and not isinstance(number, str):
            raise TypeError("Expected argument 'number' to be a str")
        pulumi.set(__self__, "number", number)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if paginated_invoices and not isinstance(paginated_invoices, list):
            raise TypeError("Expected argument 'paginated_invoices' to be a list")
        pulumi.set(__self__, "paginated_invoices", paginated_invoices)
        if sent_on_from and not isinstance(sent_on_from, str):
            raise TypeError("Expected argument 'sent_on_from' to be a str")
        pulumi.set(__self__, "sent_on_from", sent_on_from)
        if sent_on_to and not isinstance(sent_on_to, str):
            raise TypeError("Expected argument 'sent_on_to' to be a str")
        pulumi.set(__self__, "sent_on_to", sent_on_to)
        if sort_direction and not isinstance(sort_direction, str):
            raise TypeError("Expected argument 'sort_direction' to be a str")
        pulumi.set(__self__, "sort_direction", sort_direction)
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        pulumi.set(__self__, "sort_field", sort_field)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Maximum number of items in the page (actual returned length can be less).
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def number(self) -> Optional[str]:
        """
        A user-friendly reference number assigned to the invoice.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        The number of returned items skipped.
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="paginatedInvoices")
    def paginated_invoices(self) -> Sequence['outputs.GetInvoicesPaginatedInvoiceResult']:
        """
        The paginated list of invoices.
        """
        return pulumi.get(self, "paginated_invoices")

    @property
    @pulumi.getter(name="sentOnFrom")
    def sent_on_from(self) -> Optional[str]:
        return pulumi.get(self, "sent_on_from")

    @property
    @pulumi.getter(name="sentOnTo")
    def sent_on_to(self) -> Optional[str]:
        return pulumi.get(self, "sent_on_to")

    @property
    @pulumi.getter(name="sortDirection")
    def sort_direction(self) -> Optional[str]:
        return pulumi.get(self, "sort_direction")

    @property
    @pulumi.getter(name="sortField")
    def sort_field(self) -> Optional[str]:
        return pulumi.get(self, "sort_field")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the invoice.
        """
        return pulumi.get(self, "status")


class AwaitableGetInvoicesResult(GetInvoicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInvoicesResult(
            id=self.id,
            limit=self.limit,
            number=self.number,
            offset=self.offset,
            paginated_invoices=self.paginated_invoices,
            sent_on_from=self.sent_on_from,
            sent_on_to=self.sent_on_to,
            sort_direction=self.sort_direction,
            sort_field=self.sort_field,
            status=self.status)


def get_invoices(limit: Optional[int] = None,
                 number: Optional[str] = None,
                 offset: Optional[int] = None,
                 sent_on_from: Optional[str] = None,
                 sent_on_to: Optional[str] = None,
                 sort_direction: Optional[str] = None,
                 sort_field: Optional[str] = None,
                 status: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInvoicesResult:
    """
    Provides a phoenixNAP invoices datasource. This can be used to read invoices.

    ## Example Usage

    Fetch invoices by status and date sent and show their details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    query__c = pnap.get_invoices(status="PAID",
        sent_on_from="2020-04-13T00:00:00.000Z",
        sent_on_to="2022-04-13T00:00:00.000Z")
    pulumi.export("invoices", query__c.paginated_invoices)
    ```


    :param int limit: The limit of the number of results returned. The number of records returned may be smaller than the limit.
    :param str number: A user-friendly reference number assigned to the invoice.
    :param int offset: The number of items to skip in the results.
    :param str sent_on_from: Minimum value to filter invoices by sent on date.
    :param str sent_on_to: Maximum value to filter invoices by sent on date.
    :param str sort_direction: Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
    :param str sort_field: If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
    :param str status: Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
    """
    __args__ = dict()
    __args__['limit'] = limit
    __args__['number'] = number
    __args__['offset'] = offset
    __args__['sentOnFrom'] = sent_on_from
    __args__['sentOnTo'] = sent_on_to
    __args__['sortDirection'] = sort_direction
    __args__['sortField'] = sort_field
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pnap:index/getInvoices:getInvoices', __args__, opts=opts, typ=GetInvoicesResult).value

    return AwaitableGetInvoicesResult(
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        number=pulumi.get(__ret__, 'number'),
        offset=pulumi.get(__ret__, 'offset'),
        paginated_invoices=pulumi.get(__ret__, 'paginated_invoices'),
        sent_on_from=pulumi.get(__ret__, 'sent_on_from'),
        sent_on_to=pulumi.get(__ret__, 'sent_on_to'),
        sort_direction=pulumi.get(__ret__, 'sort_direction'),
        sort_field=pulumi.get(__ret__, 'sort_field'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_invoices)
def get_invoices_output(limit: Optional[pulumi.Input[Optional[int]]] = None,
                        number: Optional[pulumi.Input[Optional[str]]] = None,
                        offset: Optional[pulumi.Input[Optional[int]]] = None,
                        sent_on_from: Optional[pulumi.Input[Optional[str]]] = None,
                        sent_on_to: Optional[pulumi.Input[Optional[str]]] = None,
                        sort_direction: Optional[pulumi.Input[Optional[str]]] = None,
                        sort_field: Optional[pulumi.Input[Optional[str]]] = None,
                        status: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInvoicesResult]:
    """
    Provides a phoenixNAP invoices datasource. This can be used to read invoices.

    ## Example Usage

    Fetch invoices by status and date sent and show their details.

    ```python
    import pulumi
    import pulumi_pnap as pnap

    query__c = pnap.get_invoices(status="PAID",
        sent_on_from="2020-04-13T00:00:00.000Z",
        sent_on_to="2022-04-13T00:00:00.000Z")
    pulumi.export("invoices", query__c.paginated_invoices)
    ```


    :param int limit: The limit of the number of results returned. The number of records returned may be smaller than the limit.
    :param str number: A user-friendly reference number assigned to the invoice.
    :param int offset: The number of items to skip in the results.
    :param str sent_on_from: Minimum value to filter invoices by sent on date.
    :param str sent_on_to: Maximum value to filter invoices by sent on date.
    :param str sort_direction: Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
    :param str sort_field: If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
    :param str status: Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
    """
    ...
