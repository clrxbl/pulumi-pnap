# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'IpBlockTagArgs',
    'IpBlockTagTagAssignmentArgs',
    'PrivateNetworkMembershipArgs',
    'PrivateNetworkServerArgs',
    'PublicNetworkIpBlockArgs',
    'PublicNetworkIpBlockPublicNetworkIpBlockArgs',
    'PublicNetworkMembershipArgs',
    'RancherClusterConfigurationArgs',
    'RancherClusterConfigurationCertificatesArgs',
    'RancherClusterMetadataArgs',
    'RancherClusterNodePoolsArgs',
    'RancherClusterNodePoolsNodeArgs',
    'RancherClusterNodePoolsSshConfigArgs',
    'RancherClusterWorkloadConfigurationArgs',
    'ServerCloudInitArgs',
    'ServerNetrisControllerArgs',
    'ServerNetrisSoftgateArgs',
    'ServerNetworkConfigurationArgs',
    'ServerNetworkConfigurationIpBlocksConfigurationArgs',
    'ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs',
    'ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlockArgs',
    'ServerNetworkConfigurationPrivateNetworkConfigurationArgs',
    'ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs',
    'ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs',
    'ServerNetworkConfigurationPublicNetworkConfigurationArgs',
    'ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkArgs',
    'ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetworkArgs',
    'ServerStorageConfigurationArgs',
    'ServerStorageConfigurationRootPartitionArgs',
    'ServerTagArgs',
    'ServerTagTagAssignmentArgs',
    'StorageNetworkVolumeArgs',
    'StorageNetworkVolumeVolumeArgs',
    'StorageNetworkVolumeVolumePermissionArgs',
    'StorageNetworkVolumeVolumePermissionNfArgs',
    'StorageNetworkVolumeVolumeTagArgs',
    'StorageNetworkVolumeVolumeTagTagAssignmentArgs',
    'TagResourceAssignmentArgs',
    'GetEventsEventArgs',
    'GetEventsEventUserInfoArgs',
]

@pulumi.input_type
class IpBlockTagArgs:
    def __init__(__self__, *,
                 tag_assignment: Optional[pulumi.Input['IpBlockTagTagAssignmentArgs']] = None):
        """
        :param pulumi.Input['IpBlockTagTagAssignmentArgs'] tag_assignment: Tag request to assign to the IP Block.
        """
        if tag_assignment is not None:
            pulumi.set(__self__, "tag_assignment", tag_assignment)

    @property
    @pulumi.getter(name="tagAssignment")
    def tag_assignment(self) -> Optional[pulumi.Input['IpBlockTagTagAssignmentArgs']]:
        """
        Tag request to assign to the IP Block.
        """
        return pulumi.get(self, "tag_assignment")

    @tag_assignment.setter
    def tag_assignment(self, value: Optional[pulumi.Input['IpBlockTagTagAssignmentArgs']]):
        pulumi.set(self, "tag_assignment", value)


@pulumi.input_type
class IpBlockTagTagAssignmentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 created_by: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_billing_tag: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[str] created_by: Who the tag was created by.
        :param pulumi.Input[str] id: The unique id of the tag.
        :param pulumi.Input[bool] is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param pulumi.Input[str] value: The value of the tag assigned to the IP Block.
        """
        pulumi.set(__self__, "name", name)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_billing_tag is not None:
            pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @is_billing_tag.setter
    def is_billing_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_billing_tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the tag assigned to the IP Block.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PrivateNetworkMembershipArgs:
    def __init__(__self__, *,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: List of public IPs associated to the resource.
        :param pulumi.Input[str] resource_id: The resource identifier.
        :param pulumi.Input[str] resource_type: The resource's type.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource identifier.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource's type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class PrivateNetworkServerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The server identifier.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: List of public IPs associated to the resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The server identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)


@pulumi.input_type
class PublicNetworkIpBlockArgs:
    def __init__(__self__, *,
                 public_network_ip_block: Optional[pulumi.Input['PublicNetworkIpBlockPublicNetworkIpBlockArgs']] = None):
        """
        :param pulumi.Input['PublicNetworkIpBlockPublicNetworkIpBlockArgs'] public_network_ip_block: The assigned IP Block to the public network.
        """
        if public_network_ip_block is not None:
            pulumi.set(__self__, "public_network_ip_block", public_network_ip_block)

    @property
    @pulumi.getter(name="publicNetworkIpBlock")
    def public_network_ip_block(self) -> Optional[pulumi.Input['PublicNetworkIpBlockPublicNetworkIpBlockArgs']]:
        """
        The assigned IP Block to the public network.
        """
        return pulumi.get(self, "public_network_ip_block")

    @public_network_ip_block.setter
    def public_network_ip_block(self, value: Optional[pulumi.Input['PublicNetworkIpBlockPublicNetworkIpBlockArgs']]):
        pulumi.set(self, "public_network_ip_block", value)


@pulumi.input_type
class PublicNetworkIpBlockPublicNetworkIpBlockArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: The IP Block identifier.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The IP Block identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class PublicNetworkMembershipArgs:
    def __init__(__self__, *,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: List of public IPs associated to the resource.
        :param pulumi.Input[str] resource_id: The resource identifier.
        :param pulumi.Input[str] resource_type: The resource's type.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of public IPs associated to the resource.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource identifier.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The resource's type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class RancherClusterConfigurationArgs:
    def __init__(__self__, *,
                 certificates: Optional[pulumi.Input['RancherClusterConfigurationCertificatesArgs']] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 etcd_snapshot_retention: Optional[pulumi.Input[int]] = None,
                 etcd_snapshot_schedule_cron: Optional[pulumi.Input[str]] = None,
                 node_taint: Optional[pulumi.Input[str]] = None,
                 tls_san: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['RancherClusterConfigurationCertificatesArgs'] certificates: Define the custom SSL certificates to be used instead of defaults. The `certificates` block has 3 fields.
        :param pulumi.Input[str] cluster_domain: This maps to rancher's cluster-domain. Cluster Domain.
        :param pulumi.Input[int] etcd_snapshot_retention: This maps to rancher's etcd-snapshot-retention. Number of snapshots to retain. Default value is 5.
        :param pulumi.Input[str] etcd_snapshot_schedule_cron: This maps to rancher's etcd-snapshot-schedule-cron. Snapshot interval time in cron spec.
        :param pulumi.Input[str] node_taint: This maps to rancher's node-taint. Registering kubelet with set of taints.
        :param pulumi.Input[str] tls_san: This maps to rancher's tls-san. Add additional hostname or IP as a Subject Alternative Name in the TLS cert.
        :param pulumi.Input[str] token: Shared secret used to join a server or agent to a cluster.
        """
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if etcd_snapshot_retention is not None:
            pulumi.set(__self__, "etcd_snapshot_retention", etcd_snapshot_retention)
        if etcd_snapshot_schedule_cron is not None:
            pulumi.set(__self__, "etcd_snapshot_schedule_cron", etcd_snapshot_schedule_cron)
        if node_taint is not None:
            pulumi.set(__self__, "node_taint", node_taint)
        if tls_san is not None:
            pulumi.set(__self__, "tls_san", tls_san)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input['RancherClusterConfigurationCertificatesArgs']]:
        """
        Define the custom SSL certificates to be used instead of defaults. The `certificates` block has 3 fields.
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input['RancherClusterConfigurationCertificatesArgs']]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        """
        This maps to rancher's cluster-domain. Cluster Domain.
        """
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="etcdSnapshotRetention")
    def etcd_snapshot_retention(self) -> Optional[pulumi.Input[int]]:
        """
        This maps to rancher's etcd-snapshot-retention. Number of snapshots to retain. Default value is 5.
        """
        return pulumi.get(self, "etcd_snapshot_retention")

    @etcd_snapshot_retention.setter
    def etcd_snapshot_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "etcd_snapshot_retention", value)

    @property
    @pulumi.getter(name="etcdSnapshotScheduleCron")
    def etcd_snapshot_schedule_cron(self) -> Optional[pulumi.Input[str]]:
        """
        This maps to rancher's etcd-snapshot-schedule-cron. Snapshot interval time in cron spec.
        """
        return pulumi.get(self, "etcd_snapshot_schedule_cron")

    @etcd_snapshot_schedule_cron.setter
    def etcd_snapshot_schedule_cron(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etcd_snapshot_schedule_cron", value)

    @property
    @pulumi.getter(name="nodeTaint")
    def node_taint(self) -> Optional[pulumi.Input[str]]:
        """
        This maps to rancher's node-taint. Registering kubelet with set of taints.
        """
        return pulumi.get(self, "node_taint")

    @node_taint.setter
    def node_taint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_taint", value)

    @property
    @pulumi.getter(name="tlsSan")
    def tls_san(self) -> Optional[pulumi.Input[str]]:
        """
        This maps to rancher's tls-san. Add additional hostname or IP as a Subject Alternative Name in the TLS cert.
        """
        return pulumi.get(self, "tls_san")

    @tls_san.setter
    def tls_san(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_san", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Shared secret used to join a server or agent to a cluster.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class RancherClusterConfigurationCertificatesArgs:
    def __init__(__self__, *,
                 ca_certificate: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 certificate_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_certificate: The SSL CA certificate to be used for rancher admin.
        :param pulumi.Input[str] certificate: The SSL certificate to be used for rancher admin.
        :param pulumi.Input[str] certificate_key: The SSL certificate key to be used for rancher admin.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if certificate_key is not None:
            pulumi.set(__self__, "certificate_key", certificate_key)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The SSL CA certificate to be used for rancher admin.
        """
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The SSL certificate to be used for rancher admin.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="certificateKey")
    def certificate_key(self) -> Optional[pulumi.Input[str]]:
        """
        The SSL certificate key to be used for rancher admin.
        """
        return pulumi.get(self, "certificate_key")

    @certificate_key.setter
    def certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_key", value)


@pulumi.input_type
class RancherClusterMetadataArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: This is the password to be used to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
        :param pulumi.Input[str] url: The Rancher Server URL.
        :param pulumi.Input[str] username: The username to use to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        This is the password to be used to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The Rancher Server URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username to use to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class RancherClusterNodePoolsArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['RancherClusterNodePoolsNodeArgs']]]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 ssh_config: Optional[pulumi.Input['RancherClusterNodePoolsSshConfigArgs']] = None):
        """
        :param pulumi.Input[str] name: The name of the workload cluster. This field is autogenerated if not provided.
        :param pulumi.Input[int] node_count: Number of configured nodes. Currently only node counts of 1 and 3 are possible.
        :param pulumi.Input[Sequence[pulumi.Input['RancherClusterNodePoolsNodeArgs']]] nodes: The nodes associated with this node pool.
        :param pulumi.Input[str] server_type: Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param pulumi.Input['RancherClusterNodePoolsSshConfigArgs'] ssh_config: Configuration defining which public SSH keys are pre-installed as authorized on the server. The `ssh_config` block has 3 fields.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if ssh_config is not None:
            pulumi.set(__self__, "ssh_config", ssh_config)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workload cluster. This field is autogenerated if not provided.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of configured nodes. Currently only node counts of 1 and 3 are possible.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RancherClusterNodePoolsNodeArgs']]]]:
        """
        The nodes associated with this node pool.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RancherClusterNodePoolsNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="sshConfig")
    def ssh_config(self) -> Optional[pulumi.Input['RancherClusterNodePoolsSshConfigArgs']]:
        """
        Configuration defining which public SSH keys are pre-installed as authorized on the server. The `ssh_config` block has 3 fields.
        """
        return pulumi.get(self, "ssh_config")

    @ssh_config.setter
    def ssh_config(self, value: Optional[pulumi.Input['RancherClusterNodePoolsSshConfigArgs']]):
        pulumi.set(self, "ssh_config", value)


@pulumi.input_type
class RancherClusterNodePoolsNodeArgs:
    def __init__(__self__, *,
                 server_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] server_id: The server identifier.
        """
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[str]]:
        """
        The server identifier.
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_id", value)


@pulumi.input_type
class RancherClusterNodePoolsSshConfigArgs:
    def __init__(__self__, *,
                 install_default_keys: Optional[pulumi.Input[bool]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] install_default_keys: Define whether public keys marked as default should be installed on this node. Default value is true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_ids: List of public SSH key identifiers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] keys: List of public SSH keys.
        """
        if install_default_keys is not None:
            pulumi.set(__self__, "install_default_keys", install_default_keys)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter(name="installDefaultKeys")
    def install_default_keys(self) -> Optional[pulumi.Input[bool]]:
        """
        Define whether public keys marked as default should be installed on this node. Default value is true.
        """
        return pulumi.get(self, "install_default_keys")

    @install_default_keys.setter
    def install_default_keys(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "install_default_keys", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of public SSH key identifiers.
        """
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of public SSH keys.
        """
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)


@pulumi.input_type
class RancherClusterWorkloadConfigurationArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 server_type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 server_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] location: Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param pulumi.Input[str] server_type: Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        :param pulumi.Input[str] name: The name of the workload cluster. This field is autogenerated if not provided.
        :param pulumi.Input[int] server_count: Number of configured servers. Currently only server counts of 1 and 3 are possible. Default value is 1.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "server_type", server_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_count is not None:
            pulumi.set(__self__, "server_count", server_count)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> pulumi.Input[str]:
        """
        Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workload cluster. This field is autogenerated if not provided.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of configured servers. Currently only server counts of 1 and 3 are possible. Default value is 1.
        """
        return pulumi.get(self, "server_count")

    @server_count.setter
    def server_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_count", value)


@pulumi.input_type
class ServerCloudInitArgs:
    def __init__(__self__, *,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] user_data: User data for the [cloud-init](https://cloudinit.readthedocs.io/en/latest/) configuration in base64 encoding. NoCloud format is supported. Follow the [instructions](https://phoenixnap.com/kb/bmc-cloud-init) on how to provision a server using cloud-init. Only ubuntu/bionic and ubuntu/focal and ubuntu/jammy are supported.
               
               
               The `netris_softgate` block has three fields:
        """
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        User data for the [cloud-init](https://cloudinit.readthedocs.io/en/latest/) configuration in base64 encoding. NoCloud format is supported. Follow the [instructions](https://phoenixnap.com/kb/bmc-cloud-init) on how to provision a server using cloud-init. Only ubuntu/bionic and ubuntu/focal and ubuntu/jammy are supported.


        The `netris_softgate` block has three fields:
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class ServerNetrisControllerArgs:
    def __init__(__self__, *,
                 host_os: Optional[pulumi.Input[str]] = None,
                 netris_user_password: Optional[pulumi.Input[str]] = None,
                 netris_web_console_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host_os: Host OS on which the Netris Softgate is installed.
        :param pulumi.Input[str] netris_user_password: Auto-generated password set for user 'netris' in the web console.
        :param pulumi.Input[str] netris_web_console_url: The URL for the Netris Controller web console.
        """
        if host_os is not None:
            pulumi.set(__self__, "host_os", host_os)
        if netris_user_password is not None:
            pulumi.set(__self__, "netris_user_password", netris_user_password)
        if netris_web_console_url is not None:
            pulumi.set(__self__, "netris_web_console_url", netris_web_console_url)

    @property
    @pulumi.getter(name="hostOs")
    def host_os(self) -> Optional[pulumi.Input[str]]:
        """
        Host OS on which the Netris Softgate is installed.
        """
        return pulumi.get(self, "host_os")

    @host_os.setter
    def host_os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_os", value)

    @property
    @pulumi.getter(name="netrisUserPassword")
    def netris_user_password(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-generated password set for user 'netris' in the web console.
        """
        return pulumi.get(self, "netris_user_password")

    @netris_user_password.setter
    def netris_user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netris_user_password", value)

    @property
    @pulumi.getter(name="netrisWebConsoleUrl")
    def netris_web_console_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL for the Netris Controller web console.
        """
        return pulumi.get(self, "netris_web_console_url")

    @netris_web_console_url.setter
    def netris_web_console_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netris_web_console_url", value)


@pulumi.input_type
class ServerNetrisSoftgateArgs:
    def __init__(__self__, *,
                 controller_address: Optional[pulumi.Input[str]] = None,
                 controller_auth_key: Optional[pulumi.Input[str]] = None,
                 controller_version: Optional[pulumi.Input[str]] = None,
                 host_os: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] controller_address: IP address or hostname through which to reach the Netris Controller.
        :param pulumi.Input[str] controller_auth_key: The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.
               
               
               The `tags` block has field `tag_assignment`.
               The `tag_assignment` block has 2 fields:
        :param pulumi.Input[str] controller_version: The version of the Netris Controller to connect to.
        :param pulumi.Input[str] host_os: Host OS on which the Netris Softgate is installed.
        """
        if controller_address is not None:
            pulumi.set(__self__, "controller_address", controller_address)
        if controller_auth_key is not None:
            pulumi.set(__self__, "controller_auth_key", controller_auth_key)
        if controller_version is not None:
            pulumi.set(__self__, "controller_version", controller_version)
        if host_os is not None:
            pulumi.set(__self__, "host_os", host_os)

    @property
    @pulumi.getter(name="controllerAddress")
    def controller_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or hostname through which to reach the Netris Controller.
        """
        return pulumi.get(self, "controller_address")

    @controller_address.setter
    def controller_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_address", value)

    @property
    @pulumi.getter(name="controllerAuthKey")
    def controller_auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.


        The `tags` block has field `tag_assignment`.
        The `tag_assignment` block has 2 fields:
        """
        return pulumi.get(self, "controller_auth_key")

    @controller_auth_key.setter
    def controller_auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_auth_key", value)

    @property
    @pulumi.getter(name="controllerVersion")
    def controller_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the Netris Controller to connect to.
        """
        return pulumi.get(self, "controller_version")

    @controller_version.setter
    def controller_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_version", value)

    @property
    @pulumi.getter(name="hostOs")
    def host_os(self) -> Optional[pulumi.Input[str]]:
        """
        Host OS on which the Netris Softgate is installed.
        """
        return pulumi.get(self, "host_os")

    @host_os.setter
    def host_os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_os", value)


@pulumi.input_type
class ServerNetworkConfigurationArgs:
    def __init__(__self__, *,
                 gateway_address: Optional[pulumi.Input[str]] = None,
                 ip_blocks_configuration: Optional[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationArgs']] = None,
                 private_network_configuration: Optional[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationArgs']] = None,
                 public_network_configuration: Optional[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationArgs']] = None):
        """
        :param pulumi.Input[str] gateway_address: The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
        """
        if gateway_address is not None:
            pulumi.set(__self__, "gateway_address", gateway_address)
        if ip_blocks_configuration is not None:
            pulumi.set(__self__, "ip_blocks_configuration", ip_blocks_configuration)
        if private_network_configuration is not None:
            pulumi.set(__self__, "private_network_configuration", private_network_configuration)
        if public_network_configuration is not None:
            pulumi.set(__self__, "public_network_configuration", public_network_configuration)

    @property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> Optional[pulumi.Input[str]]:
        """
        The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
        """
        return pulumi.get(self, "gateway_address")

    @gateway_address.setter
    def gateway_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_address", value)

    @property
    @pulumi.getter(name="ipBlocksConfiguration")
    def ip_blocks_configuration(self) -> Optional[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationArgs']]:
        return pulumi.get(self, "ip_blocks_configuration")

    @ip_blocks_configuration.setter
    def ip_blocks_configuration(self, value: Optional[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationArgs']]):
        pulumi.set(self, "ip_blocks_configuration", value)

    @property
    @pulumi.getter(name="privateNetworkConfiguration")
    def private_network_configuration(self) -> Optional[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationArgs']]:
        return pulumi.get(self, "private_network_configuration")

    @private_network_configuration.setter
    def private_network_configuration(self, value: Optional[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationArgs']]):
        pulumi.set(self, "private_network_configuration", value)

    @property
    @pulumi.getter(name="publicNetworkConfiguration")
    def public_network_configuration(self) -> Optional[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationArgs']]:
        return pulumi.get(self, "public_network_configuration")

    @public_network_configuration.setter
    def public_network_configuration(self, value: Optional[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationArgs']]):
        pulumi.set(self, "public_network_configuration", value)


@pulumi.input_type
class ServerNetworkConfigurationIpBlocksConfigurationArgs:
    def __init__(__self__, *,
                 configuration_type: Optional[pulumi.Input[str]] = None,
                 ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs']]]] = None):
        """
        :param pulumi.Input[str] configuration_type: Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs']]] ip_blocks: Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
               
               The `ip_blocks` block has field `server_ip_block`.
               The `server_ip_block` block has 2 fields:
        """
        if configuration_type is not None:
            pulumi.set(__self__, "configuration_type", configuration_type)
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
        """
        return pulumi.get(self, "configuration_type")

    @configuration_type.setter
    def configuration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_type", value)

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs']]]]:
        """
        Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.

        The `ip_blocks` block has field `server_ip_block`.
        The `server_ip_block` block has 2 fields:
        """
        return pulumi.get(self, "ip_blocks")

    @ip_blocks.setter
    def ip_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs']]]]):
        pulumi.set(self, "ip_blocks", value)


@pulumi.input_type
class ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs:
    def __init__(__self__, *,
                 server_ip_block: Optional[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlockArgs']] = None):
        if server_ip_block is not None:
            pulumi.set(__self__, "server_ip_block", server_ip_block)

    @property
    @pulumi.getter(name="serverIpBlock")
    def server_ip_block(self) -> Optional[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlockArgs']]:
        return pulumi.get(self, "server_ip_block")

    @server_ip_block.setter
    def server_ip_block(self, value: Optional[pulumi.Input['ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlockArgs']]):
        pulumi.set(self, "server_ip_block", value)


@pulumi.input_type
class ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlockArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The network identifier.
        :param pulumi.Input[int] vlan_id: The VLAN on which this IP block has been configured within the network switch.
               
               The `public_network_configuration` is the fourth field of the `network_configuration` block.
               The `public_network_configuration` block has field `public_networks`:
               
               The `public_networks` block has field `server_public_network`.
               The `server_public_network` block has 2 fields:
        """
        pulumi.set(__self__, "id", id)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        The VLAN on which this IP block has been configured within the network switch.

        The `public_network_configuration` is the fourth field of the `network_configuration` block.
        The `public_network_configuration` block has field `public_networks`:

        The `public_networks` block has field `server_public_network`.
        The `server_public_network` block has 2 fields:
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class ServerNetworkConfigurationPrivateNetworkConfigurationArgs:
    def __init__(__self__, *,
                 configuration_type: Optional[pulumi.Input[str]] = None,
                 gateway_address: Optional[pulumi.Input[str]] = None,
                 private_networks: Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs']]]] = None):
        """
        :param pulumi.Input[str] configuration_type: Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
        :param pulumi.Input[str] gateway_address: The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
        :param pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs']]] private_networks: The list of private networks this server is member of. When this field is part of request body, it'll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
               
               The `private_networks` block has field `server_private_network`.
               The `server_private_network` block has 3 fields:
        """
        if configuration_type is not None:
            pulumi.set(__self__, "configuration_type", configuration_type)
        if gateway_address is not None:
            pulumi.set(__self__, "gateway_address", gateway_address)
        if private_networks is not None:
            pulumi.set(__self__, "private_networks", private_networks)

    @property
    @pulumi.getter(name="configurationType")
    def configuration_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
        """
        return pulumi.get(self, "configuration_type")

    @configuration_type.setter
    def configuration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_type", value)

    @property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> Optional[pulumi.Input[str]]:
        """
        The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
        """
        return pulumi.get(self, "gateway_address")

    @gateway_address.setter
    def gateway_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_address", value)

    @property
    @pulumi.getter(name="privateNetworks")
    def private_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs']]]]:
        """
        The list of private networks this server is member of. When this field is part of request body, it'll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.

        The `private_networks` block has field `server_private_network`.
        The `server_private_network` block has 3 fields:
        """
        return pulumi.get(self, "private_networks")

    @private_networks.setter
    def private_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs']]]]):
        pulumi.set(self, "private_networks", value)


@pulumi.input_type
class ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs:
    def __init__(__self__, *,
                 server_private_network: Optional[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs']] = None):
        if server_private_network is not None:
            pulumi.set(__self__, "server_private_network", server_private_network)

    @property
    @pulumi.getter(name="serverPrivateNetwork")
    def server_private_network(self) -> Optional[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs']]:
        return pulumi.get(self, "server_private_network")

    @server_private_network.setter
    def server_private_network(self, value: Optional[pulumi.Input['ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs']]):
        pulumi.set(self, "server_private_network", value)


@pulumi.input_type
class ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status_description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The network identifier.
        :param pulumi.Input[bool] dhcp: Determines whether DHCP is enabled for this server. Should be false if ips is not an empty list. Not supported for proxmox OS. Default value is `false`.
               
               The `ip_blocks_configuration` is the third field of the `network_configuration` block.
               The `ip_blocks_configuration` block has 2 fields:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.
               
               
               The `storage_configuration` block has field `root_partition`.
               The `root_partition` block has two fields:
        """
        pulumi.set(__self__, "id", id)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if status_description is not None:
            pulumi.set(__self__, "status_description", status_description)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether DHCP is enabled for this server. Should be false if ips is not an empty list. Not supported for proxmox OS. Default value is `false`.

        The `ip_blocks_configuration` is the third field of the `network_configuration` block.
        The `ip_blocks_configuration` block has 2 fields:
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.


        The `storage_configuration` block has field `root_partition`.
        The `root_partition` block has two fields:
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_description")

    @status_description.setter
    def status_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_description", value)


@pulumi.input_type
class ServerNetworkConfigurationPublicNetworkConfigurationArgs:
    def __init__(__self__, *,
                 public_networks: Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkArgs']]]] = None):
        if public_networks is not None:
            pulumi.set(__self__, "public_networks", public_networks)

    @property
    @pulumi.getter(name="publicNetworks")
    def public_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkArgs']]]]:
        return pulumi.get(self, "public_networks")

    @public_networks.setter
    def public_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkArgs']]]]):
        pulumi.set(self, "public_networks", value)


@pulumi.input_type
class ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkArgs:
    def __init__(__self__, *,
                 server_public_network: Optional[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetworkArgs']] = None):
        if server_public_network is not None:
            pulumi.set(__self__, "server_public_network", server_public_network)

    @property
    @pulumi.getter(name="serverPublicNetwork")
    def server_public_network(self) -> Optional[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetworkArgs']]:
        return pulumi.get(self, "server_public_network")

    @server_public_network.setter
    def server_public_network(self, value: Optional[pulumi.Input['ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetworkArgs']]):
        pulumi.set(self, "server_public_network", value)


@pulumi.input_type
class ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetworkArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 ips: pulumi.Input[Sequence[pulumi.Input[str]]],
                 status_description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The network identifier.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ips: IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.
               
               
               The `storage_configuration` block has field `root_partition`.
               The `root_partition` block has two fields:
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ips", ips)
        if status_description is not None:
            pulumi.set(__self__, "status_description", status_description)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ips(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.


        The `storage_configuration` block has field `root_partition`.
        The `root_partition` block has two fields:
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_description")

    @status_description.setter
    def status_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_description", value)


@pulumi.input_type
class ServerStorageConfigurationArgs:
    def __init__(__self__, *,
                 root_partition: Optional[pulumi.Input['ServerStorageConfigurationRootPartitionArgs']] = None):
        if root_partition is not None:
            pulumi.set(__self__, "root_partition", root_partition)

    @property
    @pulumi.getter(name="rootPartition")
    def root_partition(self) -> Optional[pulumi.Input['ServerStorageConfigurationRootPartitionArgs']]:
        return pulumi.get(self, "root_partition")

    @root_partition.setter
    def root_partition(self, value: Optional[pulumi.Input['ServerStorageConfigurationRootPartitionArgs']]):
        pulumi.set(self, "root_partition", value)


@pulumi.input_type
class ServerStorageConfigurationRootPartitionArgs:
    def __init__(__self__, *,
                 raid: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] raid: Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
        :param pulumi.Input[int] size: The size of the root partition in GB. `-1` to use all available space.
        """
        if raid is not None:
            pulumi.set(__self__, "raid", raid)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def raid(self) -> Optional[pulumi.Input[str]]:
        """
        Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
        """
        return pulumi.get(self, "raid")

    @raid.setter
    def raid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raid", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the root partition in GB. `-1` to use all available space.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class ServerTagArgs:
    def __init__(__self__, *,
                 tag_assignment: Optional[pulumi.Input['ServerTagTagAssignmentArgs']] = None):
        if tag_assignment is not None:
            pulumi.set(__self__, "tag_assignment", tag_assignment)

    @property
    @pulumi.getter(name="tagAssignment")
    def tag_assignment(self) -> Optional[pulumi.Input['ServerTagTagAssignmentArgs']]:
        return pulumi.get(self, "tag_assignment")

    @tag_assignment.setter
    def tag_assignment(self, value: Optional[pulumi.Input['ServerTagTagAssignmentArgs']]):
        pulumi.set(self, "tag_assignment", value)


@pulumi.input_type
class ServerTagTagAssignmentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 created_by: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_billing_tag: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[str] created_by: Who the tag was created by.
        :param pulumi.Input[str] id: The network identifier.
        :param pulumi.Input[bool] is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param pulumi.Input[str] value: The value of the tag assigned to the IP Block.
               
               
               The `network_configuration` block has 4 fields: `gateway_address`, `private_network_configuration`, `ip_blocks_configuration` and `public_network_configuration`.
        """
        pulumi.set(__self__, "name", name)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_billing_tag is not None:
            pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The network identifier.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @is_billing_tag.setter
    def is_billing_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_billing_tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the tag assigned to the IP Block.


        The `network_configuration` block has 4 fields: `gateway_address`, `private_network_configuration`, `ip_blocks_configuration` and `public_network_configuration`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StorageNetworkVolumeArgs:
    def __init__(__self__, *,
                 volume: pulumi.Input['StorageNetworkVolumeVolumeArgs']):
        """
        :param pulumi.Input['StorageNetworkVolumeVolumeArgs'] volume: Volume to be created alongside storage.
        """
        pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Input['StorageNetworkVolumeVolumeArgs']:
        """
        Volume to be created alongside storage.
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input['StorageNetworkVolumeVolumeArgs']):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class StorageNetworkVolumeVolumeArgs:
    def __init__(__self__, *,
                 capacity_in_gb: pulumi.Input[int],
                 name: pulumi.Input[str],
                 created_on: Optional[pulumi.Input[str]] = None,
                 delete_requested_on: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 path_suffix: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumePermissionArgs']]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumeTagArgs']]]] = None,
                 used_capacity_in_gb: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] capacity_in_gb: Capacity of volume in GB. Currently only whole numbers and multiples of 1000 GB are supported.
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[str] created_on: Date and time when this volume was created.
        :param pulumi.Input[str] delete_requested_on: Date and time of the initial request for volume deletion.
        :param pulumi.Input[str] description: Volume description.
        :param pulumi.Input[str] id: The unique id of the tag.
        :param pulumi.Input[str] path: Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
        :param pulumi.Input[str] path_suffix: Last part of volume's path.
        :param pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumePermissionArgs']]] permissions: Permissions for the volume.
        :param pulumi.Input[str] protocol: File system protocol.
        :param pulumi.Input[str] status: Volume's status.
        :param pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumeTagArgs']]] tags: Tags to set to the volume.
        :param pulumi.Input[int] used_capacity_in_gb: Used capacity in GB, updated periodically.
        """
        pulumi.set(__self__, "capacity_in_gb", capacity_in_gb)
        pulumi.set(__self__, "name", name)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if delete_requested_on is not None:
            pulumi.set(__self__, "delete_requested_on", delete_requested_on)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_suffix is not None:
            pulumi.set(__self__, "path_suffix", path_suffix)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if used_capacity_in_gb is not None:
            pulumi.set(__self__, "used_capacity_in_gb", used_capacity_in_gb)

    @property
    @pulumi.getter(name="capacityInGb")
    def capacity_in_gb(self) -> pulumi.Input[int]:
        """
        Capacity of volume in GB. Currently only whole numbers and multiples of 1000 GB are supported.
        """
        return pulumi.get(self, "capacity_in_gb")

    @capacity_in_gb.setter
    def capacity_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "capacity_in_gb", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time when this volume was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="deleteRequestedOn")
    def delete_requested_on(self) -> Optional[pulumi.Input[str]]:
        """
        Date and time of the initial request for volume deletion.
        """
        return pulumi.get(self, "delete_requested_on")

    @delete_requested_on.setter
    def delete_requested_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_requested_on", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Volume description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="pathSuffix")
    def path_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Last part of volume's path.
        """
        return pulumi.get(self, "path_suffix")

    @path_suffix.setter
    def path_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_suffix", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumePermissionArgs']]]]:
        """
        Permissions for the volume.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumePermissionArgs']]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        File system protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Volume's status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumeTagArgs']]]]:
        """
        Tags to set to the volume.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumeTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="usedCapacityInGb")
    def used_capacity_in_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Used capacity in GB, updated periodically.
        """
        return pulumi.get(self, "used_capacity_in_gb")

    @used_capacity_in_gb.setter
    def used_capacity_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_capacity_in_gb", value)


@pulumi.input_type
class StorageNetworkVolumeVolumePermissionArgs:
    def __init__(__self__, *,
                 nfs: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumePermissionNfArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumePermissionNfArgs']]] nfs: NFS specific permissions on the volume.
        """
        if nfs is not None:
            pulumi.set(__self__, "nfs", nfs)

    @property
    @pulumi.getter
    def nfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumePermissionNfArgs']]]]:
        """
        NFS specific permissions on the volume.
        """
        return pulumi.get(self, "nfs")

    @nfs.setter
    def nfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageNetworkVolumeVolumePermissionNfArgs']]]]):
        pulumi.set(self, "nfs", value)


@pulumi.input_type
class StorageNetworkVolumeVolumePermissionNfArgs:
    def __init__(__self__, *,
                 all_squashes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 no_squashes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_onlies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 root_squashes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] all_squashes: All squash permission.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] no_squashes: No squash permission.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] read_onlies: Read only access.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] read_writes: Read/Write access.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] root_squashes: Root squash permission.
        """
        if all_squashes is not None:
            pulumi.set(__self__, "all_squashes", all_squashes)
        if no_squashes is not None:
            pulumi.set(__self__, "no_squashes", no_squashes)
        if read_onlies is not None:
            pulumi.set(__self__, "read_onlies", read_onlies)
        if read_writes is not None:
            pulumi.set(__self__, "read_writes", read_writes)
        if root_squashes is not None:
            pulumi.set(__self__, "root_squashes", root_squashes)

    @property
    @pulumi.getter(name="allSquashes")
    def all_squashes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        All squash permission.
        """
        return pulumi.get(self, "all_squashes")

    @all_squashes.setter
    def all_squashes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "all_squashes", value)

    @property
    @pulumi.getter(name="noSquashes")
    def no_squashes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        No squash permission.
        """
        return pulumi.get(self, "no_squashes")

    @no_squashes.setter
    def no_squashes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "no_squashes", value)

    @property
    @pulumi.getter(name="readOnlies")
    def read_onlies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Read only access.
        """
        return pulumi.get(self, "read_onlies")

    @read_onlies.setter
    def read_onlies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "read_onlies", value)

    @property
    @pulumi.getter(name="readWrites")
    def read_writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Read/Write access.
        """
        return pulumi.get(self, "read_writes")

    @read_writes.setter
    def read_writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "read_writes", value)

    @property
    @pulumi.getter(name="rootSquashes")
    def root_squashes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Root squash permission.
        """
        return pulumi.get(self, "root_squashes")

    @root_squashes.setter
    def root_squashes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "root_squashes", value)


@pulumi.input_type
class StorageNetworkVolumeVolumeTagArgs:
    def __init__(__self__, *,
                 tag_assignment: Optional[pulumi.Input['StorageNetworkVolumeVolumeTagTagAssignmentArgs']] = None):
        """
        :param pulumi.Input['StorageNetworkVolumeVolumeTagTagAssignmentArgs'] tag_assignment: Tag to set to the volume.
        """
        if tag_assignment is not None:
            pulumi.set(__self__, "tag_assignment", tag_assignment)

    @property
    @pulumi.getter(name="tagAssignment")
    def tag_assignment(self) -> Optional[pulumi.Input['StorageNetworkVolumeVolumeTagTagAssignmentArgs']]:
        """
        Tag to set to the volume.
        """
        return pulumi.get(self, "tag_assignment")

    @tag_assignment.setter
    def tag_assignment(self, value: Optional[pulumi.Input['StorageNetworkVolumeVolumeTagTagAssignmentArgs']]):
        pulumi.set(self, "tag_assignment", value)


@pulumi.input_type
class StorageNetworkVolumeVolumeTagTagAssignmentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 created_by: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_billing_tag: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[str] created_by: Who the tag was created by.
        :param pulumi.Input[str] id: The unique id of the tag.
        :param pulumi.Input[bool] is_billing_tag: Whether or not to show the tag as part of billing and invoices.
        :param pulumi.Input[str] value: The value of the tag assigned to the volume.
        """
        pulumi.set(__self__, "name", name)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_billing_tag is not None:
            pulumi.set(__self__, "is_billing_tag", is_billing_tag)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        Who the tag was created by.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isBillingTag")
    def is_billing_tag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the tag as part of billing and invoices.
        """
        return pulumi.get(self, "is_billing_tag")

    @is_billing_tag.setter
    def is_billing_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_billing_tag", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the tag assigned to the volume.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TagResourceAssignmentArgs:
    def __init__(__self__, *,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource_name: The resource name.
        :param pulumi.Input[str] value: The value of the tag assigned to the resource.
               * `created_by ` - The tag's creator.
        """
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the tag assigned to the resource.
        * `created_by ` - The tag's creator.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetEventsEventArgs:
    def __init__(__self__, *,
                 name: str,
                 timestamp: str,
                 user_infos: Sequence['GetEventsEventUserInfoArgs']):
        """
        :param str name: Event name.
        :param str timestamp: The UTC time the event initiated.
        :param Sequence['GetEventsEventUserInfoArgs'] user_infos: Details related to the user / application.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "user_infos", user_infos)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Event name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        """
        The UTC time the event initiated.
        """
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: str):
        pulumi.set(self, "timestamp", value)

    @property
    @pulumi.getter(name="userInfos")
    def user_infos(self) -> Sequence['GetEventsEventUserInfoArgs']:
        """
        Details related to the user / application.
        """
        return pulumi.get(self, "user_infos")

    @user_infos.setter
    def user_infos(self, value: Sequence['GetEventsEventUserInfoArgs']):
        pulumi.set(self, "user_infos", value)


@pulumi.input_type
class GetEventsEventUserInfoArgs:
    def __init__(__self__, *,
                 account_id: str,
                 client_id: str,
                 username: str):
        """
        :param str account_id: The BMC account ID.
        :param str client_id: The client ID of the application.
        :param str username: The logged in user or owner of the client application.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The BMC account ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the application.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: str):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The logged in user or owner of the client application.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: str):
        pulumi.set(self, "username", value)


