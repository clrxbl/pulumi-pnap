// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RancherClusterConfigurationCertificatesArgs extends com.pulumi.resources.ResourceArgs {

    public static final RancherClusterConfigurationCertificatesArgs Empty = new RancherClusterConfigurationCertificatesArgs();

    /**
     * The SSL CA certificate to be used for rancher admin.
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    /**
     * @return The SSL CA certificate to be used for rancher admin.
     * 
     */
    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * The SSL certificate to be used for rancher admin.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return The SSL certificate to be used for rancher admin.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * The SSL certificate key to be used for rancher admin.
     * 
     */
    @Import(name="certificateKey")
    private @Nullable Output<String> certificateKey;

    /**
     * @return The SSL certificate key to be used for rancher admin.
     * 
     */
    public Optional<Output<String>> certificateKey() {
        return Optional.ofNullable(this.certificateKey);
    }

    private RancherClusterConfigurationCertificatesArgs() {}

    private RancherClusterConfigurationCertificatesArgs(RancherClusterConfigurationCertificatesArgs $) {
        this.caCertificate = $.caCertificate;
        this.certificate = $.certificate;
        this.certificateKey = $.certificateKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RancherClusterConfigurationCertificatesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RancherClusterConfigurationCertificatesArgs $;

        public Builder() {
            $ = new RancherClusterConfigurationCertificatesArgs();
        }

        public Builder(RancherClusterConfigurationCertificatesArgs defaults) {
            $ = new RancherClusterConfigurationCertificatesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificate The SSL CA certificate to be used for rancher admin.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificate The SSL CA certificate to be used for rancher admin.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        /**
         * @param certificate The SSL certificate to be used for rancher admin.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The SSL certificate to be used for rancher admin.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param certificateKey The SSL certificate key to be used for rancher admin.
         * 
         * @return builder
         * 
         */
        public Builder certificateKey(@Nullable Output<String> certificateKey) {
            $.certificateKey = certificateKey;
            return this;
        }

        /**
         * @param certificateKey The SSL certificate key to be used for rancher admin.
         * 
         * @return builder
         * 
         */
        public Builder certificateKey(String certificateKey) {
            return certificateKey(Output.of(certificateKey));
        }

        public RancherClusterConfigurationCertificatesArgs build() {
            return $;
        }
    }

}
