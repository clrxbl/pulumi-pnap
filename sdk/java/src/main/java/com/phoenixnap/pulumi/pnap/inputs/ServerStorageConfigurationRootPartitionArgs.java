// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerStorageConfigurationRootPartitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerStorageConfigurationRootPartitionArgs Empty = new ServerStorageConfigurationRootPartitionArgs();

    /**
     * Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
     * 
     */
    @Import(name="raid")
    private @Nullable Output<String> raid;

    /**
     * @return Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
     * 
     */
    public Optional<Output<String>> raid() {
        return Optional.ofNullable(this.raid);
    }

    /**
     * The size of the root partition in GB. `-1` to use all available space.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the root partition in GB. `-1` to use all available space.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    private ServerStorageConfigurationRootPartitionArgs() {}

    private ServerStorageConfigurationRootPartitionArgs(ServerStorageConfigurationRootPartitionArgs $) {
        this.raid = $.raid;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerStorageConfigurationRootPartitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerStorageConfigurationRootPartitionArgs $;

        public Builder() {
            $ = new ServerStorageConfigurationRootPartitionArgs();
        }

        public Builder(ServerStorageConfigurationRootPartitionArgs defaults) {
            $ = new ServerStorageConfigurationRootPartitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param raid Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
         * 
         * @return builder
         * 
         */
        public Builder raid(@Nullable Output<String> raid) {
            $.raid = raid;
            return this;
        }

        /**
         * @param raid Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
         * 
         * @return builder
         * 
         */
        public Builder raid(String raid) {
            return raid(Output.of(raid));
        }

        /**
         * @param size The size of the root partition in GB. `-1` to use all available space.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the root partition in GB. `-1` to use all available space.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public ServerStorageConfigurationRootPartitionArgs build() {
            return $;
        }
    }

}
