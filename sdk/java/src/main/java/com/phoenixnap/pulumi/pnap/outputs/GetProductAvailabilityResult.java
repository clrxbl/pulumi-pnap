// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.phoenixnap.pulumi.pnap.outputs.GetProductAvailabilityProductAvailability;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProductAvailabilityResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The code identifying the location.
     * 
     */
    private @Nullable List<String> locations;
    private @Nullable Double minQuantity;
    /**
     * @return List of product availabilities.
     * 
     */
    private List<GetProductAvailabilityProductAvailability> productAvailabilities;
    /**
     * @return The product category.
     * 
     */
    private @Nullable List<String> productCategories;
    /**
     * @return The code identifying the product.
     * 
     */
    private @Nullable List<String> productCodes;
    private @Nullable Boolean showOnlyMinQuantityAvailable;
    private @Nullable List<String> solutions;

    private GetProductAvailabilityResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The code identifying the location.
     * 
     */
    public List<String> locations() {
        return this.locations == null ? List.of() : this.locations;
    }
    public Optional<Double> minQuantity() {
        return Optional.ofNullable(this.minQuantity);
    }
    /**
     * @return List of product availabilities.
     * 
     */
    public List<GetProductAvailabilityProductAvailability> productAvailabilities() {
        return this.productAvailabilities;
    }
    /**
     * @return The product category.
     * 
     */
    public List<String> productCategories() {
        return this.productCategories == null ? List.of() : this.productCategories;
    }
    /**
     * @return The code identifying the product.
     * 
     */
    public List<String> productCodes() {
        return this.productCodes == null ? List.of() : this.productCodes;
    }
    public Optional<Boolean> showOnlyMinQuantityAvailable() {
        return Optional.ofNullable(this.showOnlyMinQuantityAvailable);
    }
    public List<String> solutions() {
        return this.solutions == null ? List.of() : this.solutions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductAvailabilityResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable List<String> locations;
        private @Nullable Double minQuantity;
        private List<GetProductAvailabilityProductAvailability> productAvailabilities;
        private @Nullable List<String> productCategories;
        private @Nullable List<String> productCodes;
        private @Nullable Boolean showOnlyMinQuantityAvailable;
        private @Nullable List<String> solutions;
        public Builder() {}
        public Builder(GetProductAvailabilityResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.locations = defaults.locations;
    	      this.minQuantity = defaults.minQuantity;
    	      this.productAvailabilities = defaults.productAvailabilities;
    	      this.productCategories = defaults.productCategories;
    	      this.productCodes = defaults.productCodes;
    	      this.showOnlyMinQuantityAvailable = defaults.showOnlyMinQuantityAvailable;
    	      this.solutions = defaults.solutions;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProductAvailabilityResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder locations(@Nullable List<String> locations) {

            this.locations = locations;
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder minQuantity(@Nullable Double minQuantity) {

            this.minQuantity = minQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder productAvailabilities(List<GetProductAvailabilityProductAvailability> productAvailabilities) {
            if (productAvailabilities == null) {
              throw new MissingRequiredPropertyException("GetProductAvailabilityResult", "productAvailabilities");
            }
            this.productAvailabilities = productAvailabilities;
            return this;
        }
        public Builder productAvailabilities(GetProductAvailabilityProductAvailability... productAvailabilities) {
            return productAvailabilities(List.of(productAvailabilities));
        }
        @CustomType.Setter
        public Builder productCategories(@Nullable List<String> productCategories) {

            this.productCategories = productCategories;
            return this;
        }
        public Builder productCategories(String... productCategories) {
            return productCategories(List.of(productCategories));
        }
        @CustomType.Setter
        public Builder productCodes(@Nullable List<String> productCodes) {

            this.productCodes = productCodes;
            return this;
        }
        public Builder productCodes(String... productCodes) {
            return productCodes(List.of(productCodes));
        }
        @CustomType.Setter
        public Builder showOnlyMinQuantityAvailable(@Nullable Boolean showOnlyMinQuantityAvailable) {

            this.showOnlyMinQuantityAvailable = showOnlyMinQuantityAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder solutions(@Nullable List<String> solutions) {

            this.solutions = solutions;
            return this;
        }
        public Builder solutions(String... solutions) {
            return solutions(List.of(solutions));
        }
        public GetProductAvailabilityResult build() {
            final var _resultValue = new GetProductAvailabilityResult();
            _resultValue.id = id;
            _resultValue.locations = locations;
            _resultValue.minQuantity = minQuantity;
            _resultValue.productAvailabilities = productAvailabilities;
            _resultValue.productCategories = productCategories;
            _resultValue.productCodes = productCodes;
            _resultValue.showOnlyMinQuantityAvailable = showOnlyMinQuantityAvailable;
            _resultValue.solutions = solutions;
            return _resultValue;
        }
    }
}
