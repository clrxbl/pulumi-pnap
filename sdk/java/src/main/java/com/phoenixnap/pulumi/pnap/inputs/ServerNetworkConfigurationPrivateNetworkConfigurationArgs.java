// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.phoenixnap.pulumi.pnap.inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerNetworkConfigurationPrivateNetworkConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerNetworkConfigurationPrivateNetworkConfigurationArgs Empty = new ServerNetworkConfigurationPrivateNetworkConfigurationArgs();

    /**
     * Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
     * 
     */
    @Import(name="configurationType")
    private @Nullable Output<String> configurationType;

    /**
     * @return Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
     * 
     */
    public Optional<Output<String>> configurationType() {
        return Optional.ofNullable(this.configurationType);
    }

    /**
     * The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
     * 
     */
    @Import(name="gatewayAddress")
    private @Nullable Output<String> gatewayAddress;

    /**
     * @return The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
     * 
     */
    public Optional<Output<String>> gatewayAddress() {
        return Optional.ofNullable(this.gatewayAddress);
    }

    /**
     * The list of private networks this server is member of. When this field is part of request body, it&#39;ll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
     * 
     * The `private_networks` block has field `server_private_network`.
     * The `server_private_network` block has 3 fields:
     * 
     */
    @Import(name="privateNetworks")
    private @Nullable Output<List<ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs>> privateNetworks;

    /**
     * @return The list of private networks this server is member of. When this field is part of request body, it&#39;ll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
     * 
     * The `private_networks` block has field `server_private_network`.
     * The `server_private_network` block has 3 fields:
     * 
     */
    public Optional<Output<List<ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs>>> privateNetworks() {
        return Optional.ofNullable(this.privateNetworks);
    }

    private ServerNetworkConfigurationPrivateNetworkConfigurationArgs() {}

    private ServerNetworkConfigurationPrivateNetworkConfigurationArgs(ServerNetworkConfigurationPrivateNetworkConfigurationArgs $) {
        this.configurationType = $.configurationType;
        this.gatewayAddress = $.gatewayAddress;
        this.privateNetworks = $.privateNetworks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerNetworkConfigurationPrivateNetworkConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerNetworkConfigurationPrivateNetworkConfigurationArgs $;

        public Builder() {
            $ = new ServerNetworkConfigurationPrivateNetworkConfigurationArgs();
        }

        public Builder(ServerNetworkConfigurationPrivateNetworkConfigurationArgs defaults) {
            $ = new ServerNetworkConfigurationPrivateNetworkConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationType Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(@Nullable Output<String> configurationType) {
            $.configurationType = configurationType;
            return this;
        }

        /**
         * @param configurationType Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(String configurationType) {
            return configurationType(Output.of(configurationType));
        }

        /**
         * @param gatewayAddress The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
         * 
         * @return builder
         * 
         */
        public Builder gatewayAddress(@Nullable Output<String> gatewayAddress) {
            $.gatewayAddress = gatewayAddress;
            return this;
        }

        /**
         * @param gatewayAddress The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.
         * 
         * @return builder
         * 
         */
        public Builder gatewayAddress(String gatewayAddress) {
            return gatewayAddress(Output.of(gatewayAddress));
        }

        /**
         * @param privateNetworks The list of private networks this server is member of. When this field is part of request body, it&#39;ll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
         * 
         * The `private_networks` block has field `server_private_network`.
         * The `server_private_network` block has 3 fields:
         * 
         * @return builder
         * 
         */
        public Builder privateNetworks(@Nullable Output<List<ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs>> privateNetworks) {
            $.privateNetworks = privateNetworks;
            return this;
        }

        /**
         * @param privateNetworks The list of private networks this server is member of. When this field is part of request body, it&#39;ll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
         * 
         * The `private_networks` block has field `server_private_network`.
         * The `server_private_network` block has 3 fields:
         * 
         * @return builder
         * 
         */
        public Builder privateNetworks(List<ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs> privateNetworks) {
            return privateNetworks(Output.of(privateNetworks));
        }

        /**
         * @param privateNetworks The list of private networks this server is member of. When this field is part of request body, it&#39;ll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
         * 
         * The `private_networks` block has field `server_private_network`.
         * The `server_private_network` block has 3 fields:
         * 
         * @return builder
         * 
         */
        public Builder privateNetworks(ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs... privateNetworks) {
            return privateNetworks(List.of(privateNetworks));
        }

        public ServerNetworkConfigurationPrivateNetworkConfigurationArgs build() {
            return $;
        }
    }

}
