// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.phoenixnap.pulumi.pnap.inputs.StorageNetworkVolumeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StorageNetworkState extends com.pulumi.resources.ResourceArgs {

    public static final StorageNetworkState Empty = new StorageNetworkState();

    /**
     * Custom Client VLAN that the Storage Network will be set to.
     * 
     */
    @Import(name="clientVlan")
    private @Nullable Output<Integer> clientVlan;

    /**
     * @return Custom Client VLAN that the Storage Network will be set to.
     * 
     */
    public Optional<Output<Integer>> clientVlan() {
        return Optional.ofNullable(this.clientVlan);
    }

    /**
     * Date and time when this volume was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return Date and time when this volume was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Date and time of the initial request for volume deletion.
     * 
     */
    @Import(name="deleteRequestedOn")
    private @Nullable Output<String> deleteRequestedOn;

    /**
     * @return Date and time of the initial request for volume deletion.
     * 
     */
    public Optional<Output<String>> deleteRequestedOn() {
        return Optional.ofNullable(this.deleteRequestedOn);
    }

    /**
     * Volume description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Volume description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * IP of the storage network
     * 
     */
    @Import(name="ips")
    private @Nullable Output<List<String>> ips;

    /**
     * @return IP of the storage network
     * 
     */
    public Optional<Output<List<String>>> ips() {
        return Optional.ofNullable(this.ips);
    }

    /**
     * The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the tag.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the tag.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Volume&#39;s status.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Volume&#39;s status.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<StorageNetworkVolumeArgs>> volumes;

    /**
     * @return Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
     * 
     */
    public Optional<Output<List<StorageNetworkVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private StorageNetworkState() {}

    private StorageNetworkState(StorageNetworkState $) {
        this.clientVlan = $.clientVlan;
        this.createdOn = $.createdOn;
        this.deleteRequestedOn = $.deleteRequestedOn;
        this.description = $.description;
        this.ips = $.ips;
        this.location = $.location;
        this.name = $.name;
        this.networkId = $.networkId;
        this.status = $.status;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageNetworkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageNetworkState $;

        public Builder() {
            $ = new StorageNetworkState();
        }

        public Builder(StorageNetworkState defaults) {
            $ = new StorageNetworkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientVlan Custom Client VLAN that the Storage Network will be set to.
         * 
         * @return builder
         * 
         */
        public Builder clientVlan(@Nullable Output<Integer> clientVlan) {
            $.clientVlan = clientVlan;
            return this;
        }

        /**
         * @param clientVlan Custom Client VLAN that the Storage Network will be set to.
         * 
         * @return builder
         * 
         */
        public Builder clientVlan(Integer clientVlan) {
            return clientVlan(Output.of(clientVlan));
        }

        /**
         * @param createdOn Date and time when this volume was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn Date and time when this volume was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param deleteRequestedOn Date and time of the initial request for volume deletion.
         * 
         * @return builder
         * 
         */
        public Builder deleteRequestedOn(@Nullable Output<String> deleteRequestedOn) {
            $.deleteRequestedOn = deleteRequestedOn;
            return this;
        }

        /**
         * @param deleteRequestedOn Date and time of the initial request for volume deletion.
         * 
         * @return builder
         * 
         */
        public Builder deleteRequestedOn(String deleteRequestedOn) {
            return deleteRequestedOn(Output.of(deleteRequestedOn));
        }

        /**
         * @param description Volume description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Volume description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ips IP of the storage network
         * 
         * @return builder
         * 
         */
        public Builder ips(@Nullable Output<List<String>> ips) {
            $.ips = ips;
            return this;
        }

        /**
         * @param ips IP of the storage network
         * 
         * @return builder
         * 
         */
        public Builder ips(List<String> ips) {
            return ips(Output.of(ips));
        }

        /**
         * @param ips IP of the storage network
         * 
         * @return builder
         * 
         */
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param location The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param status Volume&#39;s status.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Volume&#39;s status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param volumes Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<List<StorageNetworkVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
         * 
         * @return builder
         * 
         */
        public Builder volumes(List<StorageNetworkVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        /**
         * @param volumes Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
         * 
         * @return builder
         * 
         */
        public Builder volumes(StorageNetworkVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public StorageNetworkState build() {
            return $;
        }
    }

}
