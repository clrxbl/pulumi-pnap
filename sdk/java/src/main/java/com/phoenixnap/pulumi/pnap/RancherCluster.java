// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap;

import com.phoenixnap.pulumi.pnap.RancherClusterArgs;
import com.phoenixnap.pulumi.pnap.Utilities;
import com.phoenixnap.pulumi.pnap.inputs.RancherClusterState;
import com.phoenixnap.pulumi.pnap.outputs.RancherClusterConfiguration;
import com.phoenixnap.pulumi.pnap.outputs.RancherClusterMetadata;
import com.phoenixnap.pulumi.pnap.outputs.RancherClusterNodePools;
import com.phoenixnap.pulumi.pnap.outputs.RancherClusterWorkloadConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a phoenixNAP Rancher Cluster resource. This can be used to create and delete Rancher Server deployments.
 * 
 * ## Example Usage
 * 
 * Create a Rancher Cluster
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pnap.RancherCluster;
 * import com.pulumi.pnap.RancherClusterArgs;
 * import com.pulumi.pnap.inputs.RancherClusterNodePoolsArgs;
 * import com.pulumi.pnap.inputs.RancherClusterNodePoolsSshConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var rancher_Deployment_1 = new RancherCluster(&#34;rancher-Deployment-1&#34;, RancherClusterArgs.builder()        
 *             .description(&#34;A Rancher Server deployment with specific server type.&#34;)
 *             .location(&#34;PHX&#34;)
 *             .nodePools(RancherClusterNodePoolsArgs.builder()
 *                 .nodeCount(1)
 *                 .serverType(&#34;s1.c1.medium&#34;)
 *                 .sshConfig(RancherClusterNodePoolsSshConfigArgs.builder()
 *                     .installDefaultKeys(false)
 *                     .keys(                    
 *                         &#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne&#34;,
 *                         &#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="pnap:index/rancherCluster:RancherCluster")
public class RancherCluster extends com.pulumi.resources.CustomResource {
    /**
     * Rancher configuration parameters. The `configuration` block has 7 fields.
     * 
     */
    @Export(name="configuration", refs={RancherClusterConfiguration.class}, tree="[0]")
    private Output</* @Nullable */ RancherClusterConfiguration> configuration;

    /**
     * @return Rancher configuration parameters. The `configuration` block has 7 fields.
     * 
     */
    public Output<Optional<RancherClusterConfiguration>> configuration() {
        return Codegen.optional(this.configuration);
    }
    /**
     * Cluster description.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Cluster description.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The Rancher version that was installed on the cluster during the first creation process.
     * 
     */
    @Export(name="initialClusterVersion", refs={String.class}, tree="[0]")
    private Output<String> initialClusterVersion;

    /**
     * @return The Rancher version that was installed on the cluster during the first creation process.
     * 
     */
    public Output<String> initialClusterVersion() {
        return this.initialClusterVersion;
    }
    /**
     * Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Connection parameters to use to connect to the Rancher Server Administrative GUI.
     * 
     */
    @Export(name="metadatas", refs={List.class,RancherClusterMetadata.class}, tree="[0,1]")
    private Output<List<RancherClusterMetadata>> metadatas;

    /**
     * @return Connection parameters to use to connect to the Rancher Server Administrative GUI.
     * 
     */
    public Output<List<RancherClusterMetadata>> metadatas() {
        return this.metadatas;
    }
    /**
     * The name of the workload cluster. This field is autogenerated if not provided.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the workload cluster. This field is autogenerated if not provided.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
     * 
     */
    @Export(name="nodePools", refs={RancherClusterNodePools.class}, tree="[0]")
    private Output<RancherClusterNodePools> nodePools;

    /**
     * @return The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
     * 
     */
    public Output<RancherClusterNodePools> nodePools() {
        return this.nodePools;
    }
    /**
     * The cluster status.
     * 
     */
    @Export(name="statusDescription", refs={String.class}, tree="[0]")
    private Output<String> statusDescription;

    /**
     * @return The cluster status.
     * 
     */
    public Output<String> statusDescription() {
        return this.statusDescription;
    }
    /**
     * Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
     * 
     */
    @Export(name="workloadConfiguration", refs={RancherClusterWorkloadConfiguration.class}, tree="[0]")
    private Output</* @Nullable */ RancherClusterWorkloadConfiguration> workloadConfiguration;

    /**
     * @return Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
     * 
     */
    public Output<Optional<RancherClusterWorkloadConfiguration>> workloadConfiguration() {
        return Codegen.optional(this.workloadConfiguration);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RancherCluster(String name) {
        this(name, RancherClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RancherCluster(String name, RancherClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RancherCluster(String name, RancherClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pnap:index/rancherCluster:RancherCluster", name, args == null ? RancherClusterArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RancherCluster(String name, Output<String> id, @Nullable RancherClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pnap:index/rancherCluster:RancherCluster", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RancherCluster get(String name, Output<String> id, @Nullable RancherClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RancherCluster(name, id, state, options);
    }
}
