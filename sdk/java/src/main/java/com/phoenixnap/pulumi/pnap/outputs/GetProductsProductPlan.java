// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProductsProductPlan {
    /**
     * @return Product code of the correlated product.
     * 
     */
    private String correlatedProductCode;
    /**
     * @return The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
     * 
     */
    private String location;
    /**
     * @return Package size per month.
     * 
     */
    private Integer packageQuantity;
    /**
     * @return Package size unit.
     * 
     */
    private String packageUnit;
    /**
     * @return Price per unit.
     * 
     */
    private Double price;
    /**
     * @return The unit to which the price applies.
     * 
     */
    private String priceUnit;
    /**
     * @return The pricing model.
     * 
     */
    private String pricingModel;
    /**
     * @return The SKU identifying the pricing plan.
     * 
     */
    private String sku;
    /**
     * @return Description of the pricing plan.
     * 
     */
    private String skuDescription;

    private GetProductsProductPlan() {}
    /**
     * @return Product code of the correlated product.
     * 
     */
    public String correlatedProductCode() {
        return this.correlatedProductCode;
    }
    /**
     * @return The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Package size per month.
     * 
     */
    public Integer packageQuantity() {
        return this.packageQuantity;
    }
    /**
     * @return Package size unit.
     * 
     */
    public String packageUnit() {
        return this.packageUnit;
    }
    /**
     * @return Price per unit.
     * 
     */
    public Double price() {
        return this.price;
    }
    /**
     * @return The unit to which the price applies.
     * 
     */
    public String priceUnit() {
        return this.priceUnit;
    }
    /**
     * @return The pricing model.
     * 
     */
    public String pricingModel() {
        return this.pricingModel;
    }
    /**
     * @return The SKU identifying the pricing plan.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return Description of the pricing plan.
     * 
     */
    public String skuDescription() {
        return this.skuDescription;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductsProductPlan defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String correlatedProductCode;
        private String location;
        private Integer packageQuantity;
        private String packageUnit;
        private Double price;
        private String priceUnit;
        private String pricingModel;
        private String sku;
        private String skuDescription;
        public Builder() {}
        public Builder(GetProductsProductPlan defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.correlatedProductCode = defaults.correlatedProductCode;
    	      this.location = defaults.location;
    	      this.packageQuantity = defaults.packageQuantity;
    	      this.packageUnit = defaults.packageUnit;
    	      this.price = defaults.price;
    	      this.priceUnit = defaults.priceUnit;
    	      this.pricingModel = defaults.pricingModel;
    	      this.sku = defaults.sku;
    	      this.skuDescription = defaults.skuDescription;
        }

        @CustomType.Setter
        public Builder correlatedProductCode(String correlatedProductCode) {
            if (correlatedProductCode == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "correlatedProductCode");
            }
            this.correlatedProductCode = correlatedProductCode;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder packageQuantity(Integer packageQuantity) {
            if (packageQuantity == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "packageQuantity");
            }
            this.packageQuantity = packageQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder packageUnit(String packageUnit) {
            if (packageUnit == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "packageUnit");
            }
            this.packageUnit = packageUnit;
            return this;
        }
        @CustomType.Setter
        public Builder price(Double price) {
            if (price == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "price");
            }
            this.price = price;
            return this;
        }
        @CustomType.Setter
        public Builder priceUnit(String priceUnit) {
            if (priceUnit == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "priceUnit");
            }
            this.priceUnit = priceUnit;
            return this;
        }
        @CustomType.Setter
        public Builder pricingModel(String pricingModel) {
            if (pricingModel == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "pricingModel");
            }
            this.pricingModel = pricingModel;
            return this;
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            if (sku == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "sku");
            }
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder skuDescription(String skuDescription) {
            if (skuDescription == null) {
              throw new MissingRequiredPropertyException("GetProductsProductPlan", "skuDescription");
            }
            this.skuDescription = skuDescription;
            return this;
        }
        public GetProductsProductPlan build() {
            final var _resultValue = new GetProductsProductPlan();
            _resultValue.correlatedProductCode = correlatedProductCode;
            _resultValue.location = location;
            _resultValue.packageQuantity = packageQuantity;
            _resultValue.packageUnit = packageUnit;
            _resultValue.price = price;
            _resultValue.priceUnit = priceUnit;
            _resultValue.pricingModel = pricingModel;
            _resultValue.sku = sku;
            _resultValue.skuDescription = skuDescription;
            return _resultValue;
        }
    }
}
