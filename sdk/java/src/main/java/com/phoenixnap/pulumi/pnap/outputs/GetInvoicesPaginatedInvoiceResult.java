// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInvoicesPaginatedInvoiceResult {
    /**
     * @return The invoice amount.
     * 
     */
    private Double amount;
    /**
     * @return The currency of the invoice.
     * 
     */
    private String currency;
    /**
     * @return Date and time when the invoice payment is due.
     * 
     */
    private String dueDate;
    /**
     * @return The unique resource identifier of the invoice.
     * 
     */
    private String id;
    /**
     * @return A user-friendly reference number assigned to the invoice.
     * 
     */
    private String number;
    /**
     * @return The invoice outstanding amount.
     * 
     */
    private Double outstandingAmount;
    /**
     * @return Date and time when the invoice was sent.
     * 
     */
    private String sentOn;
    /**
     * @return Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
     * 
     */
    private String status;

    private GetInvoicesPaginatedInvoiceResult() {}
    /**
     * @return The invoice amount.
     * 
     */
    public Double amount() {
        return this.amount;
    }
    /**
     * @return The currency of the invoice.
     * 
     */
    public String currency() {
        return this.currency;
    }
    /**
     * @return Date and time when the invoice payment is due.
     * 
     */
    public String dueDate() {
        return this.dueDate;
    }
    /**
     * @return The unique resource identifier of the invoice.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A user-friendly reference number assigned to the invoice.
     * 
     */
    public String number() {
        return this.number;
    }
    /**
     * @return The invoice outstanding amount.
     * 
     */
    public Double outstandingAmount() {
        return this.outstandingAmount;
    }
    /**
     * @return Date and time when the invoice was sent.
     * 
     */
    public String sentOn() {
        return this.sentOn;
    }
    /**
     * @return Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvoicesPaginatedInvoiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double amount;
        private String currency;
        private String dueDate;
        private String id;
        private String number;
        private Double outstandingAmount;
        private String sentOn;
        private String status;
        public Builder() {}
        public Builder(GetInvoicesPaginatedInvoiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amount = defaults.amount;
    	      this.currency = defaults.currency;
    	      this.dueDate = defaults.dueDate;
    	      this.id = defaults.id;
    	      this.number = defaults.number;
    	      this.outstandingAmount = defaults.outstandingAmount;
    	      this.sentOn = defaults.sentOn;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder amount(Double amount) {
            if (amount == null) {
              throw new MissingRequiredPropertyException("GetInvoicesPaginatedInvoiceResult", "amount");
            }
            this.amount = amount;
            return this;
        }
        @CustomType.Setter
        public Builder currency(String currency) {
            if (currency == null) {
              throw new MissingRequiredPropertyException("GetInvoicesPaginatedInvoiceResult", "currency");
            }
            this.currency = currency;
            return this;
        }
        @CustomType.Setter
        public Builder dueDate(String dueDate) {
            if (dueDate == null) {
              throw new MissingRequiredPropertyException("GetInvoicesPaginatedInvoiceResult", "dueDate");
            }
            this.dueDate = dueDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInvoicesPaginatedInvoiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder number(String number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetInvoicesPaginatedInvoiceResult", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder outstandingAmount(Double outstandingAmount) {
            if (outstandingAmount == null) {
              throw new MissingRequiredPropertyException("GetInvoicesPaginatedInvoiceResult", "outstandingAmount");
            }
            this.outstandingAmount = outstandingAmount;
            return this;
        }
        @CustomType.Setter
        public Builder sentOn(String sentOn) {
            if (sentOn == null) {
              throw new MissingRequiredPropertyException("GetInvoicesPaginatedInvoiceResult", "sentOn");
            }
            this.sentOn = sentOn;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInvoicesPaginatedInvoiceResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetInvoicesPaginatedInvoiceResult build() {
            final var _resultValue = new GetInvoicesPaginatedInvoiceResult();
            _resultValue.amount = amount;
            _resultValue.currency = currency;
            _resultValue.dueDate = dueDate;
            _resultValue.id = id;
            _resultValue.number = number;
            _resultValue.outstandingAmount = outstandingAmount;
            _resultValue.sentOn = sentOn;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
