// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetProductsProductMetadata {
    /**
     * @return The number of physical cores present on each CPU.
     * 
     */
    private Integer coresPerCpu;
    /**
     * @return CPU name.
     * 
     */
    private String cpu;
    /**
     * @return Number of CPUs.
     * 
     */
    private Integer cpuCount;
    /**
     * @return CPU frequency in GHz.
     * 
     */
    private Double cpuFrequency;
    /**
     * @return Server network.
     * 
     */
    private String network;
    /**
     * @return RAM in GB.
     * 
     */
    private Integer ramInGb;
    /**
     * @return Server storage.
     * 
     */
    private String storage;

    private GetProductsProductMetadata() {}
    /**
     * @return The number of physical cores present on each CPU.
     * 
     */
    public Integer coresPerCpu() {
        return this.coresPerCpu;
    }
    /**
     * @return CPU name.
     * 
     */
    public String cpu() {
        return this.cpu;
    }
    /**
     * @return Number of CPUs.
     * 
     */
    public Integer cpuCount() {
        return this.cpuCount;
    }
    /**
     * @return CPU frequency in GHz.
     * 
     */
    public Double cpuFrequency() {
        return this.cpuFrequency;
    }
    /**
     * @return Server network.
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return RAM in GB.
     * 
     */
    public Integer ramInGb() {
        return this.ramInGb;
    }
    /**
     * @return Server storage.
     * 
     */
    public String storage() {
        return this.storage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductsProductMetadata defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer coresPerCpu;
        private String cpu;
        private Integer cpuCount;
        private Double cpuFrequency;
        private String network;
        private Integer ramInGb;
        private String storage;
        public Builder() {}
        public Builder(GetProductsProductMetadata defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.coresPerCpu = defaults.coresPerCpu;
    	      this.cpu = defaults.cpu;
    	      this.cpuCount = defaults.cpuCount;
    	      this.cpuFrequency = defaults.cpuFrequency;
    	      this.network = defaults.network;
    	      this.ramInGb = defaults.ramInGb;
    	      this.storage = defaults.storage;
        }

        @CustomType.Setter
        public Builder coresPerCpu(Integer coresPerCpu) {
            if (coresPerCpu == null) {
              throw new MissingRequiredPropertyException("GetProductsProductMetadata", "coresPerCpu");
            }
            this.coresPerCpu = coresPerCpu;
            return this;
        }
        @CustomType.Setter
        public Builder cpu(String cpu) {
            if (cpu == null) {
              throw new MissingRequiredPropertyException("GetProductsProductMetadata", "cpu");
            }
            this.cpu = cpu;
            return this;
        }
        @CustomType.Setter
        public Builder cpuCount(Integer cpuCount) {
            if (cpuCount == null) {
              throw new MissingRequiredPropertyException("GetProductsProductMetadata", "cpuCount");
            }
            this.cpuCount = cpuCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuFrequency(Double cpuFrequency) {
            if (cpuFrequency == null) {
              throw new MissingRequiredPropertyException("GetProductsProductMetadata", "cpuFrequency");
            }
            this.cpuFrequency = cpuFrequency;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetProductsProductMetadata", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder ramInGb(Integer ramInGb) {
            if (ramInGb == null) {
              throw new MissingRequiredPropertyException("GetProductsProductMetadata", "ramInGb");
            }
            this.ramInGb = ramInGb;
            return this;
        }
        @CustomType.Setter
        public Builder storage(String storage) {
            if (storage == null) {
              throw new MissingRequiredPropertyException("GetProductsProductMetadata", "storage");
            }
            this.storage = storage;
            return this;
        }
        public GetProductsProductMetadata build() {
            final var _resultValue = new GetProductsProductMetadata();
            _resultValue.coresPerCpu = coresPerCpu;
            _resultValue.cpu = cpu;
            _resultValue.cpuCount = cpuCount;
            _resultValue.cpuFrequency = cpuFrequency;
            _resultValue.network = network;
            _resultValue.ramInGb = ramInGb;
            _resultValue.storage = storage;
            return _resultValue;
        }
    }
}
