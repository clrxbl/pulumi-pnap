// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetInvoicesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetInvoicesArgs Empty = new GetInvoicesArgs();

    /**
     * The limit of the number of results returned. The number of records returned may be smaller than the limit.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    /**
     * @return The limit of the number of results returned. The number of records returned may be smaller than the limit.
     * 
     */
    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * A user-friendly reference number assigned to the invoice.
     * 
     */
    @Import(name="number")
    private @Nullable Output<String> number;

    /**
     * @return A user-friendly reference number assigned to the invoice.
     * 
     */
    public Optional<Output<String>> number() {
        return Optional.ofNullable(this.number);
    }

    /**
     * The number of items to skip in the results.
     * 
     */
    @Import(name="offset")
    private @Nullable Output<Integer> offset;

    /**
     * @return The number of items to skip in the results.
     * 
     */
    public Optional<Output<Integer>> offset() {
        return Optional.ofNullable(this.offset);
    }

    /**
     * Minimum value to filter invoices by sent on date.
     * 
     */
    @Import(name="sentOnFrom")
    private @Nullable Output<String> sentOnFrom;

    /**
     * @return Minimum value to filter invoices by sent on date.
     * 
     */
    public Optional<Output<String>> sentOnFrom() {
        return Optional.ofNullable(this.sentOnFrom);
    }

    /**
     * Maximum value to filter invoices by sent on date.
     * 
     */
    @Import(name="sentOnTo")
    private @Nullable Output<String> sentOnTo;

    /**
     * @return Maximum value to filter invoices by sent on date.
     * 
     */
    public Optional<Output<String>> sentOnTo() {
        return Optional.ofNullable(this.sentOnTo);
    }

    /**
     * Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
     * 
     */
    @Import(name="sortDirection")
    private @Nullable Output<String> sortDirection;

    /**
     * @return Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
     * 
     */
    public Optional<Output<String>> sortDirection() {
        return Optional.ofNullable(this.sortDirection);
    }

    /**
     * If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
     * 
     */
    @Import(name="sortField")
    private @Nullable Output<String> sortField;

    /**
     * @return If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
     * 
     */
    public Optional<Output<String>> sortField() {
        return Optional.ofNullable(this.sortField);
    }

    /**
     * Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private GetInvoicesArgs() {}

    private GetInvoicesArgs(GetInvoicesArgs $) {
        this.limit = $.limit;
        this.number = $.number;
        this.offset = $.offset;
        this.sentOnFrom = $.sentOnFrom;
        this.sentOnTo = $.sentOnTo;
        this.sortDirection = $.sortDirection;
        this.sortField = $.sortField;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetInvoicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetInvoicesArgs $;

        public Builder() {
            $ = new GetInvoicesArgs();
        }

        public Builder(GetInvoicesArgs defaults) {
            $ = new GetInvoicesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limit The limit of the number of results returned. The number of records returned may be smaller than the limit.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit The limit of the number of results returned. The number of records returned may be smaller than the limit.
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param number A user-friendly reference number assigned to the invoice.
         * 
         * @return builder
         * 
         */
        public Builder number(@Nullable Output<String> number) {
            $.number = number;
            return this;
        }

        /**
         * @param number A user-friendly reference number assigned to the invoice.
         * 
         * @return builder
         * 
         */
        public Builder number(String number) {
            return number(Output.of(number));
        }

        /**
         * @param offset The number of items to skip in the results.
         * 
         * @return builder
         * 
         */
        public Builder offset(@Nullable Output<Integer> offset) {
            $.offset = offset;
            return this;
        }

        /**
         * @param offset The number of items to skip in the results.
         * 
         * @return builder
         * 
         */
        public Builder offset(Integer offset) {
            return offset(Output.of(offset));
        }

        /**
         * @param sentOnFrom Minimum value to filter invoices by sent on date.
         * 
         * @return builder
         * 
         */
        public Builder sentOnFrom(@Nullable Output<String> sentOnFrom) {
            $.sentOnFrom = sentOnFrom;
            return this;
        }

        /**
         * @param sentOnFrom Minimum value to filter invoices by sent on date.
         * 
         * @return builder
         * 
         */
        public Builder sentOnFrom(String sentOnFrom) {
            return sentOnFrom(Output.of(sentOnFrom));
        }

        /**
         * @param sentOnTo Maximum value to filter invoices by sent on date.
         * 
         * @return builder
         * 
         */
        public Builder sentOnTo(@Nullable Output<String> sentOnTo) {
            $.sentOnTo = sentOnTo;
            return this;
        }

        /**
         * @param sentOnTo Maximum value to filter invoices by sent on date.
         * 
         * @return builder
         * 
         */
        public Builder sentOnTo(String sentOnTo) {
            return sentOnTo(Output.of(sentOnTo));
        }

        /**
         * @param sortDirection Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
         * 
         * @return builder
         * 
         */
        public Builder sortDirection(@Nullable Output<String> sortDirection) {
            $.sortDirection = sortDirection;
            return this;
        }

        /**
         * @param sortDirection Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
         * 
         * @return builder
         * 
         */
        public Builder sortDirection(String sortDirection) {
            return sortDirection(Output.of(sortDirection));
        }

        /**
         * @param sortField If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
         * 
         * @return builder
         * 
         */
        public Builder sortField(@Nullable Output<String> sortField) {
            $.sortField = sortField;
            return this;
        }

        /**
         * @param sortField If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
         * 
         * @return builder
         * 
         */
        public Builder sortField(String sortField) {
            return sortField(Output.of(sortField));
        }

        /**
         * @param status Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public GetInvoicesArgs build() {
            return $;
        }
    }

}
