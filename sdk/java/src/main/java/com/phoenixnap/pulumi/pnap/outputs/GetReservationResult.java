// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetReservationResult {
    /**
     * @return The resource ID currently being assigned to reservation.
     * 
     */
    private String assignedResourceId;
    /**
     * @return A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).
     * 
     */
    private Boolean autoRenew;
    /**
     * @return The point in time (in UTC) when the reservation ends.
     * 
     */
    private String endDateTime;
    /**
     * @return The reservation identifier.
     * 
     */
    private String id;
    /**
     * @return Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.
     * 
     */
    private String initialInvoiceModel;
    /**
     * @return The point in time (in UTC) when the reservation was renewed last.
     * 
     */
    private String lastRenewalDateTime;
    /**
     * @return The location code.
     * 
     */
    private String location;
    /**
     * @return Next billing date for reservation.
     * 
     */
    private String nextBillingDate;
    /**
     * @return The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.
     * 
     */
    private String nextRenewalDateTime;
    /**
     * @return Reservation price.
     * 
     */
    private Double price;
    /**
     * @return The unit to which the price applies.
     * 
     */
    private String priceUnit;
    /**
     * @return The product category.
     * 
     */
    private String productCategory;
    /**
     * @return The code identifying the product. This code has significance across all locations.
     * 
     */
    private String productCode;
    /**
     * @return The reservation model.
     * 
     */
    private String reservationModel;
    /**
     * @return The SKU applied to this reservation.
     * 
     */
    private String sku;
    /**
     * @return The point in time (in UTC) when the reservation starts.
     * 
     */
    private String startDateTime;

    private GetReservationResult() {}
    /**
     * @return The resource ID currently being assigned to reservation.
     * 
     */
    public String assignedResourceId() {
        return this.assignedResourceId;
    }
    /**
     * @return A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).
     * 
     */
    public Boolean autoRenew() {
        return this.autoRenew;
    }
    /**
     * @return The point in time (in UTC) when the reservation ends.
     * 
     */
    public String endDateTime() {
        return this.endDateTime;
    }
    /**
     * @return The reservation identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.
     * 
     */
    public String initialInvoiceModel() {
        return this.initialInvoiceModel;
    }
    /**
     * @return The point in time (in UTC) when the reservation was renewed last.
     * 
     */
    public String lastRenewalDateTime() {
        return this.lastRenewalDateTime;
    }
    /**
     * @return The location code.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Next billing date for reservation.
     * 
     */
    public String nextBillingDate() {
        return this.nextBillingDate;
    }
    /**
     * @return The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.
     * 
     */
    public String nextRenewalDateTime() {
        return this.nextRenewalDateTime;
    }
    /**
     * @return Reservation price.
     * 
     */
    public Double price() {
        return this.price;
    }
    /**
     * @return The unit to which the price applies.
     * 
     */
    public String priceUnit() {
        return this.priceUnit;
    }
    /**
     * @return The product category.
     * 
     */
    public String productCategory() {
        return this.productCategory;
    }
    /**
     * @return The code identifying the product. This code has significance across all locations.
     * 
     */
    public String productCode() {
        return this.productCode;
    }
    /**
     * @return The reservation model.
     * 
     */
    public String reservationModel() {
        return this.reservationModel;
    }
    /**
     * @return The SKU applied to this reservation.
     * 
     */
    public String sku() {
        return this.sku;
    }
    /**
     * @return The point in time (in UTC) when the reservation starts.
     * 
     */
    public String startDateTime() {
        return this.startDateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReservationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assignedResourceId;
        private Boolean autoRenew;
        private String endDateTime;
        private String id;
        private String initialInvoiceModel;
        private String lastRenewalDateTime;
        private String location;
        private String nextBillingDate;
        private String nextRenewalDateTime;
        private Double price;
        private String priceUnit;
        private String productCategory;
        private String productCode;
        private String reservationModel;
        private String sku;
        private String startDateTime;
        public Builder() {}
        public Builder(GetReservationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignedResourceId = defaults.assignedResourceId;
    	      this.autoRenew = defaults.autoRenew;
    	      this.endDateTime = defaults.endDateTime;
    	      this.id = defaults.id;
    	      this.initialInvoiceModel = defaults.initialInvoiceModel;
    	      this.lastRenewalDateTime = defaults.lastRenewalDateTime;
    	      this.location = defaults.location;
    	      this.nextBillingDate = defaults.nextBillingDate;
    	      this.nextRenewalDateTime = defaults.nextRenewalDateTime;
    	      this.price = defaults.price;
    	      this.priceUnit = defaults.priceUnit;
    	      this.productCategory = defaults.productCategory;
    	      this.productCode = defaults.productCode;
    	      this.reservationModel = defaults.reservationModel;
    	      this.sku = defaults.sku;
    	      this.startDateTime = defaults.startDateTime;
        }

        @CustomType.Setter
        public Builder assignedResourceId(String assignedResourceId) {
            if (assignedResourceId == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "assignedResourceId");
            }
            this.assignedResourceId = assignedResourceId;
            return this;
        }
        @CustomType.Setter
        public Builder autoRenew(Boolean autoRenew) {
            if (autoRenew == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "autoRenew");
            }
            this.autoRenew = autoRenew;
            return this;
        }
        @CustomType.Setter
        public Builder endDateTime(String endDateTime) {
            if (endDateTime == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "endDateTime");
            }
            this.endDateTime = endDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initialInvoiceModel(String initialInvoiceModel) {
            if (initialInvoiceModel == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "initialInvoiceModel");
            }
            this.initialInvoiceModel = initialInvoiceModel;
            return this;
        }
        @CustomType.Setter
        public Builder lastRenewalDateTime(String lastRenewalDateTime) {
            if (lastRenewalDateTime == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "lastRenewalDateTime");
            }
            this.lastRenewalDateTime = lastRenewalDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder nextBillingDate(String nextBillingDate) {
            if (nextBillingDate == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "nextBillingDate");
            }
            this.nextBillingDate = nextBillingDate;
            return this;
        }
        @CustomType.Setter
        public Builder nextRenewalDateTime(String nextRenewalDateTime) {
            if (nextRenewalDateTime == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "nextRenewalDateTime");
            }
            this.nextRenewalDateTime = nextRenewalDateTime;
            return this;
        }
        @CustomType.Setter
        public Builder price(Double price) {
            if (price == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "price");
            }
            this.price = price;
            return this;
        }
        @CustomType.Setter
        public Builder priceUnit(String priceUnit) {
            if (priceUnit == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "priceUnit");
            }
            this.priceUnit = priceUnit;
            return this;
        }
        @CustomType.Setter
        public Builder productCategory(String productCategory) {
            if (productCategory == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "productCategory");
            }
            this.productCategory = productCategory;
            return this;
        }
        @CustomType.Setter
        public Builder productCode(String productCode) {
            if (productCode == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "productCode");
            }
            this.productCode = productCode;
            return this;
        }
        @CustomType.Setter
        public Builder reservationModel(String reservationModel) {
            if (reservationModel == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "reservationModel");
            }
            this.reservationModel = reservationModel;
            return this;
        }
        @CustomType.Setter
        public Builder sku(String sku) {
            if (sku == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "sku");
            }
            this.sku = sku;
            return this;
        }
        @CustomType.Setter
        public Builder startDateTime(String startDateTime) {
            if (startDateTime == null) {
              throw new MissingRequiredPropertyException("GetReservationResult", "startDateTime");
            }
            this.startDateTime = startDateTime;
            return this;
        }
        public GetReservationResult build() {
            final var _resultValue = new GetReservationResult();
            _resultValue.assignedResourceId = assignedResourceId;
            _resultValue.autoRenew = autoRenew;
            _resultValue.endDateTime = endDateTime;
            _resultValue.id = id;
            _resultValue.initialInvoiceModel = initialInvoiceModel;
            _resultValue.lastRenewalDateTime = lastRenewalDateTime;
            _resultValue.location = location;
            _resultValue.nextBillingDate = nextBillingDate;
            _resultValue.nextRenewalDateTime = nextRenewalDateTime;
            _resultValue.price = price;
            _resultValue.priceUnit = priceUnit;
            _resultValue.productCategory = productCategory;
            _resultValue.productCode = productCode;
            _resultValue.reservationModel = reservationModel;
            _resultValue.sku = sku;
            _resultValue.startDateTime = startDateTime;
            return _resultValue;
        }
    }
}
