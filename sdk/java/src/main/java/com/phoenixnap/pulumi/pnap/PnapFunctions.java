// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap;

import com.phoenixnap.pulumi.pnap.Utilities;
import com.phoenixnap.pulumi.pnap.inputs.GetEventsArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetEventsPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetInvoicesArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetInvoicesPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetIpBlockArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetIpBlockPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetLocationsArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetLocationsPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetPrivateNetworkArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetPrivateNetworkPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetProductAvailabilityArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetProductAvailabilityPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetProductsArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetProductsPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetPublicNetworkArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetPublicNetworkPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetQuotaArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetQuotaPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetRancherClusterArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetRancherClusterPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetReservationArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetReservationPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetServerArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetServerPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetSshKeyArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetSshKeyPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetStorageNetworkArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetStorageNetworkPlainArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetTagArgs;
import com.phoenixnap.pulumi.pnap.inputs.GetTagPlainArgs;
import com.phoenixnap.pulumi.pnap.outputs.GetEventsResult;
import com.phoenixnap.pulumi.pnap.outputs.GetInvoicesResult;
import com.phoenixnap.pulumi.pnap.outputs.GetIpBlockResult;
import com.phoenixnap.pulumi.pnap.outputs.GetLocationsResult;
import com.phoenixnap.pulumi.pnap.outputs.GetPrivateNetworkResult;
import com.phoenixnap.pulumi.pnap.outputs.GetProductAvailabilityResult;
import com.phoenixnap.pulumi.pnap.outputs.GetProductsResult;
import com.phoenixnap.pulumi.pnap.outputs.GetPublicNetworkResult;
import com.phoenixnap.pulumi.pnap.outputs.GetQuotaResult;
import com.phoenixnap.pulumi.pnap.outputs.GetRancherClusterResult;
import com.phoenixnap.pulumi.pnap.outputs.GetReservationResult;
import com.phoenixnap.pulumi.pnap.outputs.GetServerResult;
import com.phoenixnap.pulumi.pnap.outputs.GetSshKeyResult;
import com.phoenixnap.pulumi.pnap.outputs.GetStorageNetworkResult;
import com.phoenixnap.pulumi.pnap.outputs.GetTagResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class PnapFunctions {
    /**
     * Provides a phoenixNAP events datasource. This can be used to read event logs.
     * 
     * ## Example Usage
     * 
     * Fetch event logs by name and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetEventsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getEvents(GetEventsArgs.builder()
     *             .events(GetEventsEventArgs.builder()
     *                 .name(&#34;API.SshKeysUpdate&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;logs&#34;, test.applyValue(getEventsResult -&gt; getEventsResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetEventsResult> getEvents(GetEventsArgs args) {
        return getEvents(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP events datasource. This can be used to read event logs.
     * 
     * ## Example Usage
     * 
     * Fetch event logs by name and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetEventsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getEvents(GetEventsArgs.builder()
     *             .events(GetEventsEventArgs.builder()
     *                 .name(&#34;API.SshKeysUpdate&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;logs&#34;, test.applyValue(getEventsResult -&gt; getEventsResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetEventsResult> getEventsPlain(GetEventsPlainArgs args) {
        return getEventsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP events datasource. This can be used to read event logs.
     * 
     * ## Example Usage
     * 
     * Fetch event logs by name and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetEventsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getEvents(GetEventsArgs.builder()
     *             .events(GetEventsEventArgs.builder()
     *                 .name(&#34;API.SshKeysUpdate&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;logs&#34;, test.applyValue(getEventsResult -&gt; getEventsResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetEventsResult> getEvents(GetEventsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getEvents:getEvents", TypeShape.of(GetEventsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP events datasource. This can be used to read event logs.
     * 
     * ## Example Usage
     * 
     * Fetch event logs by name and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetEventsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getEvents(GetEventsArgs.builder()
     *             .events(GetEventsEventArgs.builder()
     *                 .name(&#34;API.SshKeysUpdate&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;logs&#34;, test.applyValue(getEventsResult -&gt; getEventsResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetEventsResult> getEventsPlain(GetEventsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getEvents:getEvents", TypeShape.of(GetEventsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP invoices datasource. This can be used to read invoices.
     * 
     * ## Example Usage
     * 
     * Fetch invoices by status and date sent and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetInvoicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getInvoices(GetInvoicesArgs.builder()
     *             .status(&#34;PAID&#34;)
     *             .sentOnFrom(&#34;2020-04-13T00:00:00.000Z&#34;)
     *             .sentOnTo(&#34;2022-04-13T00:00:00.000Z&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;invoices&#34;, query_C.paginatedInvoices());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInvoicesResult> getInvoices() {
        return getInvoices(GetInvoicesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP invoices datasource. This can be used to read invoices.
     * 
     * ## Example Usage
     * 
     * Fetch invoices by status and date sent and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetInvoicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getInvoices(GetInvoicesArgs.builder()
     *             .status(&#34;PAID&#34;)
     *             .sentOnFrom(&#34;2020-04-13T00:00:00.000Z&#34;)
     *             .sentOnTo(&#34;2022-04-13T00:00:00.000Z&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;invoices&#34;, query_C.paginatedInvoices());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInvoicesResult> getInvoicesPlain() {
        return getInvoicesPlain(GetInvoicesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP invoices datasource. This can be used to read invoices.
     * 
     * ## Example Usage
     * 
     * Fetch invoices by status and date sent and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetInvoicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getInvoices(GetInvoicesArgs.builder()
     *             .status(&#34;PAID&#34;)
     *             .sentOnFrom(&#34;2020-04-13T00:00:00.000Z&#34;)
     *             .sentOnTo(&#34;2022-04-13T00:00:00.000Z&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;invoices&#34;, query_C.paginatedInvoices());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInvoicesResult> getInvoices(GetInvoicesArgs args) {
        return getInvoices(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP invoices datasource. This can be used to read invoices.
     * 
     * ## Example Usage
     * 
     * Fetch invoices by status and date sent and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetInvoicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getInvoices(GetInvoicesArgs.builder()
     *             .status(&#34;PAID&#34;)
     *             .sentOnFrom(&#34;2020-04-13T00:00:00.000Z&#34;)
     *             .sentOnTo(&#34;2022-04-13T00:00:00.000Z&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;invoices&#34;, query_C.paginatedInvoices());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInvoicesResult> getInvoicesPlain(GetInvoicesPlainArgs args) {
        return getInvoicesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP invoices datasource. This can be used to read invoices.
     * 
     * ## Example Usage
     * 
     * Fetch invoices by status and date sent and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetInvoicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getInvoices(GetInvoicesArgs.builder()
     *             .status(&#34;PAID&#34;)
     *             .sentOnFrom(&#34;2020-04-13T00:00:00.000Z&#34;)
     *             .sentOnTo(&#34;2022-04-13T00:00:00.000Z&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;invoices&#34;, query_C.paginatedInvoices());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetInvoicesResult> getInvoices(GetInvoicesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getInvoices:getInvoices", TypeShape.of(GetInvoicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP invoices datasource. This can be used to read invoices.
     * 
     * ## Example Usage
     * 
     * Fetch invoices by status and date sent and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetInvoicesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getInvoices(GetInvoicesArgs.builder()
     *             .status(&#34;PAID&#34;)
     *             .sentOnFrom(&#34;2020-04-13T00:00:00.000Z&#34;)
     *             .sentOnTo(&#34;2022-04-13T00:00:00.000Z&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;invoices&#34;, query_C.paginatedInvoices());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetInvoicesResult> getInvoicesPlain(GetInvoicesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getInvoices:getInvoices", TypeShape.of(GetInvoicesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP IP Block datasource. This can be used to read IP Blocks.
     * 
     * ## Example Usage
     * 
     * Fetch an IP Block by CIDR and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetIpBlockArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getIpBlock(GetIpBlockArgs.builder()
     *             .cidr(&#34;1.1.1.0/31&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ip-block&#34;, test.applyValue(getIpBlockResult -&gt; getIpBlockResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIpBlockResult> getIpBlock() {
        return getIpBlock(GetIpBlockArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP IP Block datasource. This can be used to read IP Blocks.
     * 
     * ## Example Usage
     * 
     * Fetch an IP Block by CIDR and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetIpBlockArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getIpBlock(GetIpBlockArgs.builder()
     *             .cidr(&#34;1.1.1.0/31&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ip-block&#34;, test.applyValue(getIpBlockResult -&gt; getIpBlockResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIpBlockResult> getIpBlockPlain() {
        return getIpBlockPlain(GetIpBlockPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP IP Block datasource. This can be used to read IP Blocks.
     * 
     * ## Example Usage
     * 
     * Fetch an IP Block by CIDR and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetIpBlockArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getIpBlock(GetIpBlockArgs.builder()
     *             .cidr(&#34;1.1.1.0/31&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ip-block&#34;, test.applyValue(getIpBlockResult -&gt; getIpBlockResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIpBlockResult> getIpBlock(GetIpBlockArgs args) {
        return getIpBlock(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP IP Block datasource. This can be used to read IP Blocks.
     * 
     * ## Example Usage
     * 
     * Fetch an IP Block by CIDR and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetIpBlockArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getIpBlock(GetIpBlockArgs.builder()
     *             .cidr(&#34;1.1.1.0/31&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ip-block&#34;, test.applyValue(getIpBlockResult -&gt; getIpBlockResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIpBlockResult> getIpBlockPlain(GetIpBlockPlainArgs args) {
        return getIpBlockPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP IP Block datasource. This can be used to read IP Blocks.
     * 
     * ## Example Usage
     * 
     * Fetch an IP Block by CIDR and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetIpBlockArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getIpBlock(GetIpBlockArgs.builder()
     *             .cidr(&#34;1.1.1.0/31&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ip-block&#34;, test.applyValue(getIpBlockResult -&gt; getIpBlockResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetIpBlockResult> getIpBlock(GetIpBlockArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getIpBlock:getIpBlock", TypeShape.of(GetIpBlockResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP IP Block datasource. This can be used to read IP Blocks.
     * 
     * ## Example Usage
     * 
     * Fetch an IP Block by CIDR and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetIpBlockArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getIpBlock(GetIpBlockArgs.builder()
     *             .cidr(&#34;1.1.1.0/31&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;ip-block&#34;, test.applyValue(getIpBlockResult -&gt; getIpBlockResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetIpBlockResult> getIpBlockPlain(GetIpBlockPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getIpBlock:getIpBlock", TypeShape.of(GetIpBlockResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.
     * 
     * ## Example Usage
     * 
     * Fetch locations by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getLocations(GetLocationsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;locations&#34;, query_C.locations());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetLocationsResult> getLocations() {
        return getLocations(GetLocationsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.
     * 
     * ## Example Usage
     * 
     * Fetch locations by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getLocations(GetLocationsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;locations&#34;, query_C.locations());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain() {
        return getLocationsPlain(GetLocationsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.
     * 
     * ## Example Usage
     * 
     * Fetch locations by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getLocations(GetLocationsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;locations&#34;, query_C.locations());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetLocationsResult> getLocations(GetLocationsArgs args) {
        return getLocations(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.
     * 
     * ## Example Usage
     * 
     * Fetch locations by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getLocations(GetLocationsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;locations&#34;, query_C.locations());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain(GetLocationsPlainArgs args) {
        return getLocationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.
     * 
     * ## Example Usage
     * 
     * Fetch locations by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getLocations(GetLocationsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;locations&#34;, query_C.locations());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetLocationsResult> getLocations(GetLocationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getLocations:getLocations", TypeShape.of(GetLocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.
     * 
     * ## Example Usage
     * 
     * Fetch locations by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetLocationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-C = PnapFunctions.getLocations(GetLocationsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;locations&#34;, query_C.locations());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain(GetLocationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getLocations:getLocations", TypeShape.of(GetLocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Private Network datasource. This can be used to read private networks.
     * 
     * ## Example Usage
     * 
     * Fetch a private network by name and show it&#39;s servers
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPrivateNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test-Network-44 = PnapFunctions.getPrivateNetwork(GetPrivateNetworkArgs.builder()
     *             .name(&#34;qqq&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;servers&#34;, test_Network_44.servers());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPrivateNetworkResult> getPrivateNetwork() {
        return getPrivateNetwork(GetPrivateNetworkArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Private Network datasource. This can be used to read private networks.
     * 
     * ## Example Usage
     * 
     * Fetch a private network by name and show it&#39;s servers
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPrivateNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test-Network-44 = PnapFunctions.getPrivateNetwork(GetPrivateNetworkArgs.builder()
     *             .name(&#34;qqq&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;servers&#34;, test_Network_44.servers());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPrivateNetworkResult> getPrivateNetworkPlain() {
        return getPrivateNetworkPlain(GetPrivateNetworkPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Private Network datasource. This can be used to read private networks.
     * 
     * ## Example Usage
     * 
     * Fetch a private network by name and show it&#39;s servers
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPrivateNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test-Network-44 = PnapFunctions.getPrivateNetwork(GetPrivateNetworkArgs.builder()
     *             .name(&#34;qqq&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;servers&#34;, test_Network_44.servers());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPrivateNetworkResult> getPrivateNetwork(GetPrivateNetworkArgs args) {
        return getPrivateNetwork(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Private Network datasource. This can be used to read private networks.
     * 
     * ## Example Usage
     * 
     * Fetch a private network by name and show it&#39;s servers
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPrivateNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test-Network-44 = PnapFunctions.getPrivateNetwork(GetPrivateNetworkArgs.builder()
     *             .name(&#34;qqq&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;servers&#34;, test_Network_44.servers());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPrivateNetworkResult> getPrivateNetworkPlain(GetPrivateNetworkPlainArgs args) {
        return getPrivateNetworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Private Network datasource. This can be used to read private networks.
     * 
     * ## Example Usage
     * 
     * Fetch a private network by name and show it&#39;s servers
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPrivateNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test-Network-44 = PnapFunctions.getPrivateNetwork(GetPrivateNetworkArgs.builder()
     *             .name(&#34;qqq&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;servers&#34;, test_Network_44.servers());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPrivateNetworkResult> getPrivateNetwork(GetPrivateNetworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getPrivateNetwork:getPrivateNetwork", TypeShape.of(GetPrivateNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Private Network datasource. This can be used to read private networks.
     * 
     * ## Example Usage
     * 
     * Fetch a private network by name and show it&#39;s servers
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPrivateNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test-Network-44 = PnapFunctions.getPrivateNetwork(GetPrivateNetworkArgs.builder()
     *             .name(&#34;qqq&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;servers&#34;, test_Network_44.servers());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPrivateNetworkResult> getPrivateNetworkPlain(GetPrivateNetworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getPrivateNetwork:getPrivateNetwork", TypeShape.of(GetPrivateNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.
     * 
     * ## Example Usage
     * 
     * Fetch product availabilities by product category, product codes and locations.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductAvailabilityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-1 = PnapFunctions.getProductAvailability(GetProductAvailabilityArgs.builder()
     *             .productCategories(&#34;SERVER&#34;)
     *             .productCodes(            
     *                 &#34;s1.c1.small&#34;,
     *                 &#34;s1.c1.medium&#34;)
     *             .locations(            
     *                 &#34;PHX&#34;,
     *                 &#34;ASH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;availabilities&#34;, query_1.productAvailabilities());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProductAvailabilityResult> getProductAvailability() {
        return getProductAvailability(GetProductAvailabilityArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.
     * 
     * ## Example Usage
     * 
     * Fetch product availabilities by product category, product codes and locations.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductAvailabilityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-1 = PnapFunctions.getProductAvailability(GetProductAvailabilityArgs.builder()
     *             .productCategories(&#34;SERVER&#34;)
     *             .productCodes(            
     *                 &#34;s1.c1.small&#34;,
     *                 &#34;s1.c1.medium&#34;)
     *             .locations(            
     *                 &#34;PHX&#34;,
     *                 &#34;ASH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;availabilities&#34;, query_1.productAvailabilities());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProductAvailabilityResult> getProductAvailabilityPlain() {
        return getProductAvailabilityPlain(GetProductAvailabilityPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.
     * 
     * ## Example Usage
     * 
     * Fetch product availabilities by product category, product codes and locations.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductAvailabilityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-1 = PnapFunctions.getProductAvailability(GetProductAvailabilityArgs.builder()
     *             .productCategories(&#34;SERVER&#34;)
     *             .productCodes(            
     *                 &#34;s1.c1.small&#34;,
     *                 &#34;s1.c1.medium&#34;)
     *             .locations(            
     *                 &#34;PHX&#34;,
     *                 &#34;ASH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;availabilities&#34;, query_1.productAvailabilities());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProductAvailabilityResult> getProductAvailability(GetProductAvailabilityArgs args) {
        return getProductAvailability(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.
     * 
     * ## Example Usage
     * 
     * Fetch product availabilities by product category, product codes and locations.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductAvailabilityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-1 = PnapFunctions.getProductAvailability(GetProductAvailabilityArgs.builder()
     *             .productCategories(&#34;SERVER&#34;)
     *             .productCodes(            
     *                 &#34;s1.c1.small&#34;,
     *                 &#34;s1.c1.medium&#34;)
     *             .locations(            
     *                 &#34;PHX&#34;,
     *                 &#34;ASH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;availabilities&#34;, query_1.productAvailabilities());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProductAvailabilityResult> getProductAvailabilityPlain(GetProductAvailabilityPlainArgs args) {
        return getProductAvailabilityPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.
     * 
     * ## Example Usage
     * 
     * Fetch product availabilities by product category, product codes and locations.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductAvailabilityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-1 = PnapFunctions.getProductAvailability(GetProductAvailabilityArgs.builder()
     *             .productCategories(&#34;SERVER&#34;)
     *             .productCodes(            
     *                 &#34;s1.c1.small&#34;,
     *                 &#34;s1.c1.medium&#34;)
     *             .locations(            
     *                 &#34;PHX&#34;,
     *                 &#34;ASH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;availabilities&#34;, query_1.productAvailabilities());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProductAvailabilityResult> getProductAvailability(GetProductAvailabilityArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getProductAvailability:getProductAvailability", TypeShape.of(GetProductAvailabilityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.
     * 
     * ## Example Usage
     * 
     * Fetch product availabilities by product category, product codes and locations.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductAvailabilityArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-1 = PnapFunctions.getProductAvailability(GetProductAvailabilityArgs.builder()
     *             .productCategories(&#34;SERVER&#34;)
     *             .productCodes(            
     *                 &#34;s1.c1.small&#34;,
     *                 &#34;s1.c1.medium&#34;)
     *             .locations(            
     *                 &#34;PHX&#34;,
     *                 &#34;ASH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;availabilities&#34;, query_1.productAvailabilities());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProductAvailabilityResult> getProductAvailabilityPlain(GetProductAvailabilityPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getProductAvailability:getProductAvailability", TypeShape.of(GetProductAvailabilityResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP products datasource. This can be used to read products.
     * 
     * ## Example Usage
     * 
     * Fetch products by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-B = PnapFunctions.getProducts(GetProductsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;products&#34;, query_B.products());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProductsResult> getProducts() {
        return getProducts(GetProductsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP products datasource. This can be used to read products.
     * 
     * ## Example Usage
     * 
     * Fetch products by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-B = PnapFunctions.getProducts(GetProductsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;products&#34;, query_B.products());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProductsResult> getProductsPlain() {
        return getProductsPlain(GetProductsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP products datasource. This can be used to read products.
     * 
     * ## Example Usage
     * 
     * Fetch products by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-B = PnapFunctions.getProducts(GetProductsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;products&#34;, query_B.products());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProductsResult> getProducts(GetProductsArgs args) {
        return getProducts(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP products datasource. This can be used to read products.
     * 
     * ## Example Usage
     * 
     * Fetch products by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-B = PnapFunctions.getProducts(GetProductsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;products&#34;, query_B.products());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProductsResult> getProductsPlain(GetProductsPlainArgs args) {
        return getProductsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP products datasource. This can be used to read products.
     * 
     * ## Example Usage
     * 
     * Fetch products by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-B = PnapFunctions.getProducts(GetProductsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;products&#34;, query_B.products());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProductsResult> getProducts(GetProductsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getProducts:getProducts", TypeShape.of(GetProductsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP products datasource. This can be used to read products.
     * 
     * ## Example Usage
     * 
     * Fetch products by product category and show their details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetProductsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var query-B = PnapFunctions.getProducts(GetProductsArgs.builder()
     *             .productCategory(&#34;BANDWIDTH&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;products&#34;, query_B.products());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProductsResult> getProductsPlain(GetProductsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getProducts:getProducts", TypeShape.of(GetProductsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Public Network datasource. This can be used to read public networks.
     * 
     * ## Example Usage
     * 
     * Fetch a public network by name and show it&#39;s IP Blocks
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPublicNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var public-Network-1 = PnapFunctions.getPublicNetwork(GetPublicNetworkArgs.builder()
     *             .name(&#34;PubNet1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;iP-Blocks&#34;, public_Network_1.ipBlocks());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPublicNetworkResult> getPublicNetwork() {
        return getPublicNetwork(GetPublicNetworkArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Public Network datasource. This can be used to read public networks.
     * 
     * ## Example Usage
     * 
     * Fetch a public network by name and show it&#39;s IP Blocks
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPublicNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var public-Network-1 = PnapFunctions.getPublicNetwork(GetPublicNetworkArgs.builder()
     *             .name(&#34;PubNet1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;iP-Blocks&#34;, public_Network_1.ipBlocks());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPublicNetworkResult> getPublicNetworkPlain() {
        return getPublicNetworkPlain(GetPublicNetworkPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Public Network datasource. This can be used to read public networks.
     * 
     * ## Example Usage
     * 
     * Fetch a public network by name and show it&#39;s IP Blocks
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPublicNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var public-Network-1 = PnapFunctions.getPublicNetwork(GetPublicNetworkArgs.builder()
     *             .name(&#34;PubNet1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;iP-Blocks&#34;, public_Network_1.ipBlocks());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPublicNetworkResult> getPublicNetwork(GetPublicNetworkArgs args) {
        return getPublicNetwork(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Public Network datasource. This can be used to read public networks.
     * 
     * ## Example Usage
     * 
     * Fetch a public network by name and show it&#39;s IP Blocks
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPublicNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var public-Network-1 = PnapFunctions.getPublicNetwork(GetPublicNetworkArgs.builder()
     *             .name(&#34;PubNet1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;iP-Blocks&#34;, public_Network_1.ipBlocks());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPublicNetworkResult> getPublicNetworkPlain(GetPublicNetworkPlainArgs args) {
        return getPublicNetworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Public Network datasource. This can be used to read public networks.
     * 
     * ## Example Usage
     * 
     * Fetch a public network by name and show it&#39;s IP Blocks
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPublicNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var public-Network-1 = PnapFunctions.getPublicNetwork(GetPublicNetworkArgs.builder()
     *             .name(&#34;PubNet1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;iP-Blocks&#34;, public_Network_1.ipBlocks());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPublicNetworkResult> getPublicNetwork(GetPublicNetworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getPublicNetwork:getPublicNetwork", TypeShape.of(GetPublicNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Public Network datasource. This can be used to read public networks.
     * 
     * ## Example Usage
     * 
     * Fetch a public network by name and show it&#39;s IP Blocks
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetPublicNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var public-Network-1 = PnapFunctions.getPublicNetwork(GetPublicNetworkArgs.builder()
     *             .name(&#34;PubNet1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;iP-Blocks&#34;, public_Network_1.ipBlocks());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPublicNetworkResult> getPublicNetworkPlain(GetPublicNetworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getPublicNetwork:getPublicNetwork", TypeShape.of(GetPublicNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Quota datasource. This can be used to read Quotas.
     * 
     * ## Example Usage
     * 
     * Fetch a Quota by name and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetQuotaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getQuota(GetQuotaArgs.builder()
     *             .name(&#34;Public IPs&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;quota&#34;, test.applyValue(getQuotaResult -&gt; getQuotaResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetQuotaResult> getQuota() {
        return getQuota(GetQuotaArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Quota datasource. This can be used to read Quotas.
     * 
     * ## Example Usage
     * 
     * Fetch a Quota by name and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetQuotaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getQuota(GetQuotaArgs.builder()
     *             .name(&#34;Public IPs&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;quota&#34;, test.applyValue(getQuotaResult -&gt; getQuotaResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetQuotaResult> getQuotaPlain() {
        return getQuotaPlain(GetQuotaPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Quota datasource. This can be used to read Quotas.
     * 
     * ## Example Usage
     * 
     * Fetch a Quota by name and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetQuotaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getQuota(GetQuotaArgs.builder()
     *             .name(&#34;Public IPs&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;quota&#34;, test.applyValue(getQuotaResult -&gt; getQuotaResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetQuotaResult> getQuota(GetQuotaArgs args) {
        return getQuota(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Quota datasource. This can be used to read Quotas.
     * 
     * ## Example Usage
     * 
     * Fetch a Quota by name and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetQuotaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getQuota(GetQuotaArgs.builder()
     *             .name(&#34;Public IPs&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;quota&#34;, test.applyValue(getQuotaResult -&gt; getQuotaResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetQuotaResult> getQuotaPlain(GetQuotaPlainArgs args) {
        return getQuotaPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Quota datasource. This can be used to read Quotas.
     * 
     * ## Example Usage
     * 
     * Fetch a Quota by name and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetQuotaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getQuota(GetQuotaArgs.builder()
     *             .name(&#34;Public IPs&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;quota&#34;, test.applyValue(getQuotaResult -&gt; getQuotaResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetQuotaResult> getQuota(GetQuotaArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getQuota:getQuota", TypeShape.of(GetQuotaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Quota datasource. This can be used to read Quotas.
     * 
     * ## Example Usage
     * 
     * Fetch a Quota by name and show it&#39;s details in alphabetical order
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetQuotaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getQuota(GetQuotaArgs.builder()
     *             .name(&#34;Public IPs&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;quota&#34;, test.applyValue(getQuotaResult -&gt; getQuotaResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetQuotaResult> getQuotaPlain(GetQuotaPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getQuota:getQuota", TypeShape.of(GetQuotaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
     * 
     * ## Example Usage
     * 
     * Fetch a Rancher Cluster by ID or name and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetRancherClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getRancherCluster(GetRancherClusterArgs.builder()
     *             .id(&#34;123&#34;)
     *             .name(&#34;Rancher-Deployment-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;rancher-cluster&#34;, test.applyValue(getRancherClusterResult -&gt; getRancherClusterResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRancherClusterResult> getRancherCluster() {
        return getRancherCluster(GetRancherClusterArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
     * 
     * ## Example Usage
     * 
     * Fetch a Rancher Cluster by ID or name and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetRancherClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getRancherCluster(GetRancherClusterArgs.builder()
     *             .id(&#34;123&#34;)
     *             .name(&#34;Rancher-Deployment-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;rancher-cluster&#34;, test.applyValue(getRancherClusterResult -&gt; getRancherClusterResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRancherClusterResult> getRancherClusterPlain() {
        return getRancherClusterPlain(GetRancherClusterPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
     * 
     * ## Example Usage
     * 
     * Fetch a Rancher Cluster by ID or name and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetRancherClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getRancherCluster(GetRancherClusterArgs.builder()
     *             .id(&#34;123&#34;)
     *             .name(&#34;Rancher-Deployment-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;rancher-cluster&#34;, test.applyValue(getRancherClusterResult -&gt; getRancherClusterResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRancherClusterResult> getRancherCluster(GetRancherClusterArgs args) {
        return getRancherCluster(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
     * 
     * ## Example Usage
     * 
     * Fetch a Rancher Cluster by ID or name and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetRancherClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getRancherCluster(GetRancherClusterArgs.builder()
     *             .id(&#34;123&#34;)
     *             .name(&#34;Rancher-Deployment-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;rancher-cluster&#34;, test.applyValue(getRancherClusterResult -&gt; getRancherClusterResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRancherClusterResult> getRancherClusterPlain(GetRancherClusterPlainArgs args) {
        return getRancherClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
     * 
     * ## Example Usage
     * 
     * Fetch a Rancher Cluster by ID or name and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetRancherClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getRancherCluster(GetRancherClusterArgs.builder()
     *             .id(&#34;123&#34;)
     *             .name(&#34;Rancher-Deployment-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;rancher-cluster&#34;, test.applyValue(getRancherClusterResult -&gt; getRancherClusterResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRancherClusterResult> getRancherCluster(GetRancherClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getRancherCluster:getRancherCluster", TypeShape.of(GetRancherClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
     * 
     * ## Example Usage
     * 
     * Fetch a Rancher Cluster by ID or name and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetRancherClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getRancherCluster(GetRancherClusterArgs.builder()
     *             .id(&#34;123&#34;)
     *             .name(&#34;Rancher-Deployment-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;rancher-cluster&#34;, test.applyValue(getRancherClusterResult -&gt; getRancherClusterResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRancherClusterResult> getRancherClusterPlain(GetRancherClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getRancherCluster:getRancherCluster", TypeShape.of(GetRancherClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP reservation datasource. This can be used to read reservation details.
     * 
     * ## Example Usage
     * 
     * Fetch a reservation by ID or SKU and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getReservation(GetReservationArgs.builder()
     *             .id(&#34;e6afba51-7de8-4080-83ab-0f915570659c&#34;)
     *             .sku(&#34;XXX-XXX-XXX&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;reservation&#34;, test.applyValue(getReservationResult -&gt; getReservationResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReservationResult> getReservation() {
        return getReservation(GetReservationArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP reservation datasource. This can be used to read reservation details.
     * 
     * ## Example Usage
     * 
     * Fetch a reservation by ID or SKU and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getReservation(GetReservationArgs.builder()
     *             .id(&#34;e6afba51-7de8-4080-83ab-0f915570659c&#34;)
     *             .sku(&#34;XXX-XXX-XXX&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;reservation&#34;, test.applyValue(getReservationResult -&gt; getReservationResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReservationResult> getReservationPlain() {
        return getReservationPlain(GetReservationPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP reservation datasource. This can be used to read reservation details.
     * 
     * ## Example Usage
     * 
     * Fetch a reservation by ID or SKU and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getReservation(GetReservationArgs.builder()
     *             .id(&#34;e6afba51-7de8-4080-83ab-0f915570659c&#34;)
     *             .sku(&#34;XXX-XXX-XXX&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;reservation&#34;, test.applyValue(getReservationResult -&gt; getReservationResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReservationResult> getReservation(GetReservationArgs args) {
        return getReservation(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP reservation datasource. This can be used to read reservation details.
     * 
     * ## Example Usage
     * 
     * Fetch a reservation by ID or SKU and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getReservation(GetReservationArgs.builder()
     *             .id(&#34;e6afba51-7de8-4080-83ab-0f915570659c&#34;)
     *             .sku(&#34;XXX-XXX-XXX&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;reservation&#34;, test.applyValue(getReservationResult -&gt; getReservationResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReservationResult> getReservationPlain(GetReservationPlainArgs args) {
        return getReservationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP reservation datasource. This can be used to read reservation details.
     * 
     * ## Example Usage
     * 
     * Fetch a reservation by ID or SKU and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getReservation(GetReservationArgs.builder()
     *             .id(&#34;e6afba51-7de8-4080-83ab-0f915570659c&#34;)
     *             .sku(&#34;XXX-XXX-XXX&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;reservation&#34;, test.applyValue(getReservationResult -&gt; getReservationResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReservationResult> getReservation(GetReservationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getReservation:getReservation", TypeShape.of(GetReservationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP reservation datasource. This can be used to read reservation details.
     * 
     * ## Example Usage
     * 
     * Fetch a reservation by ID or SKU and show it&#39;s details in alphabetical order.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetReservationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getReservation(GetReservationArgs.builder()
     *             .id(&#34;e6afba51-7de8-4080-83ab-0f915570659c&#34;)
     *             .sku(&#34;XXX-XXX-XXX&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;reservation&#34;, test.applyValue(getReservationResult -&gt; getReservationResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReservationResult> getReservationPlain(GetReservationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getReservation:getReservation", TypeShape.of(GetReservationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP server datasource. This can be used to read servers.
     * 
     * ## Example Usage
     * 
     * Fetch a server data by hostname and show it&#39;s primary public IP address
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serverDs = PnapFunctions.getServer(GetServerArgs.builder()
     *             .hostname(&#34;demo-server&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;serverId&#34;, serverDs.applyValue(getServerResult -&gt; getServerResult.primaryIpAddress()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetServerResult> getServer() {
        return getServer(GetServerArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP server datasource. This can be used to read servers.
     * 
     * ## Example Usage
     * 
     * Fetch a server data by hostname and show it&#39;s primary public IP address
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serverDs = PnapFunctions.getServer(GetServerArgs.builder()
     *             .hostname(&#34;demo-server&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;serverId&#34;, serverDs.applyValue(getServerResult -&gt; getServerResult.primaryIpAddress()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetServerResult> getServerPlain() {
        return getServerPlain(GetServerPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP server datasource. This can be used to read servers.
     * 
     * ## Example Usage
     * 
     * Fetch a server data by hostname and show it&#39;s primary public IP address
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serverDs = PnapFunctions.getServer(GetServerArgs.builder()
     *             .hostname(&#34;demo-server&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;serverId&#34;, serverDs.applyValue(getServerResult -&gt; getServerResult.primaryIpAddress()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetServerResult> getServer(GetServerArgs args) {
        return getServer(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP server datasource. This can be used to read servers.
     * 
     * ## Example Usage
     * 
     * Fetch a server data by hostname and show it&#39;s primary public IP address
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serverDs = PnapFunctions.getServer(GetServerArgs.builder()
     *             .hostname(&#34;demo-server&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;serverId&#34;, serverDs.applyValue(getServerResult -&gt; getServerResult.primaryIpAddress()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetServerResult> getServerPlain(GetServerPlainArgs args) {
        return getServerPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP server datasource. This can be used to read servers.
     * 
     * ## Example Usage
     * 
     * Fetch a server data by hostname and show it&#39;s primary public IP address
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serverDs = PnapFunctions.getServer(GetServerArgs.builder()
     *             .hostname(&#34;demo-server&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;serverId&#34;, serverDs.applyValue(getServerResult -&gt; getServerResult.primaryIpAddress()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetServerResult> getServer(GetServerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getServer:getServer", TypeShape.of(GetServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP server datasource. This can be used to read servers.
     * 
     * ## Example Usage
     * 
     * Fetch a server data by hostname and show it&#39;s primary public IP address
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var serverDs = PnapFunctions.getServer(GetServerArgs.builder()
     *             .hostname(&#34;demo-server&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;serverId&#34;, serverDs.applyValue(getServerResult -&gt; getServerResult.primaryIpAddress()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetServerResult> getServerPlain(GetServerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getServer:getServer", TypeShape.of(GetServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.
     * 
     * ## Example Usage
     * 
     * Fetch a SSH key by name and show it&#39;s key
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;test3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;key&#34;, test.applyValue(getSshKeyResult -&gt; getSshKeyResult.key()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeyResult> getSshKey() {
        return getSshKey(GetSshKeyArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.
     * 
     * ## Example Usage
     * 
     * Fetch a SSH key by name and show it&#39;s key
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;test3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;key&#34;, test.applyValue(getSshKeyResult -&gt; getSshKeyResult.key()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain() {
        return getSshKeyPlain(GetSshKeyPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.
     * 
     * ## Example Usage
     * 
     * Fetch a SSH key by name and show it&#39;s key
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;test3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;key&#34;, test.applyValue(getSshKeyResult -&gt; getSshKeyResult.key()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args) {
        return getSshKey(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.
     * 
     * ## Example Usage
     * 
     * Fetch a SSH key by name and show it&#39;s key
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;test3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;key&#34;, test.applyValue(getSshKeyResult -&gt; getSshKeyResult.key()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain(GetSshKeyPlainArgs args) {
        return getSshKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.
     * 
     * ## Example Usage
     * 
     * Fetch a SSH key by name and show it&#39;s key
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;test3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;key&#34;, test.applyValue(getSshKeyResult -&gt; getSshKeyResult.key()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.
     * 
     * ## Example Usage
     * 
     * Fetch a SSH key by name and show it&#39;s key
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetSshKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;test3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;key&#34;, test.applyValue(getSshKeyResult -&gt; getSshKeyResult.key()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain(GetSshKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Storage Network datasource. This can be used to read storage networks.
     * 
     * ## Example Usage
     * 
     * Fetch a storage network by name and show it&#39;s volumes
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetStorageNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var storage-Network-1 = PnapFunctions.getStorageNetwork(GetStorageNetworkArgs.builder()
     *             .name(&#34;Storage-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;volumes&#34;, storage_Network_1.volumes());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetStorageNetworkResult> getStorageNetwork() {
        return getStorageNetwork(GetStorageNetworkArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Storage Network datasource. This can be used to read storage networks.
     * 
     * ## Example Usage
     * 
     * Fetch a storage network by name and show it&#39;s volumes
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetStorageNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var storage-Network-1 = PnapFunctions.getStorageNetwork(GetStorageNetworkArgs.builder()
     *             .name(&#34;Storage-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;volumes&#34;, storage_Network_1.volumes());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetStorageNetworkResult> getStorageNetworkPlain() {
        return getStorageNetworkPlain(GetStorageNetworkPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Storage Network datasource. This can be used to read storage networks.
     * 
     * ## Example Usage
     * 
     * Fetch a storage network by name and show it&#39;s volumes
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetStorageNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var storage-Network-1 = PnapFunctions.getStorageNetwork(GetStorageNetworkArgs.builder()
     *             .name(&#34;Storage-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;volumes&#34;, storage_Network_1.volumes());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetStorageNetworkResult> getStorageNetwork(GetStorageNetworkArgs args) {
        return getStorageNetwork(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Storage Network datasource. This can be used to read storage networks.
     * 
     * ## Example Usage
     * 
     * Fetch a storage network by name and show it&#39;s volumes
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetStorageNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var storage-Network-1 = PnapFunctions.getStorageNetwork(GetStorageNetworkArgs.builder()
     *             .name(&#34;Storage-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;volumes&#34;, storage_Network_1.volumes());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetStorageNetworkResult> getStorageNetworkPlain(GetStorageNetworkPlainArgs args) {
        return getStorageNetworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP Storage Network datasource. This can be used to read storage networks.
     * 
     * ## Example Usage
     * 
     * Fetch a storage network by name and show it&#39;s volumes
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetStorageNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var storage-Network-1 = PnapFunctions.getStorageNetwork(GetStorageNetworkArgs.builder()
     *             .name(&#34;Storage-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;volumes&#34;, storage_Network_1.volumes());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetStorageNetworkResult> getStorageNetwork(GetStorageNetworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getStorageNetwork:getStorageNetwork", TypeShape.of(GetStorageNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP Storage Network datasource. This can be used to read storage networks.
     * 
     * ## Example Usage
     * 
     * Fetch a storage network by name and show it&#39;s volumes
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetStorageNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var storage-Network-1 = PnapFunctions.getStorageNetwork(GetStorageNetworkArgs.builder()
     *             .name(&#34;Storage-1&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;volumes&#34;, storage_Network_1.volumes());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetStorageNetworkResult> getStorageNetworkPlain(GetStorageNetworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getStorageNetwork:getStorageNetwork", TypeShape.of(GetStorageNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP tag datasource. This can be used to read tags.
     * 
     * ## Example Usage
     * 
     * Fetch a tag by name and show it&#39;s details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;tag3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;details&#34;, test.applyValue(getTagResult -&gt; getTagResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTagResult> getTag() {
        return getTag(GetTagArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP tag datasource. This can be used to read tags.
     * 
     * ## Example Usage
     * 
     * Fetch a tag by name and show it&#39;s details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;tag3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;details&#34;, test.applyValue(getTagResult -&gt; getTagResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTagResult> getTagPlain() {
        return getTagPlain(GetTagPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP tag datasource. This can be used to read tags.
     * 
     * ## Example Usage
     * 
     * Fetch a tag by name and show it&#39;s details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;tag3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;details&#34;, test.applyValue(getTagResult -&gt; getTagResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTagResult> getTag(GetTagArgs args) {
        return getTag(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP tag datasource. This can be used to read tags.
     * 
     * ## Example Usage
     * 
     * Fetch a tag by name and show it&#39;s details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;tag3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;details&#34;, test.applyValue(getTagResult -&gt; getTagResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTagResult> getTagPlain(GetTagPlainArgs args) {
        return getTagPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a phoenixNAP tag datasource. This can be used to read tags.
     * 
     * ## Example Usage
     * 
     * Fetch a tag by name and show it&#39;s details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;tag3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;details&#34;, test.applyValue(getTagResult -&gt; getTagResult));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTagResult> getTag(GetTagArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("pnap:index/getTag:getTag", TypeShape.of(GetTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a phoenixNAP tag datasource. This can be used to read tags.
     * 
     * ## Example Usage
     * 
     * Fetch a tag by name and show it&#39;s details.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.pnap.PnapFunctions;
     * import com.pulumi.pnap.inputs.GetTagArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = PnapFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;tag3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;details&#34;, test.applyValue(getTagResult -&gt; getTagResult));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTagResult> getTagPlain(GetTagPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("pnap:index/getTag:getTag", TypeShape.of(GetTagResult.class), args, Utilities.withVersion(options));
    }
}
