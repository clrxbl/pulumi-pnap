// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.phoenixnap.pulumi.pnap.inputs.TagResourceAssignmentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagState extends com.pulumi.resources.ResourceArgs {

    public static final TagState Empty = new TagState();

    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The description of the tag.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the tag.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether or not to show the tag as part of billing and invoices.
     * 
     */
    @Import(name="isBillingTag")
    private @Nullable Output<Boolean> isBillingTag;

    /**
     * @return Whether or not to show the tag as part of billing and invoices.
     * 
     */
    public Optional<Output<Boolean>> isBillingTag() {
        return Optional.ofNullable(this.isBillingTag);
    }

    /**
     * The unique name of the tag.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name of the tag.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="resourceAssignments")
    private @Nullable Output<List<TagResourceAssignmentArgs>> resourceAssignments;

    public Optional<Output<List<TagResourceAssignmentArgs>>> resourceAssignments() {
        return Optional.ofNullable(this.resourceAssignments);
    }

    /**
     * The optional values of the tag..
     * 
     */
    @Import(name="values")
    private @Nullable Output<List<String>> values;

    /**
     * @return The optional values of the tag..
     * 
     */
    public Optional<Output<List<String>>> values() {
        return Optional.ofNullable(this.values);
    }

    private TagState() {}

    private TagState(TagState $) {
        this.createdBy = $.createdBy;
        this.description = $.description;
        this.isBillingTag = $.isBillingTag;
        this.name = $.name;
        this.resourceAssignments = $.resourceAssignments;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagState $;

        public Builder() {
            $ = new TagState();
        }

        public Builder(TagState defaults) {
            $ = new TagState(Objects.requireNonNull(defaults));
        }

        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param description The description of the tag.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the tag.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isBillingTag Whether or not to show the tag as part of billing and invoices.
         * 
         * @return builder
         * 
         */
        public Builder isBillingTag(@Nullable Output<Boolean> isBillingTag) {
            $.isBillingTag = isBillingTag;
            return this;
        }

        /**
         * @param isBillingTag Whether or not to show the tag as part of billing and invoices.
         * 
         * @return builder
         * 
         */
        public Builder isBillingTag(Boolean isBillingTag) {
            return isBillingTag(Output.of(isBillingTag));
        }

        /**
         * @param name The unique name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the tag.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceAssignments(@Nullable Output<List<TagResourceAssignmentArgs>> resourceAssignments) {
            $.resourceAssignments = resourceAssignments;
            return this;
        }

        public Builder resourceAssignments(List<TagResourceAssignmentArgs> resourceAssignments) {
            return resourceAssignments(Output.of(resourceAssignments));
        }

        public Builder resourceAssignments(TagResourceAssignmentArgs... resourceAssignments) {
            return resourceAssignments(List.of(resourceAssignments));
        }

        /**
         * @param values The optional values of the tag..
         * 
         * @return builder
         * 
         */
        public Builder values(@Nullable Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values The optional values of the tag..
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values The optional values of the tag..
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public TagState build() {
            return $;
        }
    }

}
