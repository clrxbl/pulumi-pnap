// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork {
    /**
     * @return Determines whether DHCP is enabled for this server.
     * 
     */
    private Boolean dhcp;
    /**
     * @return The unique identifier of the server.
     * 
     */
    private String id;
    /**
     * @return IPs configured on the server.
     * 
     */
    private List<String> ips;
    /**
     * @return The status of the assignment to the network.
     * 
     */
    private String statusDescription;

    private GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork() {}
    /**
     * @return Determines whether DHCP is enabled for this server.
     * 
     */
    public Boolean dhcp() {
        return this.dhcp;
    }
    /**
     * @return The unique identifier of the server.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IPs configured on the server.
     * 
     */
    public List<String> ips() {
        return this.ips;
    }
    /**
     * @return The status of the assignment to the network.
     * 
     */
    public String statusDescription() {
        return this.statusDescription;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean dhcp;
        private String id;
        private List<String> ips;
        private String statusDescription;
        public Builder() {}
        public Builder(GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcp = defaults.dhcp;
    	      this.id = defaults.id;
    	      this.ips = defaults.ips;
    	      this.statusDescription = defaults.statusDescription;
        }

        @CustomType.Setter
        public Builder dhcp(Boolean dhcp) {
            if (dhcp == null) {
              throw new MissingRequiredPropertyException("GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork", "dhcp");
            }
            this.dhcp = dhcp;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ips(List<String> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork", "ips");
            }
            this.ips = ips;
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        @CustomType.Setter
        public Builder statusDescription(String statusDescription) {
            if (statusDescription == null) {
              throw new MissingRequiredPropertyException("GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork", "statusDescription");
            }
            this.statusDescription = statusDescription;
            return this;
        }
        public GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork build() {
            final var _resultValue = new GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork();
            _resultValue.dhcp = dhcp;
            _resultValue.id = id;
            _resultValue.ips = ips;
            _resultValue.statusDescription = statusDescription;
            return _resultValue;
        }
    }
}
