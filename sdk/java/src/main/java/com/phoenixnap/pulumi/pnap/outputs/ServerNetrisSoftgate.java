// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerNetrisSoftgate {
    /**
     * @return IP address or hostname through which to reach the Netris Controller.
     * 
     */
    private @Nullable String controllerAddress;
    /**
     * @return The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.
     * 
     * The `tags` block has field `tag_assignment`.
     * The `tag_assignment` block has 2 fields:
     * 
     */
    private @Nullable String controllerAuthKey;
    /**
     * @return The version of the Netris Controller to connect to.
     * 
     */
    private @Nullable String controllerVersion;
    /**
     * @return Host OS on which the Netris Softgate is installed.
     * 
     */
    private @Nullable String hostOs;

    private ServerNetrisSoftgate() {}
    /**
     * @return IP address or hostname through which to reach the Netris Controller.
     * 
     */
    public Optional<String> controllerAddress() {
        return Optional.ofNullable(this.controllerAddress);
    }
    /**
     * @return The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.
     * 
     * The `tags` block has field `tag_assignment`.
     * The `tag_assignment` block has 2 fields:
     * 
     */
    public Optional<String> controllerAuthKey() {
        return Optional.ofNullable(this.controllerAuthKey);
    }
    /**
     * @return The version of the Netris Controller to connect to.
     * 
     */
    public Optional<String> controllerVersion() {
        return Optional.ofNullable(this.controllerVersion);
    }
    /**
     * @return Host OS on which the Netris Softgate is installed.
     * 
     */
    public Optional<String> hostOs() {
        return Optional.ofNullable(this.hostOs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerNetrisSoftgate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String controllerAddress;
        private @Nullable String controllerAuthKey;
        private @Nullable String controllerVersion;
        private @Nullable String hostOs;
        public Builder() {}
        public Builder(ServerNetrisSoftgate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controllerAddress = defaults.controllerAddress;
    	      this.controllerAuthKey = defaults.controllerAuthKey;
    	      this.controllerVersion = defaults.controllerVersion;
    	      this.hostOs = defaults.hostOs;
        }

        @CustomType.Setter
        public Builder controllerAddress(@Nullable String controllerAddress) {

            this.controllerAddress = controllerAddress;
            return this;
        }
        @CustomType.Setter
        public Builder controllerAuthKey(@Nullable String controllerAuthKey) {

            this.controllerAuthKey = controllerAuthKey;
            return this;
        }
        @CustomType.Setter
        public Builder controllerVersion(@Nullable String controllerVersion) {

            this.controllerVersion = controllerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder hostOs(@Nullable String hostOs) {

            this.hostOs = hostOs;
            return this;
        }
        public ServerNetrisSoftgate build() {
            final var _resultValue = new ServerNetrisSoftgate();
            _resultValue.controllerAddress = controllerAddress;
            _resultValue.controllerAuthKey = controllerAuthKey;
            _resultValue.controllerVersion = controllerVersion;
            _resultValue.hostOs = hostOs;
            return _resultValue;
        }
    }
}
