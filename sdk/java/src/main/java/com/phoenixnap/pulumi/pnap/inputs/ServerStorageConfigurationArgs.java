// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.phoenixnap.pulumi.pnap.inputs.ServerStorageConfigurationRootPartitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerStorageConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerStorageConfigurationArgs Empty = new ServerStorageConfigurationArgs();

    @Import(name="rootPartition")
    private @Nullable Output<ServerStorageConfigurationRootPartitionArgs> rootPartition;

    public Optional<Output<ServerStorageConfigurationRootPartitionArgs>> rootPartition() {
        return Optional.ofNullable(this.rootPartition);
    }

    private ServerStorageConfigurationArgs() {}

    private ServerStorageConfigurationArgs(ServerStorageConfigurationArgs $) {
        this.rootPartition = $.rootPartition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerStorageConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerStorageConfigurationArgs $;

        public Builder() {
            $ = new ServerStorageConfigurationArgs();
        }

        public Builder(ServerStorageConfigurationArgs defaults) {
            $ = new ServerStorageConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder rootPartition(@Nullable Output<ServerStorageConfigurationRootPartitionArgs> rootPartition) {
            $.rootPartition = rootPartition;
            return this;
        }

        public Builder rootPartition(ServerStorageConfigurationRootPartitionArgs rootPartition) {
            return rootPartition(Output.of(rootPartition));
        }

        public ServerStorageConfigurationArgs build() {
            return $;
        }
    }

}
