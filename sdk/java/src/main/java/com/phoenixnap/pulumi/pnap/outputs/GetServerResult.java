// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.phoenixnap.pulumi.pnap.outputs.GetServerNetrisController;
import com.phoenixnap.pulumi.pnap.outputs.GetServerNetrisSoftgate;
import com.phoenixnap.pulumi.pnap.outputs.GetServerNetworkConfiguration;
import com.phoenixnap.pulumi.pnap.outputs.GetServerStorageConfiguration;
import com.phoenixnap.pulumi.pnap.outputs.GetServerTag;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerResult {
    private String hostname;
    /**
     * @return The network identifier.
     * 
     */
    private String id;
    /**
     * @return Server Location ID. Cannot be changed once a server is created.
     * 
     */
    private String location;
    /**
     * @return Netris Controller configuration properties.
     * 
     */
    private List<GetServerNetrisController> netrisControllers;
    /**
     * @return Netris Softgate configuration properties.
     * 
     */
    private List<GetServerNetrisSoftgate> netrisSoftgates;
    /**
     * @return Entire network details of bare metal server.
     * 
     */
    private List<GetServerNetworkConfiguration> networkConfigurations;
    /**
     * @return The type of network configuration for this server.
     * 
     */
    private String networkType;
    /**
     * @return The server’s OS ID used when the server was created.
     * 
     */
    private String os;
    /**
     * @return First usable public IP Address.
     * 
     */
    private String primaryIpAddress;
    /**
     * @return Private IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    private List<String> privateIpAddresses;
    /**
     * @return Public IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    private List<String> publicIpAddresses;
    /**
     * @return The status of the server.
     * 
     */
    private String status;
    /**
     * @return Storage configuration.
     * 
     */
    private List<GetServerStorageConfiguration> storageConfigurations;
    /**
     * @return Unique identifier of the server to which the reservation has been transferred.
     * 
     */
    private String supersededBy;
    /**
     * @return Unique identifier of the server from which the reservation has been transferred.
     * 
     */
    private String supersedes;
    /**
     * @return The tags assigned to the server.
     * 
     */
    private List<GetServerTag> tags;
    /**
     * @return Server type ID. Cannot be changed once a server is created.
     * 
     */
    private String type;

    private GetServerResult() {}
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The network identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Server Location ID. Cannot be changed once a server is created.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Netris Controller configuration properties.
     * 
     */
    public List<GetServerNetrisController> netrisControllers() {
        return this.netrisControllers;
    }
    /**
     * @return Netris Softgate configuration properties.
     * 
     */
    public List<GetServerNetrisSoftgate> netrisSoftgates() {
        return this.netrisSoftgates;
    }
    /**
     * @return Entire network details of bare metal server.
     * 
     */
    public List<GetServerNetworkConfiguration> networkConfigurations() {
        return this.networkConfigurations;
    }
    /**
     * @return The type of network configuration for this server.
     * 
     */
    public String networkType() {
        return this.networkType;
    }
    /**
     * @return The server’s OS ID used when the server was created.
     * 
     */
    public String os() {
        return this.os;
    }
    /**
     * @return First usable public IP Address.
     * 
     */
    public String primaryIpAddress() {
        return this.primaryIpAddress;
    }
    /**
     * @return Private IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    public List<String> privateIpAddresses() {
        return this.privateIpAddresses;
    }
    /**
     * @return Public IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    public List<String> publicIpAddresses() {
        return this.publicIpAddresses;
    }
    /**
     * @return The status of the server.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Storage configuration.
     * 
     */
    public List<GetServerStorageConfiguration> storageConfigurations() {
        return this.storageConfigurations;
    }
    /**
     * @return Unique identifier of the server to which the reservation has been transferred.
     * 
     */
    public String supersededBy() {
        return this.supersededBy;
    }
    /**
     * @return Unique identifier of the server from which the reservation has been transferred.
     * 
     */
    public String supersedes() {
        return this.supersedes;
    }
    /**
     * @return The tags assigned to the server.
     * 
     */
    public List<GetServerTag> tags() {
        return this.tags;
    }
    /**
     * @return Server type ID. Cannot be changed once a server is created.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String hostname;
        private String id;
        private String location;
        private List<GetServerNetrisController> netrisControllers;
        private List<GetServerNetrisSoftgate> netrisSoftgates;
        private List<GetServerNetworkConfiguration> networkConfigurations;
        private String networkType;
        private String os;
        private String primaryIpAddress;
        private List<String> privateIpAddresses;
        private List<String> publicIpAddresses;
        private String status;
        private List<GetServerStorageConfiguration> storageConfigurations;
        private String supersededBy;
        private String supersedes;
        private List<GetServerTag> tags;
        private String type;
        public Builder() {}
        public Builder(GetServerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.netrisControllers = defaults.netrisControllers;
    	      this.netrisSoftgates = defaults.netrisSoftgates;
    	      this.networkConfigurations = defaults.networkConfigurations;
    	      this.networkType = defaults.networkType;
    	      this.os = defaults.os;
    	      this.primaryIpAddress = defaults.primaryIpAddress;
    	      this.privateIpAddresses = defaults.privateIpAddresses;
    	      this.publicIpAddresses = defaults.publicIpAddresses;
    	      this.status = defaults.status;
    	      this.storageConfigurations = defaults.storageConfigurations;
    	      this.supersededBy = defaults.supersededBy;
    	      this.supersedes = defaults.supersedes;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder netrisControllers(List<GetServerNetrisController> netrisControllers) {
            if (netrisControllers == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "netrisControllers");
            }
            this.netrisControllers = netrisControllers;
            return this;
        }
        public Builder netrisControllers(GetServerNetrisController... netrisControllers) {
            return netrisControllers(List.of(netrisControllers));
        }
        @CustomType.Setter
        public Builder netrisSoftgates(List<GetServerNetrisSoftgate> netrisSoftgates) {
            if (netrisSoftgates == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "netrisSoftgates");
            }
            this.netrisSoftgates = netrisSoftgates;
            return this;
        }
        public Builder netrisSoftgates(GetServerNetrisSoftgate... netrisSoftgates) {
            return netrisSoftgates(List.of(netrisSoftgates));
        }
        @CustomType.Setter
        public Builder networkConfigurations(List<GetServerNetworkConfiguration> networkConfigurations) {
            if (networkConfigurations == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "networkConfigurations");
            }
            this.networkConfigurations = networkConfigurations;
            return this;
        }
        public Builder networkConfigurations(GetServerNetworkConfiguration... networkConfigurations) {
            return networkConfigurations(List.of(networkConfigurations));
        }
        @CustomType.Setter
        public Builder networkType(String networkType) {
            if (networkType == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "networkType");
            }
            this.networkType = networkType;
            return this;
        }
        @CustomType.Setter
        public Builder os(String os) {
            if (os == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "os");
            }
            this.os = os;
            return this;
        }
        @CustomType.Setter
        public Builder primaryIpAddress(String primaryIpAddress) {
            if (primaryIpAddress == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "primaryIpAddress");
            }
            this.primaryIpAddress = primaryIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddresses(List<String> privateIpAddresses) {
            if (privateIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "privateIpAddresses");
            }
            this.privateIpAddresses = privateIpAddresses;
            return this;
        }
        public Builder privateIpAddresses(String... privateIpAddresses) {
            return privateIpAddresses(List.of(privateIpAddresses));
        }
        @CustomType.Setter
        public Builder publicIpAddresses(List<String> publicIpAddresses) {
            if (publicIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "publicIpAddresses");
            }
            this.publicIpAddresses = publicIpAddresses;
            return this;
        }
        public Builder publicIpAddresses(String... publicIpAddresses) {
            return publicIpAddresses(List.of(publicIpAddresses));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageConfigurations(List<GetServerStorageConfiguration> storageConfigurations) {
            if (storageConfigurations == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "storageConfigurations");
            }
            this.storageConfigurations = storageConfigurations;
            return this;
        }
        public Builder storageConfigurations(GetServerStorageConfiguration... storageConfigurations) {
            return storageConfigurations(List.of(storageConfigurations));
        }
        @CustomType.Setter
        public Builder supersededBy(String supersededBy) {
            if (supersededBy == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "supersededBy");
            }
            this.supersededBy = supersededBy;
            return this;
        }
        @CustomType.Setter
        public Builder supersedes(String supersedes) {
            if (supersedes == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "supersedes");
            }
            this.supersedes = supersedes;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetServerTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetServerTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServerResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetServerResult build() {
            final var _resultValue = new GetServerResult();
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.netrisControllers = netrisControllers;
            _resultValue.netrisSoftgates = netrisSoftgates;
            _resultValue.networkConfigurations = networkConfigurations;
            _resultValue.networkType = networkType;
            _resultValue.os = os;
            _resultValue.primaryIpAddress = primaryIpAddress;
            _resultValue.privateIpAddresses = privateIpAddresses;
            _resultValue.publicIpAddresses = publicIpAddresses;
            _resultValue.status = status;
            _resultValue.storageConfigurations = storageConfigurations;
            _resultValue.supersededBy = supersededBy;
            _resultValue.supersedes = supersedes;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
