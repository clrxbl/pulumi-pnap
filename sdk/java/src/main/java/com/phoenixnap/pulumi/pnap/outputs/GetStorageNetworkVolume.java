// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.phoenixnap.pulumi.pnap.outputs.GetStorageNetworkVolumePermission;
import com.phoenixnap.pulumi.pnap.outputs.GetStorageNetworkVolumeTag;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStorageNetworkVolume {
    /**
     * @return Maximum capacity in GB.
     * 
     */
    private Integer capacityInGb;
    /**
     * @return Date and time when this volume was created.
     * 
     */
    private String createdOn;
    /**
     * @return Date and time of the initial request for volume deletion.
     * 
     */
    private String deleteRequestedOn;
    /**
     * @return Volume description.
     * 
     */
    private String description;
    /**
     * @return The storage network identifier.
     * 
     */
    private String id;
    /**
     * @return The friendly name of this storage network.
     * 
     */
    private String name;
    /**
     * @return Volume&#39;s full path. It is in form of `/{volumeId}/pathSuffix`.
     * 
     */
    private String path;
    /**
     * @return Last part of volume&#39;s path.
     * 
     */
    private String pathSuffix;
    /**
     * @return Permissions for the volume.
     * 
     */
    private List<GetStorageNetworkVolumePermission> permissions;
    /**
     * @return File system protocol.
     * 
     */
    private String protocol;
    /**
     * @return Volume&#39;s status.
     * 
     */
    private String status;
    /**
     * @return The tags assigned to the volume.
     * 
     */
    private List<GetStorageNetworkVolumeTag> tags;
    /**
     * @return Used capacity in GB, updated periodically.
     * 
     */
    private Integer usedCapacityInGb;

    private GetStorageNetworkVolume() {}
    /**
     * @return Maximum capacity in GB.
     * 
     */
    public Integer capacityInGb() {
        return this.capacityInGb;
    }
    /**
     * @return Date and time when this volume was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Date and time of the initial request for volume deletion.
     * 
     */
    public String deleteRequestedOn() {
        return this.deleteRequestedOn;
    }
    /**
     * @return Volume description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The storage network identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The friendly name of this storage network.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Volume&#39;s full path. It is in form of `/{volumeId}/pathSuffix`.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Last part of volume&#39;s path.
     * 
     */
    public String pathSuffix() {
        return this.pathSuffix;
    }
    /**
     * @return Permissions for the volume.
     * 
     */
    public List<GetStorageNetworkVolumePermission> permissions() {
        return this.permissions;
    }
    /**
     * @return File system protocol.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Volume&#39;s status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The tags assigned to the volume.
     * 
     */
    public List<GetStorageNetworkVolumeTag> tags() {
        return this.tags;
    }
    /**
     * @return Used capacity in GB, updated periodically.
     * 
     */
    public Integer usedCapacityInGb() {
        return this.usedCapacityInGb;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStorageNetworkVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer capacityInGb;
        private String createdOn;
        private String deleteRequestedOn;
        private String description;
        private String id;
        private String name;
        private String path;
        private String pathSuffix;
        private List<GetStorageNetworkVolumePermission> permissions;
        private String protocol;
        private String status;
        private List<GetStorageNetworkVolumeTag> tags;
        private Integer usedCapacityInGb;
        public Builder() {}
        public Builder(GetStorageNetworkVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityInGb = defaults.capacityInGb;
    	      this.createdOn = defaults.createdOn;
    	      this.deleteRequestedOn = defaults.deleteRequestedOn;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.pathSuffix = defaults.pathSuffix;
    	      this.permissions = defaults.permissions;
    	      this.protocol = defaults.protocol;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.usedCapacityInGb = defaults.usedCapacityInGb;
        }

        @CustomType.Setter
        public Builder capacityInGb(Integer capacityInGb) {
            if (capacityInGb == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "capacityInGb");
            }
            this.capacityInGb = capacityInGb;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder deleteRequestedOn(String deleteRequestedOn) {
            if (deleteRequestedOn == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "deleteRequestedOn");
            }
            this.deleteRequestedOn = deleteRequestedOn;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pathSuffix(String pathSuffix) {
            if (pathSuffix == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "pathSuffix");
            }
            this.pathSuffix = pathSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<GetStorageNetworkVolumePermission> permissions) {
            if (permissions == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "permissions");
            }
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(GetStorageNetworkVolumePermission... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetStorageNetworkVolumeTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetStorageNetworkVolumeTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder usedCapacityInGb(Integer usedCapacityInGb) {
            if (usedCapacityInGb == null) {
              throw new MissingRequiredPropertyException("GetStorageNetworkVolume", "usedCapacityInGb");
            }
            this.usedCapacityInGb = usedCapacityInGb;
            return this;
        }
        public GetStorageNetworkVolume build() {
            final var _resultValue = new GetStorageNetworkVolume();
            _resultValue.capacityInGb = capacityInGb;
            _resultValue.createdOn = createdOn;
            _resultValue.deleteRequestedOn = deleteRequestedOn;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.pathSuffix = pathSuffix;
            _resultValue.permissions = permissions;
            _resultValue.protocol = protocol;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.usedCapacityInGb = usedCapacityInGb;
            return _resultValue;
        }
    }
}
