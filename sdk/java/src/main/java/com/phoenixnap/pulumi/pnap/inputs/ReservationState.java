// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservationState extends com.pulumi.resources.ResourceArgs {

    public static final ReservationState Empty = new ReservationState();

    /**
     * The resource ID currently being assigned to reservation.
     * 
     */
    @Import(name="assignedResourceId")
    private @Nullable Output<String> assignedResourceId;

    /**
     * @return The resource ID currently being assigned to reservation.
     * 
     */
    public Optional<Output<String>> assignedResourceId() {
        return Optional.ofNullable(this.assignedResourceId);
    }

    /**
     * A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * The reason for disabling auto-renewal.
     * 
     */
    @Import(name="autoRenewDisableReason")
    private @Nullable Output<String> autoRenewDisableReason;

    /**
     * @return The reason for disabling auto-renewal.
     * 
     */
    public Optional<Output<String>> autoRenewDisableReason() {
        return Optional.ofNullable(this.autoRenewDisableReason);
    }

    /**
     * The point in time (in UTC) when the reservation ends.
     * 
     */
    @Import(name="endDateTime")
    private @Nullable Output<String> endDateTime;

    /**
     * @return The point in time (in UTC) when the reservation ends.
     * 
     */
    public Optional<Output<String>> endDateTime() {
        return Optional.ofNullable(this.endDateTime);
    }

    /**
     * Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.
     * 
     */
    @Import(name="initialInvoiceModel")
    private @Nullable Output<String> initialInvoiceModel;

    /**
     * @return Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.
     * 
     */
    public Optional<Output<String>> initialInvoiceModel() {
        return Optional.ofNullable(this.initialInvoiceModel);
    }

    /**
     * The point in time (in UTC) when the reservation was renewed last.
     * 
     */
    @Import(name="lastRenewalDateTime")
    private @Nullable Output<String> lastRenewalDateTime;

    /**
     * @return The point in time (in UTC) when the reservation was renewed last.
     * 
     */
    public Optional<Output<String>> lastRenewalDateTime() {
        return Optional.ofNullable(this.lastRenewalDateTime);
    }

    /**
     * The location code.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location code.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Next billing date for reservation.
     * 
     */
    @Import(name="nextBillingDate")
    private @Nullable Output<String> nextBillingDate;

    /**
     * @return Next billing date for reservation.
     * 
     */
    public Optional<Output<String>> nextBillingDate() {
        return Optional.ofNullable(this.nextBillingDate);
    }

    /**
     * The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.
     * 
     */
    @Import(name="nextRenewalDateTime")
    private @Nullable Output<String> nextRenewalDateTime;

    /**
     * @return The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.
     * 
     */
    public Optional<Output<String>> nextRenewalDateTime() {
        return Optional.ofNullable(this.nextRenewalDateTime);
    }

    /**
     * Reservation price.
     * 
     */
    @Import(name="price")
    private @Nullable Output<Double> price;

    /**
     * @return Reservation price.
     * 
     */
    public Optional<Output<Double>> price() {
        return Optional.ofNullable(this.price);
    }

    /**
     * The unit to which the price applies.
     * 
     */
    @Import(name="priceUnit")
    private @Nullable Output<String> priceUnit;

    /**
     * @return The unit to which the price applies.
     * 
     */
    public Optional<Output<String>> priceUnit() {
        return Optional.ofNullable(this.priceUnit);
    }

    /**
     * The product category.
     * 
     */
    @Import(name="productCategory")
    private @Nullable Output<String> productCategory;

    /**
     * @return The product category.
     * 
     */
    public Optional<Output<String>> productCategory() {
        return Optional.ofNullable(this.productCategory);
    }

    /**
     * The code identifying the product. This code has significance across all locations.
     * 
     */
    @Import(name="productCode")
    private @Nullable Output<String> productCode;

    /**
     * @return The code identifying the product. This code has significance across all locations.
     * 
     */
    public Optional<Output<String>> productCode() {
        return Optional.ofNullable(this.productCode);
    }

    /**
     * The reservation model.
     * 
     */
    @Import(name="reservationModel")
    private @Nullable Output<String> reservationModel;

    /**
     * @return The reservation model.
     * 
     */
    public Optional<Output<String>> reservationModel() {
        return Optional.ofNullable(this.reservationModel);
    }

    /**
     * The SKU code of product pricing plan.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<String> sku;

    /**
     * @return The SKU code of product pricing plan.
     * 
     */
    public Optional<Output<String>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * The point in time (in UTC) when the reservation starts.
     * 
     */
    @Import(name="startDateTime")
    private @Nullable Output<String> startDateTime;

    /**
     * @return The point in time (in UTC) when the reservation starts.
     * 
     */
    public Optional<Output<String>> startDateTime() {
        return Optional.ofNullable(this.startDateTime);
    }

    private ReservationState() {}

    private ReservationState(ReservationState $) {
        this.assignedResourceId = $.assignedResourceId;
        this.autoRenew = $.autoRenew;
        this.autoRenewDisableReason = $.autoRenewDisableReason;
        this.endDateTime = $.endDateTime;
        this.initialInvoiceModel = $.initialInvoiceModel;
        this.lastRenewalDateTime = $.lastRenewalDateTime;
        this.location = $.location;
        this.nextBillingDate = $.nextBillingDate;
        this.nextRenewalDateTime = $.nextRenewalDateTime;
        this.price = $.price;
        this.priceUnit = $.priceUnit;
        this.productCategory = $.productCategory;
        this.productCode = $.productCode;
        this.reservationModel = $.reservationModel;
        this.sku = $.sku;
        this.startDateTime = $.startDateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservationState $;

        public Builder() {
            $ = new ReservationState();
        }

        public Builder(ReservationState defaults) {
            $ = new ReservationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignedResourceId The resource ID currently being assigned to reservation.
         * 
         * @return builder
         * 
         */
        public Builder assignedResourceId(@Nullable Output<String> assignedResourceId) {
            $.assignedResourceId = assignedResourceId;
            return this;
        }

        /**
         * @param assignedResourceId The resource ID currently being assigned to reservation.
         * 
         * @return builder
         * 
         */
        public Builder assignedResourceId(String assignedResourceId) {
            return assignedResourceId(Output.of(assignedResourceId));
        }

        /**
         * @param autoRenew A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param autoRenewDisableReason The reason for disabling auto-renewal.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewDisableReason(@Nullable Output<String> autoRenewDisableReason) {
            $.autoRenewDisableReason = autoRenewDisableReason;
            return this;
        }

        /**
         * @param autoRenewDisableReason The reason for disabling auto-renewal.
         * 
         * @return builder
         * 
         */
        public Builder autoRenewDisableReason(String autoRenewDisableReason) {
            return autoRenewDisableReason(Output.of(autoRenewDisableReason));
        }

        /**
         * @param endDateTime The point in time (in UTC) when the reservation ends.
         * 
         * @return builder
         * 
         */
        public Builder endDateTime(@Nullable Output<String> endDateTime) {
            $.endDateTime = endDateTime;
            return this;
        }

        /**
         * @param endDateTime The point in time (in UTC) when the reservation ends.
         * 
         * @return builder
         * 
         */
        public Builder endDateTime(String endDateTime) {
            return endDateTime(Output.of(endDateTime));
        }

        /**
         * @param initialInvoiceModel Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.
         * 
         * @return builder
         * 
         */
        public Builder initialInvoiceModel(@Nullable Output<String> initialInvoiceModel) {
            $.initialInvoiceModel = initialInvoiceModel;
            return this;
        }

        /**
         * @param initialInvoiceModel Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.
         * 
         * @return builder
         * 
         */
        public Builder initialInvoiceModel(String initialInvoiceModel) {
            return initialInvoiceModel(Output.of(initialInvoiceModel));
        }

        /**
         * @param lastRenewalDateTime The point in time (in UTC) when the reservation was renewed last.
         * 
         * @return builder
         * 
         */
        public Builder lastRenewalDateTime(@Nullable Output<String> lastRenewalDateTime) {
            $.lastRenewalDateTime = lastRenewalDateTime;
            return this;
        }

        /**
         * @param lastRenewalDateTime The point in time (in UTC) when the reservation was renewed last.
         * 
         * @return builder
         * 
         */
        public Builder lastRenewalDateTime(String lastRenewalDateTime) {
            return lastRenewalDateTime(Output.of(lastRenewalDateTime));
        }

        /**
         * @param location The location code.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location code.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param nextBillingDate Next billing date for reservation.
         * 
         * @return builder
         * 
         */
        public Builder nextBillingDate(@Nullable Output<String> nextBillingDate) {
            $.nextBillingDate = nextBillingDate;
            return this;
        }

        /**
         * @param nextBillingDate Next billing date for reservation.
         * 
         * @return builder
         * 
         */
        public Builder nextBillingDate(String nextBillingDate) {
            return nextBillingDate(Output.of(nextBillingDate));
        }

        /**
         * @param nextRenewalDateTime The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.
         * 
         * @return builder
         * 
         */
        public Builder nextRenewalDateTime(@Nullable Output<String> nextRenewalDateTime) {
            $.nextRenewalDateTime = nextRenewalDateTime;
            return this;
        }

        /**
         * @param nextRenewalDateTime The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.
         * 
         * @return builder
         * 
         */
        public Builder nextRenewalDateTime(String nextRenewalDateTime) {
            return nextRenewalDateTime(Output.of(nextRenewalDateTime));
        }

        /**
         * @param price Reservation price.
         * 
         * @return builder
         * 
         */
        public Builder price(@Nullable Output<Double> price) {
            $.price = price;
            return this;
        }

        /**
         * @param price Reservation price.
         * 
         * @return builder
         * 
         */
        public Builder price(Double price) {
            return price(Output.of(price));
        }

        /**
         * @param priceUnit The unit to which the price applies.
         * 
         * @return builder
         * 
         */
        public Builder priceUnit(@Nullable Output<String> priceUnit) {
            $.priceUnit = priceUnit;
            return this;
        }

        /**
         * @param priceUnit The unit to which the price applies.
         * 
         * @return builder
         * 
         */
        public Builder priceUnit(String priceUnit) {
            return priceUnit(Output.of(priceUnit));
        }

        /**
         * @param productCategory The product category.
         * 
         * @return builder
         * 
         */
        public Builder productCategory(@Nullable Output<String> productCategory) {
            $.productCategory = productCategory;
            return this;
        }

        /**
         * @param productCategory The product category.
         * 
         * @return builder
         * 
         */
        public Builder productCategory(String productCategory) {
            return productCategory(Output.of(productCategory));
        }

        /**
         * @param productCode The code identifying the product. This code has significance across all locations.
         * 
         * @return builder
         * 
         */
        public Builder productCode(@Nullable Output<String> productCode) {
            $.productCode = productCode;
            return this;
        }

        /**
         * @param productCode The code identifying the product. This code has significance across all locations.
         * 
         * @return builder
         * 
         */
        public Builder productCode(String productCode) {
            return productCode(Output.of(productCode));
        }

        /**
         * @param reservationModel The reservation model.
         * 
         * @return builder
         * 
         */
        public Builder reservationModel(@Nullable Output<String> reservationModel) {
            $.reservationModel = reservationModel;
            return this;
        }

        /**
         * @param reservationModel The reservation model.
         * 
         * @return builder
         * 
         */
        public Builder reservationModel(String reservationModel) {
            return reservationModel(Output.of(reservationModel));
        }

        /**
         * @param sku The SKU code of product pricing plan.
         * 
         * @return builder
         * 
         */
        public Builder sku(@Nullable Output<String> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku The SKU code of product pricing plan.
         * 
         * @return builder
         * 
         */
        public Builder sku(String sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param startDateTime The point in time (in UTC) when the reservation starts.
         * 
         * @return builder
         * 
         */
        public Builder startDateTime(@Nullable Output<String> startDateTime) {
            $.startDateTime = startDateTime;
            return this;
        }

        /**
         * @param startDateTime The point in time (in UTC) when the reservation starts.
         * 
         * @return builder
         * 
         */
        public Builder startDateTime(String startDateTime) {
            return startDateTime(Output.of(startDateTime));
        }

        public ReservationState build() {
            return $;
        }
    }

}
