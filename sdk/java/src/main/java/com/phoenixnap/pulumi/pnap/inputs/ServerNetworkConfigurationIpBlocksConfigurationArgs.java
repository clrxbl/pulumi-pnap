// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.phoenixnap.pulumi.pnap.inputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerNetworkConfigurationIpBlocksConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerNetworkConfigurationIpBlocksConfigurationArgs Empty = new ServerNetworkConfigurationIpBlocksConfigurationArgs();

    /**
     * Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
     * 
     */
    @Import(name="configurationType")
    private @Nullable Output<String> configurationType;

    /**
     * @return Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
     * 
     */
    public Optional<Output<String>> configurationType() {
        return Optional.ofNullable(this.configurationType);
    }

    /**
     * Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
     * 
     * The `ip_blocks` block has field `server_ip_block`.
     * The `server_ip_block` block has 2 fields:
     * 
     */
    @Import(name="ipBlocks")
    private @Nullable Output<List<ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs>> ipBlocks;

    /**
     * @return Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
     * 
     * The `ip_blocks` block has field `server_ip_block`.
     * The `server_ip_block` block has 2 fields:
     * 
     */
    public Optional<Output<List<ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs>>> ipBlocks() {
        return Optional.ofNullable(this.ipBlocks);
    }

    private ServerNetworkConfigurationIpBlocksConfigurationArgs() {}

    private ServerNetworkConfigurationIpBlocksConfigurationArgs(ServerNetworkConfigurationIpBlocksConfigurationArgs $) {
        this.configurationType = $.configurationType;
        this.ipBlocks = $.ipBlocks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerNetworkConfigurationIpBlocksConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerNetworkConfigurationIpBlocksConfigurationArgs $;

        public Builder() {
            $ = new ServerNetworkConfigurationIpBlocksConfigurationArgs();
        }

        public Builder(ServerNetworkConfigurationIpBlocksConfigurationArgs defaults) {
            $ = new ServerNetworkConfigurationIpBlocksConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationType Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(@Nullable Output<String> configurationType) {
            $.configurationType = configurationType;
            return this;
        }

        /**
         * @param configurationType Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
         * 
         * @return builder
         * 
         */
        public Builder configurationType(String configurationType) {
            return configurationType(Output.of(configurationType));
        }

        /**
         * @param ipBlocks Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
         * 
         * The `ip_blocks` block has field `server_ip_block`.
         * The `server_ip_block` block has 2 fields:
         * 
         * @return builder
         * 
         */
        public Builder ipBlocks(@Nullable Output<List<ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs>> ipBlocks) {
            $.ipBlocks = ipBlocks;
            return this;
        }

        /**
         * @param ipBlocks Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
         * 
         * The `ip_blocks` block has field `server_ip_block`.
         * The `server_ip_block` block has 2 fields:
         * 
         * @return builder
         * 
         */
        public Builder ipBlocks(List<ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs> ipBlocks) {
            return ipBlocks(Output.of(ipBlocks));
        }

        /**
         * @param ipBlocks Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
         * 
         * The `ip_blocks` block has field `server_ip_block`.
         * The `server_ip_block` block has 2 fields:
         * 
         * @return builder
         * 
         */
        public Builder ipBlocks(ServerNetworkConfigurationIpBlocksConfigurationIpBlockArgs... ipBlocks) {
            return ipBlocks(List.of(ipBlocks));
        }

        public ServerNetworkConfigurationIpBlocksConfigurationArgs build() {
            return $;
        }
    }

}
