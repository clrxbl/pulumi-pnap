// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap;

import com.phoenixnap.pulumi.pnap.ServerArgs;
import com.phoenixnap.pulumi.pnap.Utilities;
import com.phoenixnap.pulumi.pnap.inputs.ServerState;
import com.phoenixnap.pulumi.pnap.outputs.ServerCloudInit;
import com.phoenixnap.pulumi.pnap.outputs.ServerNetrisController;
import com.phoenixnap.pulumi.pnap.outputs.ServerNetrisSoftgate;
import com.phoenixnap.pulumi.pnap.outputs.ServerNetworkConfiguration;
import com.phoenixnap.pulumi.pnap.outputs.ServerStorageConfiguration;
import com.phoenixnap.pulumi.pnap.outputs.ServerTag;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a phoenixNAP server resource. This can be used to create,
 * modify, and delete servers.
 * 
 * ## Example Usage
 * 
 * Create a server
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.pnap.Server;
 * import com.pulumi.pnap.ServerArgs;
 * import com.pulumi.pnap.inputs.ServerCloudInitArgs;
 * import com.pulumi.pnap.inputs.ServerNetworkConfigurationArgs;
 * import com.pulumi.pnap.inputs.ServerNetworkConfigurationPrivateNetworkConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test_Server_1 = new Server(&#34;test-Server-1&#34;, ServerArgs.builder()        
 *             .hostname(&#34;Test-Server-1&#34;)
 *             .os(&#34;ubuntu/bionic&#34;)
 *             .type(&#34;s1.c1.medium&#34;)
 *             .location(&#34;PHX&#34;)
 *             .installDefaultSshKeys(true)
 *             .sshKeys(&#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126&#34;)
 *             .cloudInit(ServerCloudInitArgs.builder()
 *                 .userData(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(&#34;~/terraform-provider-pnap/create-folder.txt&#34;))))
 *                 .build())
 *             .networkConfiguration(ServerNetworkConfigurationArgs.builder()
 *                 .privateNetworkConfiguration(ServerNetworkConfigurationPrivateNetworkConfigurationArgs.builder()
 *                     .configurationType(&#34;USER_DEFINED&#34;)
 *                     .privateNetworks(                    
 *                         ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs.builder()
 *                             .serverPrivateNetwork(ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs.builder()
 *                                 .id(pnap_private_network.Test-Network-33().id())
 *                                 .ips(&#34;10.0.0.12&#34;)
 *                                 .build())
 *                             .build(),
 *                         ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs.builder()
 *                             .serverPrivateNetwork(ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs.builder()
 *                                 .id(pnap_private_network.Test-Network-44().id())
 *                                 .ips(&#34;172.16.0.12&#34;)
 *                                 .build())
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="pnap:index/server:Server")
public class Server extends com.pulumi.resources.CustomResource {
    /**
     * Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
     * 
     */
    @Export(name="action", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> action;

    /**
     * @return Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
     * 
     */
    public Output<Optional<String>> action() {
        return Codegen.optional(this.action);
    }
    /**
     * Cloud-init configuration details. Structure is documented below.
     * 
     */
    @Export(name="cloudInit", refs={ServerCloudInit.class}, tree="[0]")
    private Output<ServerCloudInit> cloudInit;

    /**
     * @return Cloud-init configuration details. Structure is documented below.
     * 
     */
    public Output<ServerCloudInit> cloudInit() {
        return this.cloudInit;
    }
    /**
     * The cluster reference id if any.
     * 
     */
    @Export(name="clusterId", refs={String.class}, tree="[0]")
    private Output<String> clusterId;

    /**
     * @return The cluster reference id if any.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }
    /**
     * The number of physical cores present on each CPU.
     * 
     */
    @Export(name="coresPerCpu", refs={Integer.class}, tree="[0]")
    private Output<Integer> coresPerCpu;

    /**
     * @return The number of physical cores present on each CPU.
     * 
     */
    public Output<Integer> coresPerCpu() {
        return this.coresPerCpu;
    }
    /**
     * A description of the machine CPU.
     * 
     */
    @Export(name="cpu", refs={String.class}, tree="[0]")
    private Output<String> cpu;

    /**
     * @return A description of the machine CPU.
     * 
     */
    public Output<String> cpu() {
        return this.cpu;
    }
    /**
     * The number of CPUs available in the system.
     * 
     */
    @Export(name="cpuCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> cpuCount;

    /**
     * @return The number of CPUs available in the system.
     * 
     */
    public Output<Integer> cpuCount() {
        return this.cpuCount;
    }
    /**
     * The CPU frequency in GHz.
     * 
     */
    @Export(name="cpuFrequencyInGhz", refs={Integer.class}, tree="[0]")
    private Output<Integer> cpuFrequencyInGhz;

    /**
     * @return The CPU frequency in GHz.
     * 
     */
    public Output<Integer> cpuFrequencyInGhz() {
        return this.cpuFrequencyInGhz;
    }
    /**
     * Server description.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Server description.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
     * 
     * The `cloud_init` block has one field:
     * 
     */
    @Export(name="force", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> force;

    /**
     * @return Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
     * 
     * The `cloud_init` block has one field:
     * 
     */
    public Output<Optional<Boolean>> force() {
        return Codegen.optional(this.force);
    }
    /**
     * Server hostname.
     * 
     */
    @Export(name="hostname", refs={String.class}, tree="[0]")
    private Output<String> hostname;

    /**
     * @return Server hostname.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }
    @Export(name="installDefaultSshKeys", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> installDefaultSshKeys;

    public Output<Optional<Boolean>> installDefaultSshKeys() {
        return Codegen.optional(this.installDefaultSshKeys);
    }
    /**
     * If true, OS will be installed to and booted from the server&#39;s RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
     * 
     */
    @Export(name="installOsToRam", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> installOsToRam;

    /**
     * @return If true, OS will be installed to and booted from the server&#39;s RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
     * 
     */
    public Output<Boolean> installOsToRam() {
        return this.installOsToRam;
    }
    /**
     * Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
     * 
     */
    @Export(name="managementAccessAllowedIps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> managementAccessAllowedIps;

    /**
     * @return Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
     * 
     */
    public Output<List<String>> managementAccessAllowedIps() {
        return this.managementAccessAllowedIps;
    }
    /**
     * The URL of the management UI which will only be returned in response to provisioning a server.
     * 
     */
    @Export(name="managementUiUrl", refs={String.class}, tree="[0]")
    private Output<String> managementUiUrl;

    /**
     * @return The URL of the management UI which will only be returned in response to provisioning a server.
     * 
     */
    public Output<String> managementUiUrl() {
        return this.managementUiUrl;
    }
    /**
     * Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
     * 
     */
    @Export(name="netrisControllers", refs={List.class,ServerNetrisController.class}, tree="[0,1]")
    private Output<List<ServerNetrisController>> netrisControllers;

    /**
     * @return Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
     * 
     */
    public Output<List<ServerNetrisController>> netrisControllers() {
        return this.netrisControllers;
    }
    /**
     * Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
     * 
     */
    @Export(name="netrisSoftgate", refs={ServerNetrisSoftgate.class}, tree="[0]")
    private Output<ServerNetrisSoftgate> netrisSoftgate;

    /**
     * @return Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
     * 
     */
    public Output<ServerNetrisSoftgate> netrisSoftgate() {
        return this.netrisSoftgate;
    }
    /**
     * Entire network details of bare metal server. Structure is documented below.
     * 
     */
    @Export(name="networkConfiguration", refs={ServerNetworkConfiguration.class}, tree="[0]")
    private Output<ServerNetworkConfiguration> networkConfiguration;

    /**
     * @return Entire network details of bare metal server. Structure is documented below.
     * 
     */
    public Output<ServerNetworkConfiguration> networkConfiguration() {
        return this.networkConfiguration;
    }
    /**
     * The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
     * 
     */
    @Export(name="networkType", refs={String.class}, tree="[0]")
    private Output<String> networkType;

    /**
     * @return The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
     * 
     */
    public Output<String> networkType() {
        return this.networkType;
    }
    /**
     * The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
     * 
     */
    @Export(name="os", refs={String.class}, tree="[0]")
    private Output<String> os;

    /**
     * @return The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
     * 
     */
    public Output<String> os() {
        return this.os;
    }
    /**
     * Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    /**
     * @return Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
     * 
     */
    @Export(name="pricingModel", refs={String.class}, tree="[0]")
    private Output<String> pricingModel;

    /**
     * @return Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
     * 
     */
    public Output<String> pricingModel() {
        return this.pricingModel;
    }
    /**
     * Private IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    @Export(name="privateIpAddresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> privateIpAddresses;

    /**
     * @return Private IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    public Output<List<String>> privateIpAddresses() {
        return this.privateIpAddresses;
    }
    /**
     * Date and time when server was provisioned.
     * 
     */
    @Export(name="provisionedOn", refs={String.class}, tree="[0]")
    private Output<String> provisionedOn;

    /**
     * @return Date and time when server was provisioned.
     * 
     */
    public Output<String> provisionedOn() {
        return this.provisionedOn;
    }
    /**
     * Public IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    @Export(name="publicIpAddresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> publicIpAddresses;

    /**
     * @return Public IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    public Output<List<String>> publicIpAddresses() {
        return this.publicIpAddresses;
    }
    /**
     * A description of the machine RAM.
     * 
     */
    @Export(name="ram", refs={String.class}, tree="[0]")
    private Output<String> ram;

    /**
     * @return A description of the machine RAM.
     * 
     */
    public Output<String> ram() {
        return this.ram;
    }
    /**
     * List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
     * 
     */
    @Export(name="rdpAllowedIps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> rdpAllowedIps;

    /**
     * @return List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
     * 
     */
    public Output<List<String>> rdpAllowedIps() {
        return this.rdpAllowedIps;
    }
    /**
     * Server reservation ID.
     * 
     */
    @Export(name="reservationId", refs={String.class}, tree="[0]")
    private Output<String> reservationId;

    /**
     * @return Server reservation ID.
     * 
     */
    public Output<String> reservationId() {
        return this.reservationId;
    }
    /**
     * Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
     * 
     */
    @Export(name="rootPassword", refs={String.class}, tree="[0]")
    private Output<String> rootPassword;

    /**
     * @return Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
     * 
     */
    public Output<String> rootPassword() {
        return this.rootPassword;
    }
    /**
     * A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
     * 
     */
    @Export(name="sshKeyIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sshKeyIds;

    /**
     * @return A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
     * 
     */
    public Output<Optional<List<String>>> sshKeyIds() {
        return Codegen.optional(this.sshKeyIds);
    }
    /**
     * A list of SSH Keys that will be installed on the server.
     * 
     */
    @Export(name="sshKeys", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sshKeys;

    /**
     * @return A list of SSH Keys that will be installed on the server.
     * 
     */
    public Output<Optional<List<String>>> sshKeys() {
        return Codegen.optional(this.sshKeys);
    }
    /**
     * The status of the server.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return The status of the server.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * A description of the machine storage.
     * 
     */
    @Export(name="storage", refs={String.class}, tree="[0]")
    private Output<String> storage;

    /**
     * @return A description of the machine storage.
     * 
     */
    public Output<String> storage() {
        return this.storage;
    }
    /**
     * Storage configuration. Structure is documented below.
     * 
     */
    @Export(name="storageConfiguration", refs={ServerStorageConfiguration.class}, tree="[0]")
    private Output</* @Nullable */ ServerStorageConfiguration> storageConfiguration;

    /**
     * @return Storage configuration. Structure is documented below.
     * 
     */
    public Output<Optional<ServerStorageConfiguration>> storageConfiguration() {
        return Codegen.optional(this.storageConfiguration);
    }
    /**
     * Unique identifier of the server to which the reservation has been transferred.
     * 
     */
    @Export(name="supersededBy", refs={String.class}, tree="[0]")
    private Output<String> supersededBy;

    /**
     * @return Unique identifier of the server to which the reservation has been transferred.
     * 
     */
    public Output<String> supersededBy() {
        return this.supersededBy;
    }
    /**
     * Unique identifier of the server from which the reservation has been transferred.
     * 
     */
    @Export(name="supersedes", refs={String.class}, tree="[0]")
    private Output<String> supersedes;

    /**
     * @return Unique identifier of the server from which the reservation has been transferred.
     * 
     */
    public Output<String> supersedes() {
        return this.supersedes;
    }
    /**
     * Tags to set to server, if any. Structure is documented below.
     * 
     */
    @Export(name="tags", refs={List.class,ServerTag.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServerTag>> tags;

    /**
     * @return Tags to set to server, if any. Structure is documented below.
     * 
     */
    public Output<Optional<List<ServerTag>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Server(String name) {
        this(name, ServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Server(String name, ServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Server(String name, ServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pnap:index/server:Server", name, args == null ? ServerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Server(String name, Output<String> id, @Nullable ServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("pnap:index/server:Server", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Server get(String name, Output<String> id, @Nullable ServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Server(name, id, state, options);
    }
}
