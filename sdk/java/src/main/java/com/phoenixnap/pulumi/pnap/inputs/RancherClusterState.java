// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.phoenixnap.pulumi.pnap.inputs.RancherClusterConfigurationArgs;
import com.phoenixnap.pulumi.pnap.inputs.RancherClusterMetadataArgs;
import com.phoenixnap.pulumi.pnap.inputs.RancherClusterNodePoolsArgs;
import com.phoenixnap.pulumi.pnap.inputs.RancherClusterWorkloadConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RancherClusterState extends com.pulumi.resources.ResourceArgs {

    public static final RancherClusterState Empty = new RancherClusterState();

    /**
     * Rancher configuration parameters. The `configuration` block has 7 fields.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<RancherClusterConfigurationArgs> configuration;

    /**
     * @return Rancher configuration parameters. The `configuration` block has 7 fields.
     * 
     */
    public Optional<Output<RancherClusterConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * Cluster description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Cluster description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Rancher version that was installed on the cluster during the first creation process.
     * 
     */
    @Import(name="initialClusterVersion")
    private @Nullable Output<String> initialClusterVersion;

    /**
     * @return The Rancher version that was installed on the cluster during the first creation process.
     * 
     */
    public Optional<Output<String>> initialClusterVersion() {
        return Optional.ofNullable(this.initialClusterVersion);
    }

    /**
     * Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Connection parameters to use to connect to the Rancher Server Administrative GUI.
     * 
     */
    @Import(name="metadatas")
    private @Nullable Output<List<RancherClusterMetadataArgs>> metadatas;

    /**
     * @return Connection parameters to use to connect to the Rancher Server Administrative GUI.
     * 
     */
    public Optional<Output<List<RancherClusterMetadataArgs>>> metadatas() {
        return Optional.ofNullable(this.metadatas);
    }

    /**
     * The name of the workload cluster. This field is autogenerated if not provided.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the workload cluster. This field is autogenerated if not provided.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
     * 
     */
    @Import(name="nodePools")
    private @Nullable Output<RancherClusterNodePoolsArgs> nodePools;

    /**
     * @return The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
     * 
     */
    public Optional<Output<RancherClusterNodePoolsArgs>> nodePools() {
        return Optional.ofNullable(this.nodePools);
    }

    /**
     * The cluster status.
     * 
     */
    @Import(name="statusDescription")
    private @Nullable Output<String> statusDescription;

    /**
     * @return The cluster status.
     * 
     */
    public Optional<Output<String>> statusDescription() {
        return Optional.ofNullable(this.statusDescription);
    }

    /**
     * Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
     * 
     */
    @Import(name="workloadConfiguration")
    private @Nullable Output<RancherClusterWorkloadConfigurationArgs> workloadConfiguration;

    /**
     * @return Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
     * 
     */
    public Optional<Output<RancherClusterWorkloadConfigurationArgs>> workloadConfiguration() {
        return Optional.ofNullable(this.workloadConfiguration);
    }

    private RancherClusterState() {}

    private RancherClusterState(RancherClusterState $) {
        this.configuration = $.configuration;
        this.description = $.description;
        this.initialClusterVersion = $.initialClusterVersion;
        this.location = $.location;
        this.metadatas = $.metadatas;
        this.name = $.name;
        this.nodePools = $.nodePools;
        this.statusDescription = $.statusDescription;
        this.workloadConfiguration = $.workloadConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RancherClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RancherClusterState $;

        public Builder() {
            $ = new RancherClusterState();
        }

        public Builder(RancherClusterState defaults) {
            $ = new RancherClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration Rancher configuration parameters. The `configuration` block has 7 fields.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<RancherClusterConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration Rancher configuration parameters. The `configuration` block has 7 fields.
         * 
         * @return builder
         * 
         */
        public Builder configuration(RancherClusterConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param description Cluster description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Cluster description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param initialClusterVersion The Rancher version that was installed on the cluster during the first creation process.
         * 
         * @return builder
         * 
         */
        public Builder initialClusterVersion(@Nullable Output<String> initialClusterVersion) {
            $.initialClusterVersion = initialClusterVersion;
            return this;
        }

        /**
         * @param initialClusterVersion The Rancher version that was installed on the cluster during the first creation process.
         * 
         * @return builder
         * 
         */
        public Builder initialClusterVersion(String initialClusterVersion) {
            return initialClusterVersion(Output.of(initialClusterVersion));
        }

        /**
         * @param location Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param metadatas Connection parameters to use to connect to the Rancher Server Administrative GUI.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(@Nullable Output<List<RancherClusterMetadataArgs>> metadatas) {
            $.metadatas = metadatas;
            return this;
        }

        /**
         * @param metadatas Connection parameters to use to connect to the Rancher Server Administrative GUI.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(List<RancherClusterMetadataArgs> metadatas) {
            return metadatas(Output.of(metadatas));
        }

        /**
         * @param metadatas Connection parameters to use to connect to the Rancher Server Administrative GUI.
         * 
         * @return builder
         * 
         */
        public Builder metadatas(RancherClusterMetadataArgs... metadatas) {
            return metadatas(List.of(metadatas));
        }

        /**
         * @param name The name of the workload cluster. This field is autogenerated if not provided.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the workload cluster. This field is autogenerated if not provided.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodePools The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
         * 
         * @return builder
         * 
         */
        public Builder nodePools(@Nullable Output<RancherClusterNodePoolsArgs> nodePools) {
            $.nodePools = nodePools;
            return this;
        }

        /**
         * @param nodePools The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.
         * 
         * @return builder
         * 
         */
        public Builder nodePools(RancherClusterNodePoolsArgs nodePools) {
            return nodePools(Output.of(nodePools));
        }

        /**
         * @param statusDescription The cluster status.
         * 
         * @return builder
         * 
         */
        public Builder statusDescription(@Nullable Output<String> statusDescription) {
            $.statusDescription = statusDescription;
            return this;
        }

        /**
         * @param statusDescription The cluster status.
         * 
         * @return builder
         * 
         */
        public Builder statusDescription(String statusDescription) {
            return statusDescription(Output.of(statusDescription));
        }

        /**
         * @param workloadConfiguration Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
         * 
         * @return builder
         * 
         */
        public Builder workloadConfiguration(@Nullable Output<RancherClusterWorkloadConfigurationArgs> workloadConfiguration) {
            $.workloadConfiguration = workloadConfiguration;
            return this;
        }

        /**
         * @param workloadConfiguration Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.
         * 
         * @return builder
         * 
         */
        public Builder workloadConfiguration(RancherClusterWorkloadConfigurationArgs workloadConfiguration) {
            return workloadConfiguration(Output.of(workloadConfiguration));
        }

        public RancherClusterState build() {
            return $;
        }
    }

}
