// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.outputs;

import com.phoenixnap.pulumi.pnap.outputs.GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProductAvailabilityProductAvailability {
    /**
     * @return Infos about location, solutions and availability for a product.
     * 
     */
    private List<GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail> locationAvailabilityDetails;
    /**
     * @return Product category. Currently only `SERVER` category is supported.
     * 
     */
    private String productCategory;
    /**
     * @return The code identifying the product. This code has significance across all locations.
     * 
     */
    private String productCode;

    private GetProductAvailabilityProductAvailability() {}
    /**
     * @return Infos about location, solutions and availability for a product.
     * 
     */
    public List<GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail> locationAvailabilityDetails() {
        return this.locationAvailabilityDetails;
    }
    /**
     * @return Product category. Currently only `SERVER` category is supported.
     * 
     */
    public String productCategory() {
        return this.productCategory;
    }
    /**
     * @return The code identifying the product. This code has significance across all locations.
     * 
     */
    public String productCode() {
        return this.productCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProductAvailabilityProductAvailability defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail> locationAvailabilityDetails;
        private String productCategory;
        private String productCode;
        public Builder() {}
        public Builder(GetProductAvailabilityProductAvailability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.locationAvailabilityDetails = defaults.locationAvailabilityDetails;
    	      this.productCategory = defaults.productCategory;
    	      this.productCode = defaults.productCode;
        }

        @CustomType.Setter
        public Builder locationAvailabilityDetails(List<GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail> locationAvailabilityDetails) {
            if (locationAvailabilityDetails == null) {
              throw new MissingRequiredPropertyException("GetProductAvailabilityProductAvailability", "locationAvailabilityDetails");
            }
            this.locationAvailabilityDetails = locationAvailabilityDetails;
            return this;
        }
        public Builder locationAvailabilityDetails(GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail... locationAvailabilityDetails) {
            return locationAvailabilityDetails(List.of(locationAvailabilityDetails));
        }
        @CustomType.Setter
        public Builder productCategory(String productCategory) {
            if (productCategory == null) {
              throw new MissingRequiredPropertyException("GetProductAvailabilityProductAvailability", "productCategory");
            }
            this.productCategory = productCategory;
            return this;
        }
        @CustomType.Setter
        public Builder productCode(String productCode) {
            if (productCode == null) {
              throw new MissingRequiredPropertyException("GetProductAvailabilityProductAvailability", "productCode");
            }
            this.productCode = productCode;
            return this;
        }
        public GetProductAvailabilityProductAvailability build() {
            final var _resultValue = new GetProductAvailabilityProductAvailability();
            _resultValue.locationAvailabilityDetails = locationAvailabilityDetails;
            _resultValue.productCategory = productCategory;
            _resultValue.productCode = productCode;
            return _resultValue;
        }
    }
}
