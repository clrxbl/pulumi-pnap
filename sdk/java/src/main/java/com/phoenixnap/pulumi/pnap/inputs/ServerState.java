// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.phoenixnap.pulumi.pnap.inputs;

import com.phoenixnap.pulumi.pnap.inputs.ServerCloudInitArgs;
import com.phoenixnap.pulumi.pnap.inputs.ServerNetrisControllerArgs;
import com.phoenixnap.pulumi.pnap.inputs.ServerNetrisSoftgateArgs;
import com.phoenixnap.pulumi.pnap.inputs.ServerNetworkConfigurationArgs;
import com.phoenixnap.pulumi.pnap.inputs.ServerStorageConfigurationArgs;
import com.phoenixnap.pulumi.pnap.inputs.ServerTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerState extends com.pulumi.resources.ResourceArgs {

    public static final ServerState Empty = new ServerState();

    /**
     * Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Cloud-init configuration details. Structure is documented below.
     * 
     */
    @Import(name="cloudInit")
    private @Nullable Output<ServerCloudInitArgs> cloudInit;

    /**
     * @return Cloud-init configuration details. Structure is documented below.
     * 
     */
    public Optional<Output<ServerCloudInitArgs>> cloudInit() {
        return Optional.ofNullable(this.cloudInit);
    }

    /**
     * The cluster reference id if any.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The cluster reference id if any.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The number of physical cores present on each CPU.
     * 
     */
    @Import(name="coresPerCpu")
    private @Nullable Output<Integer> coresPerCpu;

    /**
     * @return The number of physical cores present on each CPU.
     * 
     */
    public Optional<Output<Integer>> coresPerCpu() {
        return Optional.ofNullable(this.coresPerCpu);
    }

    /**
     * A description of the machine CPU.
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<String> cpu;

    /**
     * @return A description of the machine CPU.
     * 
     */
    public Optional<Output<String>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * The number of CPUs available in the system.
     * 
     */
    @Import(name="cpuCount")
    private @Nullable Output<Integer> cpuCount;

    /**
     * @return The number of CPUs available in the system.
     * 
     */
    public Optional<Output<Integer>> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }

    /**
     * The CPU frequency in GHz.
     * 
     */
    @Import(name="cpuFrequencyInGhz")
    private @Nullable Output<Integer> cpuFrequencyInGhz;

    /**
     * @return The CPU frequency in GHz.
     * 
     */
    public Optional<Output<Integer>> cpuFrequencyInGhz() {
        return Optional.ofNullable(this.cpuFrequencyInGhz);
    }

    /**
     * Server description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Server description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
     * 
     * The `cloud_init` block has one field:
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
     * 
     * The `cloud_init` block has one field:
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * Server hostname.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Server hostname.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    @Import(name="installDefaultSshKeys")
    private @Nullable Output<Boolean> installDefaultSshKeys;

    public Optional<Output<Boolean>> installDefaultSshKeys() {
        return Optional.ofNullable(this.installDefaultSshKeys);
    }

    /**
     * If true, OS will be installed to and booted from the server&#39;s RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
     * 
     */
    @Import(name="installOsToRam")
    private @Nullable Output<Boolean> installOsToRam;

    /**
     * @return If true, OS will be installed to and booted from the server&#39;s RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> installOsToRam() {
        return Optional.ofNullable(this.installOsToRam);
    }

    /**
     * Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
     * 
     */
    @Import(name="managementAccessAllowedIps")
    private @Nullable Output<List<String>> managementAccessAllowedIps;

    /**
     * @return Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
     * 
     */
    public Optional<Output<List<String>>> managementAccessAllowedIps() {
        return Optional.ofNullable(this.managementAccessAllowedIps);
    }

    /**
     * The URL of the management UI which will only be returned in response to provisioning a server.
     * 
     */
    @Import(name="managementUiUrl")
    private @Nullable Output<String> managementUiUrl;

    /**
     * @return The URL of the management UI which will only be returned in response to provisioning a server.
     * 
     */
    public Optional<Output<String>> managementUiUrl() {
        return Optional.ofNullable(this.managementUiUrl);
    }

    /**
     * Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
     * 
     */
    @Import(name="netrisControllers")
    private @Nullable Output<List<ServerNetrisControllerArgs>> netrisControllers;

    /**
     * @return Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
     * 
     */
    public Optional<Output<List<ServerNetrisControllerArgs>>> netrisControllers() {
        return Optional.ofNullable(this.netrisControllers);
    }

    /**
     * Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
     * 
     */
    @Import(name="netrisSoftgate")
    private @Nullable Output<ServerNetrisSoftgateArgs> netrisSoftgate;

    /**
     * @return Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
     * 
     */
    public Optional<Output<ServerNetrisSoftgateArgs>> netrisSoftgate() {
        return Optional.ofNullable(this.netrisSoftgate);
    }

    /**
     * Entire network details of bare metal server. Structure is documented below.
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<ServerNetworkConfigurationArgs> networkConfiguration;

    /**
     * @return Entire network details of bare metal server. Structure is documented below.
     * 
     */
    public Optional<Output<ServerNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    /**
     * The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
     * 
     */
    @Import(name="networkType")
    private @Nullable Output<String> networkType;

    /**
     * @return The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
     * 
     */
    public Optional<Output<String>> networkType() {
        return Optional.ofNullable(this.networkType);
    }

    /**
     * The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
     * 
     */
    @Import(name="pricingModel")
    private @Nullable Output<String> pricingModel;

    /**
     * @return Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
     * 
     */
    public Optional<Output<String>> pricingModel() {
        return Optional.ofNullable(this.pricingModel);
    }

    /**
     * Private IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    @Import(name="privateIpAddresses")
    private @Nullable Output<List<String>> privateIpAddresses;

    /**
     * @return Private IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    public Optional<Output<List<String>>> privateIpAddresses() {
        return Optional.ofNullable(this.privateIpAddresses);
    }

    /**
     * Date and time when server was provisioned.
     * 
     */
    @Import(name="provisionedOn")
    private @Nullable Output<String> provisionedOn;

    /**
     * @return Date and time when server was provisioned.
     * 
     */
    public Optional<Output<String>> provisionedOn() {
        return Optional.ofNullable(this.provisionedOn);
    }

    /**
     * Public IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    @Import(name="publicIpAddresses")
    private @Nullable Output<List<String>> publicIpAddresses;

    /**
     * @return Public IP Addresses assigned to server. Must contain at least 1 item.
     * 
     */
    public Optional<Output<List<String>>> publicIpAddresses() {
        return Optional.ofNullable(this.publicIpAddresses);
    }

    /**
     * A description of the machine RAM.
     * 
     */
    @Import(name="ram")
    private @Nullable Output<String> ram;

    /**
     * @return A description of the machine RAM.
     * 
     */
    public Optional<Output<String>> ram() {
        return Optional.ofNullable(this.ram);
    }

    /**
     * List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
     * 
     */
    @Import(name="rdpAllowedIps")
    private @Nullable Output<List<String>> rdpAllowedIps;

    /**
     * @return List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
     * 
     */
    public Optional<Output<List<String>>> rdpAllowedIps() {
        return Optional.ofNullable(this.rdpAllowedIps);
    }

    /**
     * Server reservation ID.
     * 
     */
    @Import(name="reservationId")
    private @Nullable Output<String> reservationId;

    /**
     * @return Server reservation ID.
     * 
     */
    public Optional<Output<String>> reservationId() {
        return Optional.ofNullable(this.reservationId);
    }

    /**
     * Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
     * 
     */
    @Import(name="rootPassword")
    private @Nullable Output<String> rootPassword;

    /**
     * @return Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
     * 
     */
    public Optional<Output<String>> rootPassword() {
        return Optional.ofNullable(this.rootPassword);
    }

    /**
     * A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
     * 
     */
    @Import(name="sshKeyIds")
    private @Nullable Output<List<String>> sshKeyIds;

    /**
     * @return A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
     * 
     */
    public Optional<Output<List<String>>> sshKeyIds() {
        return Optional.ofNullable(this.sshKeyIds);
    }

    /**
     * A list of SSH Keys that will be installed on the server.
     * 
     */
    @Import(name="sshKeys")
    private @Nullable Output<List<String>> sshKeys;

    /**
     * @return A list of SSH Keys that will be installed on the server.
     * 
     */
    public Optional<Output<List<String>>> sshKeys() {
        return Optional.ofNullable(this.sshKeys);
    }

    /**
     * The status of the server.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the server.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A description of the machine storage.
     * 
     */
    @Import(name="storage")
    private @Nullable Output<String> storage;

    /**
     * @return A description of the machine storage.
     * 
     */
    public Optional<Output<String>> storage() {
        return Optional.ofNullable(this.storage);
    }

    /**
     * Storage configuration. Structure is documented below.
     * 
     */
    @Import(name="storageConfiguration")
    private @Nullable Output<ServerStorageConfigurationArgs> storageConfiguration;

    /**
     * @return Storage configuration. Structure is documented below.
     * 
     */
    public Optional<Output<ServerStorageConfigurationArgs>> storageConfiguration() {
        return Optional.ofNullable(this.storageConfiguration);
    }

    /**
     * Unique identifier of the server to which the reservation has been transferred.
     * 
     */
    @Import(name="supersededBy")
    private @Nullable Output<String> supersededBy;

    /**
     * @return Unique identifier of the server to which the reservation has been transferred.
     * 
     */
    public Optional<Output<String>> supersededBy() {
        return Optional.ofNullable(this.supersededBy);
    }

    /**
     * Unique identifier of the server from which the reservation has been transferred.
     * 
     */
    @Import(name="supersedes")
    private @Nullable Output<String> supersedes;

    /**
     * @return Unique identifier of the server from which the reservation has been transferred.
     * 
     */
    public Optional<Output<String>> supersedes() {
        return Optional.ofNullable(this.supersedes);
    }

    /**
     * Tags to set to server, if any. Structure is documented below.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ServerTagArgs>> tags;

    /**
     * @return Tags to set to server, if any. Structure is documented below.
     * 
     */
    public Optional<Output<List<ServerTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServerState() {}

    private ServerState(ServerState $) {
        this.action = $.action;
        this.cloudInit = $.cloudInit;
        this.clusterId = $.clusterId;
        this.coresPerCpu = $.coresPerCpu;
        this.cpu = $.cpu;
        this.cpuCount = $.cpuCount;
        this.cpuFrequencyInGhz = $.cpuFrequencyInGhz;
        this.description = $.description;
        this.force = $.force;
        this.hostname = $.hostname;
        this.installDefaultSshKeys = $.installDefaultSshKeys;
        this.installOsToRam = $.installOsToRam;
        this.location = $.location;
        this.managementAccessAllowedIps = $.managementAccessAllowedIps;
        this.managementUiUrl = $.managementUiUrl;
        this.netrisControllers = $.netrisControllers;
        this.netrisSoftgate = $.netrisSoftgate;
        this.networkConfiguration = $.networkConfiguration;
        this.networkType = $.networkType;
        this.os = $.os;
        this.password = $.password;
        this.pricingModel = $.pricingModel;
        this.privateIpAddresses = $.privateIpAddresses;
        this.provisionedOn = $.provisionedOn;
        this.publicIpAddresses = $.publicIpAddresses;
        this.ram = $.ram;
        this.rdpAllowedIps = $.rdpAllowedIps;
        this.reservationId = $.reservationId;
        this.rootPassword = $.rootPassword;
        this.sshKeyIds = $.sshKeyIds;
        this.sshKeys = $.sshKeys;
        this.status = $.status;
        this.storage = $.storage;
        this.storageConfiguration = $.storageConfiguration;
        this.supersededBy = $.supersededBy;
        this.supersedes = $.supersedes;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerState $;

        public Builder() {
            $ = new ServerState();
        }

        public Builder(ServerState defaults) {
            $ = new ServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param cloudInit Cloud-init configuration details. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cloudInit(@Nullable Output<ServerCloudInitArgs> cloudInit) {
            $.cloudInit = cloudInit;
            return this;
        }

        /**
         * @param cloudInit Cloud-init configuration details. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cloudInit(ServerCloudInitArgs cloudInit) {
            return cloudInit(Output.of(cloudInit));
        }

        /**
         * @param clusterId The cluster reference id if any.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The cluster reference id if any.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param coresPerCpu The number of physical cores present on each CPU.
         * 
         * @return builder
         * 
         */
        public Builder coresPerCpu(@Nullable Output<Integer> coresPerCpu) {
            $.coresPerCpu = coresPerCpu;
            return this;
        }

        /**
         * @param coresPerCpu The number of physical cores present on each CPU.
         * 
         * @return builder
         * 
         */
        public Builder coresPerCpu(Integer coresPerCpu) {
            return coresPerCpu(Output.of(coresPerCpu));
        }

        /**
         * @param cpu A description of the machine CPU.
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<String> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu A description of the machine CPU.
         * 
         * @return builder
         * 
         */
        public Builder cpu(String cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param cpuCount The number of CPUs available in the system.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(@Nullable Output<Integer> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount The number of CPUs available in the system.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Integer cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param cpuFrequencyInGhz The CPU frequency in GHz.
         * 
         * @return builder
         * 
         */
        public Builder cpuFrequencyInGhz(@Nullable Output<Integer> cpuFrequencyInGhz) {
            $.cpuFrequencyInGhz = cpuFrequencyInGhz;
            return this;
        }

        /**
         * @param cpuFrequencyInGhz The CPU frequency in GHz.
         * 
         * @return builder
         * 
         */
        public Builder cpuFrequencyInGhz(Integer cpuFrequencyInGhz) {
            return cpuFrequencyInGhz(Output.of(cpuFrequencyInGhz));
        }

        /**
         * @param description Server description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Server description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param force Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
         * 
         * The `cloud_init` block has one field:
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
         * 
         * The `cloud_init` block has one field:
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param hostname Server hostname.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Server hostname.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder installDefaultSshKeys(@Nullable Output<Boolean> installDefaultSshKeys) {
            $.installDefaultSshKeys = installDefaultSshKeys;
            return this;
        }

        public Builder installDefaultSshKeys(Boolean installDefaultSshKeys) {
            return installDefaultSshKeys(Output.of(installDefaultSshKeys));
        }

        /**
         * @param installOsToRam If true, OS will be installed to and booted from the server&#39;s RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder installOsToRam(@Nullable Output<Boolean> installOsToRam) {
            $.installOsToRam = installOsToRam;
            return this;
        }

        /**
         * @param installOsToRam If true, OS will be installed to and booted from the server&#39;s RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder installOsToRam(Boolean installOsToRam) {
            return installOsToRam(Output.of(installOsToRam));
        }

        /**
         * @param location Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managementAccessAllowedIps Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder managementAccessAllowedIps(@Nullable Output<List<String>> managementAccessAllowedIps) {
            $.managementAccessAllowedIps = managementAccessAllowedIps;
            return this;
        }

        /**
         * @param managementAccessAllowedIps Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder managementAccessAllowedIps(List<String> managementAccessAllowedIps) {
            return managementAccessAllowedIps(Output.of(managementAccessAllowedIps));
        }

        /**
         * @param managementAccessAllowedIps Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder managementAccessAllowedIps(String... managementAccessAllowedIps) {
            return managementAccessAllowedIps(List.of(managementAccessAllowedIps));
        }

        /**
         * @param managementUiUrl The URL of the management UI which will only be returned in response to provisioning a server.
         * 
         * @return builder
         * 
         */
        public Builder managementUiUrl(@Nullable Output<String> managementUiUrl) {
            $.managementUiUrl = managementUiUrl;
            return this;
        }

        /**
         * @param managementUiUrl The URL of the management UI which will only be returned in response to provisioning a server.
         * 
         * @return builder
         * 
         */
        public Builder managementUiUrl(String managementUiUrl) {
            return managementUiUrl(Output.of(managementUiUrl));
        }

        /**
         * @param netrisControllers Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
         * 
         * @return builder
         * 
         */
        public Builder netrisControllers(@Nullable Output<List<ServerNetrisControllerArgs>> netrisControllers) {
            $.netrisControllers = netrisControllers;
            return this;
        }

        /**
         * @param netrisControllers Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
         * 
         * @return builder
         * 
         */
        public Builder netrisControllers(List<ServerNetrisControllerArgs> netrisControllers) {
            return netrisControllers(Output.of(netrisControllers));
        }

        /**
         * @param netrisControllers Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
         * 
         * @return builder
         * 
         */
        public Builder netrisControllers(ServerNetrisControllerArgs... netrisControllers) {
            return netrisControllers(List.of(netrisControllers));
        }

        /**
         * @param netrisSoftgate Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder netrisSoftgate(@Nullable Output<ServerNetrisSoftgateArgs> netrisSoftgate) {
            $.netrisSoftgate = netrisSoftgate;
            return this;
        }

        /**
         * @param netrisSoftgate Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder netrisSoftgate(ServerNetrisSoftgateArgs netrisSoftgate) {
            return netrisSoftgate(Output.of(netrisSoftgate));
        }

        /**
         * @param networkConfiguration Entire network details of bare metal server. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(@Nullable Output<ServerNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        /**
         * @param networkConfiguration Entire network details of bare metal server. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfiguration(ServerNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        /**
         * @param networkType The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
         * 
         * @return builder
         * 
         */
        public Builder networkType(@Nullable Output<String> networkType) {
            $.networkType = networkType;
            return this;
        }

        /**
         * @param networkType The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
         * 
         * @return builder
         * 
         */
        public Builder networkType(String networkType) {
            return networkType(Output.of(networkType));
        }

        /**
         * @param os The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param password Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param pricingModel Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
         * 
         * @return builder
         * 
         */
        public Builder pricingModel(@Nullable Output<String> pricingModel) {
            $.pricingModel = pricingModel;
            return this;
        }

        /**
         * @param pricingModel Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
         * 
         * @return builder
         * 
         */
        public Builder pricingModel(String pricingModel) {
            return pricingModel(Output.of(pricingModel));
        }

        /**
         * @param privateIpAddresses Private IP Addresses assigned to server. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddresses(@Nullable Output<List<String>> privateIpAddresses) {
            $.privateIpAddresses = privateIpAddresses;
            return this;
        }

        /**
         * @param privateIpAddresses Private IP Addresses assigned to server. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddresses(List<String> privateIpAddresses) {
            return privateIpAddresses(Output.of(privateIpAddresses));
        }

        /**
         * @param privateIpAddresses Private IP Addresses assigned to server. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddresses(String... privateIpAddresses) {
            return privateIpAddresses(List.of(privateIpAddresses));
        }

        /**
         * @param provisionedOn Date and time when server was provisioned.
         * 
         * @return builder
         * 
         */
        public Builder provisionedOn(@Nullable Output<String> provisionedOn) {
            $.provisionedOn = provisionedOn;
            return this;
        }

        /**
         * @param provisionedOn Date and time when server was provisioned.
         * 
         * @return builder
         * 
         */
        public Builder provisionedOn(String provisionedOn) {
            return provisionedOn(Output.of(provisionedOn));
        }

        /**
         * @param publicIpAddresses Public IP Addresses assigned to server. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddresses(@Nullable Output<List<String>> publicIpAddresses) {
            $.publicIpAddresses = publicIpAddresses;
            return this;
        }

        /**
         * @param publicIpAddresses Public IP Addresses assigned to server. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddresses(List<String> publicIpAddresses) {
            return publicIpAddresses(Output.of(publicIpAddresses));
        }

        /**
         * @param publicIpAddresses Public IP Addresses assigned to server. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddresses(String... publicIpAddresses) {
            return publicIpAddresses(List.of(publicIpAddresses));
        }

        /**
         * @param ram A description of the machine RAM.
         * 
         * @return builder
         * 
         */
        public Builder ram(@Nullable Output<String> ram) {
            $.ram = ram;
            return this;
        }

        /**
         * @param ram A description of the machine RAM.
         * 
         * @return builder
         * 
         */
        public Builder ram(String ram) {
            return ram(Output.of(ram));
        }

        /**
         * @param rdpAllowedIps List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder rdpAllowedIps(@Nullable Output<List<String>> rdpAllowedIps) {
            $.rdpAllowedIps = rdpAllowedIps;
            return this;
        }

        /**
         * @param rdpAllowedIps List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder rdpAllowedIps(List<String> rdpAllowedIps) {
            return rdpAllowedIps(Output.of(rdpAllowedIps));
        }

        /**
         * @param rdpAllowedIps List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
         * 
         * @return builder
         * 
         */
        public Builder rdpAllowedIps(String... rdpAllowedIps) {
            return rdpAllowedIps(List.of(rdpAllowedIps));
        }

        /**
         * @param reservationId Server reservation ID.
         * 
         * @return builder
         * 
         */
        public Builder reservationId(@Nullable Output<String> reservationId) {
            $.reservationId = reservationId;
            return this;
        }

        /**
         * @param reservationId Server reservation ID.
         * 
         * @return builder
         * 
         */
        public Builder reservationId(String reservationId) {
            return reservationId(Output.of(reservationId));
        }

        /**
         * @param rootPassword Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
         * 
         * @return builder
         * 
         */
        public Builder rootPassword(@Nullable Output<String> rootPassword) {
            $.rootPassword = rootPassword;
            return this;
        }

        /**
         * @param rootPassword Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
         * 
         * @return builder
         * 
         */
        public Builder rootPassword(String rootPassword) {
            return rootPassword(Output.of(rootPassword));
        }

        /**
         * @param sshKeyIds A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(@Nullable Output<List<String>> sshKeyIds) {
            $.sshKeyIds = sshKeyIds;
            return this;
        }

        /**
         * @param sshKeyIds A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(List<String> sshKeyIds) {
            return sshKeyIds(Output.of(sshKeyIds));
        }

        /**
         * @param sshKeyIds A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
         * 
         * @return builder
         * 
         */
        public Builder sshKeyIds(String... sshKeyIds) {
            return sshKeyIds(List.of(sshKeyIds));
        }

        /**
         * @param sshKeys A list of SSH Keys that will be installed on the server.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(@Nullable Output<List<String>> sshKeys) {
            $.sshKeys = sshKeys;
            return this;
        }

        /**
         * @param sshKeys A list of SSH Keys that will be installed on the server.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(List<String> sshKeys) {
            return sshKeys(Output.of(sshKeys));
        }

        /**
         * @param sshKeys A list of SSH Keys that will be installed on the server.
         * 
         * @return builder
         * 
         */
        public Builder sshKeys(String... sshKeys) {
            return sshKeys(List.of(sshKeys));
        }

        /**
         * @param status The status of the server.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the server.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param storage A description of the machine storage.
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable Output<String> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage A description of the machine storage.
         * 
         * @return builder
         * 
         */
        public Builder storage(String storage) {
            return storage(Output.of(storage));
        }

        /**
         * @param storageConfiguration Storage configuration. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder storageConfiguration(@Nullable Output<ServerStorageConfigurationArgs> storageConfiguration) {
            $.storageConfiguration = storageConfiguration;
            return this;
        }

        /**
         * @param storageConfiguration Storage configuration. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder storageConfiguration(ServerStorageConfigurationArgs storageConfiguration) {
            return storageConfiguration(Output.of(storageConfiguration));
        }

        /**
         * @param supersededBy Unique identifier of the server to which the reservation has been transferred.
         * 
         * @return builder
         * 
         */
        public Builder supersededBy(@Nullable Output<String> supersededBy) {
            $.supersededBy = supersededBy;
            return this;
        }

        /**
         * @param supersededBy Unique identifier of the server to which the reservation has been transferred.
         * 
         * @return builder
         * 
         */
        public Builder supersededBy(String supersededBy) {
            return supersededBy(Output.of(supersededBy));
        }

        /**
         * @param supersedes Unique identifier of the server from which the reservation has been transferred.
         * 
         * @return builder
         * 
         */
        public Builder supersedes(@Nullable Output<String> supersedes) {
            $.supersedes = supersedes;
            return this;
        }

        /**
         * @param supersedes Unique identifier of the server from which the reservation has been transferred.
         * 
         * @return builder
         * 
         */
        public Builder supersedes(String supersedes) {
            return supersedes(Output.of(supersedes));
        }

        /**
         * @param tags Tags to set to server, if any. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ServerTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to set to server, if any. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ServerTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to set to server, if any. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder tags(ServerTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServerState build() {
            return $;
        }
    }

}
