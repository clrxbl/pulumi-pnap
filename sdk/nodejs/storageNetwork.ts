// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a phoenixNAP Storage Network resource. This can be used to create, modify and delete storage networks.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@phoenixnap/pulumi-pnap";
 *
 * // Create a storage network and volume
 * const storage_Network_1 = new pnap.StorageNetwork("storage-Network-1", {
 *     description: "First storage network.",
 *     location: "PHX",
 *     volumes: [{
 *         volume: {
 *             capacityInGb: 1000,
 *             name: "Volume-1",
 *             pathSuffix: "/shared-docs",
 *             tags: [
 *                 {
 *                     tagAssignment: {
 *                         name: "tag-1",
 *                         value: "PROD",
 *                     },
 *                 },
 *                 {
 *                     tagAssignment: {
 *                         name: "tag-2",
 *                     },
 *                 },
 *             ],
 *         },
 *     }],
 * });
 * ```
 */
export class StorageNetwork extends pulumi.CustomResource {
    /**
     * Get an existing StorageNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageNetworkState, opts?: pulumi.CustomResourceOptions): StorageNetwork {
        return new StorageNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pnap:index/storageNetwork:StorageNetwork';

    /**
     * Returns true if the given object is an instance of StorageNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageNetwork.__pulumiType;
    }

    /**
     * Custom Client VLAN that the Storage Network will be set to.
     */
    public readonly clientVlan!: pulumi.Output<number | undefined>;
    /**
     * Date and time when this volume was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * Date and time of the initial request for volume deletion.
     */
    public /*out*/ readonly deleteRequestedOn!: pulumi.Output<string>;
    /**
     * Volume description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * IP of the storage network
     */
    public /*out*/ readonly ips!: pulumi.Output<string[]>;
    /**
     * The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * The name of the tag.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly networkId!: pulumi.Output<string>;
    /**
     * Volume's status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
     */
    public readonly volumes!: pulumi.Output<outputs.StorageNetworkVolume[]>;

    /**
     * Create a StorageNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageNetworkArgs | StorageNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageNetworkState | undefined;
            resourceInputs["clientVlan"] = state ? state.clientVlan : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["deleteRequestedOn"] = state ? state.deleteRequestedOn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as StorageNetworkArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.volumes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumes'");
            }
            resourceInputs["clientVlan"] = args ? args.clientVlan : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["deleteRequestedOn"] = undefined /*out*/;
            resourceInputs["ips"] = undefined /*out*/;
            resourceInputs["networkId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageNetwork.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StorageNetwork resources.
 */
export interface StorageNetworkState {
    /**
     * Custom Client VLAN that the Storage Network will be set to.
     */
    clientVlan?: pulumi.Input<number>;
    /**
     * Date and time when this volume was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Date and time of the initial request for volume deletion.
     */
    deleteRequestedOn?: pulumi.Input<string>;
    /**
     * Volume description.
     */
    description?: pulumi.Input<string>;
    /**
     * IP of the storage network
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
     */
    location?: pulumi.Input<string>;
    /**
     * The name of the tag.
     */
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    /**
     * Volume's status.
     */
    status?: pulumi.Input<string>;
    /**
     * Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.StorageNetworkVolume>[]>;
}

/**
 * The set of arguments for constructing a StorageNetwork resource.
 */
export interface StorageNetworkArgs {
    /**
     * Custom Client VLAN that the Storage Network will be set to.
     */
    clientVlan?: pulumi.Input<number>;
    /**
     * Volume description.
     */
    description?: pulumi.Input<string>;
    /**
     * The location of this storage network. Currently this field should be set to `PHX` or `ASH`.
     */
    location: pulumi.Input<string>;
    /**
     * The name of the tag.
     */
    name?: pulumi.Input<string>;
    /**
     * Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).
     */
    volumes: pulumi.Input<pulumi.Input<inputs.StorageNetworkVolume>[]>;
}
