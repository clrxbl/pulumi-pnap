// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
 *
 * ## Example Usage
 *
 * Fetch a Rancher Cluster by ID or name and show it's details in alphabetical order.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@pulumi/pnap";
 *
 * export = async () => {
 *     const test = await pnap.getRancherCluster({
 *         id: "123",
 *         name: "Rancher-Deployment-1",
 *     });
 *     return {
 *         "rancher-cluster": test,
 *     };
 * }
 * ```
 */
export function getRancherCluster(args?: GetRancherClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetRancherClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pnap:index/getRancherCluster:getRancherCluster", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getRancherCluster.
 */
export interface GetRancherClusterArgs {
    /**
     * The cluster (Rancher Cluster) identifier.
     */
    id?: string;
    /**
     * Cluster name.
     */
    name?: string;
}

/**
 * A collection of values returned by getRancherCluster.
 */
export interface GetRancherClusterResult {
    /**
     * Cluster description.
     */
    readonly description: string;
    /**
     * The cluster identifier.
     */
    readonly id: string;
    /**
     * The Rancher version that was installed on the cluster during the first creation process.
     */
    readonly initialClusterVersion: string;
    /**
     * Deployment location.
     */
    readonly location: string;
    /**
     * Connection parameters to use to connect to the Rancher Server Administrative GUI.
     */
    readonly metadatas: outputs.GetRancherClusterMetadata[];
    /**
     * The name of the node pool.
     */
    readonly name: string;
    /**
     * The node pools associated with the cluster.
     */
    readonly nodePools: outputs.GetRancherClusterNodePool[];
    /**
     * The cluster status.
     */
    readonly statusDescription: string;
}
/**
 * Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.
 *
 * ## Example Usage
 *
 * Fetch a Rancher Cluster by ID or name and show it's details in alphabetical order.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@pulumi/pnap";
 *
 * export = async () => {
 *     const test = await pnap.getRancherCluster({
 *         id: "123",
 *         name: "Rancher-Deployment-1",
 *     });
 *     return {
 *         "rancher-cluster": test,
 *     };
 * }
 * ```
 */
export function getRancherClusterOutput(args?: GetRancherClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRancherClusterResult> {
    return pulumi.output(args).apply((a: any) => getRancherCluster(a, opts))
}

/**
 * A collection of arguments for invoking getRancherCluster.
 */
export interface GetRancherClusterOutputArgs {
    /**
     * The cluster (Rancher Cluster) identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * Cluster name.
     */
    name?: pulumi.Input<string>;
}
