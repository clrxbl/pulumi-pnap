// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a phoenixNAP invoices datasource. This can be used to read invoices.
 *
 * ## Example Usage
 *
 * Fetch invoices by status and date sent and show their details.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@pulumi/pnap";
 *
 * const query-C = pnap.getInvoices({
 *     status: "PAID",
 *     sentOnFrom: "2020-04-13T00:00:00.000Z",
 *     sentOnTo: "2022-04-13T00:00:00.000Z",
 * });
 * export const invoices = query_C.then(query_C => query_C.paginatedInvoices);
 * ```
 */
export function getInvoices(args?: GetInvoicesArgs, opts?: pulumi.InvokeOptions): Promise<GetInvoicesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pnap:index/getInvoices:getInvoices", {
        "limit": args.limit,
        "number": args.number,
        "offset": args.offset,
        "sentOnFrom": args.sentOnFrom,
        "sentOnTo": args.sentOnTo,
        "sortDirection": args.sortDirection,
        "sortField": args.sortField,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getInvoices.
 */
export interface GetInvoicesArgs {
    /**
     * The limit of the number of results returned. The number of records returned may be smaller than the limit.
     */
    limit?: number;
    /**
     * A user-friendly reference number assigned to the invoice.
     */
    number?: string;
    /**
     * The number of items to skip in the results.
     */
    offset?: number;
    /**
     * Minimum value to filter invoices by sent on date.
     */
    sentOnFrom?: string;
    /**
     * Maximum value to filter invoices by sent on date.
     */
    sentOnTo?: string;
    /**
     * Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
     */
    sortDirection?: string;
    /**
     * If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
     */
    sortField?: string;
    /**
     * Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
     */
    status?: string;
}

/**
 * A collection of values returned by getInvoices.
 */
export interface GetInvoicesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Maximum number of items in the page (actual returned length can be less).
     */
    readonly limit?: number;
    /**
     * A user-friendly reference number assigned to the invoice.
     */
    readonly number?: string;
    /**
     * The number of returned items skipped.
     */
    readonly offset?: number;
    /**
     * The paginated list of invoices.
     */
    readonly paginatedInvoices: outputs.GetInvoicesPaginatedInvoice[];
    readonly sentOnFrom?: string;
    readonly sentOnTo?: string;
    readonly sortDirection?: string;
    readonly sortField?: string;
    /**
     * The status of the invoice.
     */
    readonly status?: string;
}
/**
 * Provides a phoenixNAP invoices datasource. This can be used to read invoices.
 *
 * ## Example Usage
 *
 * Fetch invoices by status and date sent and show their details.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@pulumi/pnap";
 *
 * const query-C = pnap.getInvoices({
 *     status: "PAID",
 *     sentOnFrom: "2020-04-13T00:00:00.000Z",
 *     sentOnTo: "2022-04-13T00:00:00.000Z",
 * });
 * export const invoices = query_C.then(query_C => query_C.paginatedInvoices);
 * ```
 */
export function getInvoicesOutput(args?: GetInvoicesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInvoicesResult> {
    return pulumi.output(args).apply((a: any) => getInvoices(a, opts))
}

/**
 * A collection of arguments for invoking getInvoices.
 */
export interface GetInvoicesOutputArgs {
    /**
     * The limit of the number of results returned. The number of records returned may be smaller than the limit.
     */
    limit?: pulumi.Input<number>;
    /**
     * A user-friendly reference number assigned to the invoice.
     */
    number?: pulumi.Input<string>;
    /**
     * The number of items to skip in the results.
     */
    offset?: pulumi.Input<number>;
    /**
     * Minimum value to filter invoices by sent on date.
     */
    sentOnFrom?: pulumi.Input<string>;
    /**
     * Maximum value to filter invoices by sent on date.
     */
    sentOnTo?: pulumi.Input<string>;
    /**
     * Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
     */
    sortDirection?: pulumi.Input<string>;
    /**
     * If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
     */
    sortField?: pulumi.Input<string>;
    /**
     * Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
     */
    status?: pulumi.Input<string>;
}
