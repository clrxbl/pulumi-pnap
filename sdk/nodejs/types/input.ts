// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetEventsEvent {
    /**
     * Event name.
     */
    name: string;
    /**
     * The UTC time the event initiated.
     */
    timestamp?: string;
    /**
     * Details related to the user / application.
     */
    userInfos?: inputs.GetEventsEventUserInfo[];
}

export interface GetEventsEventArgs {
    /**
     * Event name.
     */
    name: pulumi.Input<string>;
    /**
     * The UTC time the event initiated.
     */
    timestamp?: pulumi.Input<string>;
    /**
     * Details related to the user / application.
     */
    userInfos?: pulumi.Input<pulumi.Input<inputs.GetEventsEventUserInfoArgs>[]>;
}

export interface GetEventsEventUserInfo {
    /**
     * The BMC account ID.
     */
    accountId?: string;
    /**
     * The client ID of the application.
     */
    clientId?: string;
    /**
     * The logged in user or owner of the client application.
     */
    username?: string;
}

export interface GetEventsEventUserInfoArgs {
    /**
     * The BMC account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The client ID of the application.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The logged in user or owner of the client application.
     */
    username?: pulumi.Input<string>;
}

export interface IpBlockTag {
    /**
     * Tag request to assign to the IP Block.
     */
    tagAssignment?: pulumi.Input<inputs.IpBlockTagTagAssignment>;
}

export interface IpBlockTagTagAssignment {
    /**
     * Who the tag was created by.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The unique id of the tag.
     */
    id?: pulumi.Input<string>;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag?: pulumi.Input<boolean>;
    /**
     * The name of the tag.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the tag assigned to the IP Block.
     */
    value?: pulumi.Input<string>;
}

export interface PrivateNetworkMembership {
    /**
     * List of public IPs associated to the resource.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource identifier.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The resource's type.
     */
    resourceType?: pulumi.Input<string>;
}

export interface PrivateNetworkServer {
    /**
     * The server identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * List of public IPs associated to the resource.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PublicNetworkIpBlock {
    /**
     * The assigned IP Block to the public network.
     */
    publicNetworkIpBlock?: pulumi.Input<inputs.PublicNetworkIpBlockPublicNetworkIpBlock>;
}

export interface PublicNetworkIpBlockPublicNetworkIpBlock {
    /**
     * The IP Block identifier.
     */
    id: pulumi.Input<string>;
}

export interface PublicNetworkMembership {
    /**
     * List of public IPs associated to the resource.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource identifier.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The resource's type.
     */
    resourceType?: pulumi.Input<string>;
}

export interface RancherClusterConfiguration {
    /**
     * Define the custom SSL certificates to be used instead of defaults. The `certificates` block has 3 fields.
     */
    certificates?: pulumi.Input<inputs.RancherClusterConfigurationCertificates>;
    /**
     * This maps to rancher's cluster-domain. Cluster Domain.
     */
    clusterDomain?: pulumi.Input<string>;
    /**
     * This maps to rancher's etcd-snapshot-retention. Number of snapshots to retain. Default value is 5.
     */
    etcdSnapshotRetention?: pulumi.Input<number>;
    /**
     * This maps to rancher's etcd-snapshot-schedule-cron. Snapshot interval time in cron spec.
     */
    etcdSnapshotScheduleCron?: pulumi.Input<string>;
    /**
     * This maps to rancher's node-taint. Registering kubelet with set of taints.
     */
    nodeTaint?: pulumi.Input<string>;
    /**
     * This maps to rancher's tls-san. Add additional hostname or IP as a Subject Alternative Name in the TLS cert.
     */
    tlsSan?: pulumi.Input<string>;
    /**
     * Shared secret used to join a server or agent to a cluster.
     */
    token?: pulumi.Input<string>;
}

export interface RancherClusterConfigurationCertificates {
    /**
     * The SSL CA certificate to be used for rancher admin.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * The SSL certificate to be used for rancher admin.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The SSL certificate key to be used for rancher admin.
     */
    certificateKey?: pulumi.Input<string>;
}

export interface RancherClusterMetadata {
    /**
     * This is the password to be used to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
     */
    password?: pulumi.Input<string>;
    /**
     * The Rancher Server URL.
     */
    url?: pulumi.Input<string>;
    /**
     * The username to use to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
     */
    username?: pulumi.Input<string>;
}

export interface RancherClusterNodePools {
    /**
     * The name of the workload cluster. This field is autogenerated if not provided.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of configured nodes. Currently only node counts of 1 and 3 are possible.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * The nodes associated with this node pool.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.RancherClusterNodePoolsNode>[]>;
    /**
     * Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     */
    serverType?: pulumi.Input<string>;
    /**
     * Configuration defining which public SSH keys are pre-installed as authorized on the server. The `sshConfig` block has 3 fields.
     */
    sshConfig?: pulumi.Input<inputs.RancherClusterNodePoolsSshConfig>;
}

export interface RancherClusterNodePoolsNode {
    /**
     * The server identifier.
     */
    serverId?: pulumi.Input<string>;
}

export interface RancherClusterNodePoolsSshConfig {
    /**
     * Define whether public keys marked as default should be installed on this node. Default value is true.
     */
    installDefaultKeys?: pulumi.Input<boolean>;
    /**
     * List of public SSH key identifiers.
     */
    keyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of public SSH keys.
     */
    keys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RancherClusterWorkloadConfiguration {
    /**
     * Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     */
    location: pulumi.Input<string>;
    /**
     * The name of the workload cluster. This field is autogenerated if not provided.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of configured servers. Currently only server counts of 1 and 3 are possible. Default value is 1.
     */
    serverCount?: pulumi.Input<number>;
    /**
     * Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     */
    serverType: pulumi.Input<string>;
}

export interface ServerCloudInit {
    /**
     * User data for the [cloud-init](https://cloudinit.readthedocs.io/en/latest/) configuration in base64 encoding. NoCloud format is supported. Follow the [instructions](https://phoenixnap.com/kb/bmc-cloud-init) on how to provision a server using cloud-init. Only ubuntu/bionic and ubuntu/focal and ubuntu/jammy are supported.
     *
     *
     * The `netrisSoftgate` block has three fields:
     */
    userData?: pulumi.Input<string>;
}

export interface ServerNetrisController {
    /**
     * Host OS on which the Netris Softgate is installed.
     */
    hostOs?: pulumi.Input<string>;
    /**
     * Auto-generated password set for user 'netris' in the web console.
     */
    netrisUserPassword?: pulumi.Input<string>;
    /**
     * The URL for the Netris Controller web console.
     */
    netrisWebConsoleUrl?: pulumi.Input<string>;
}

export interface ServerNetrisSoftgate {
    /**
     * IP address or hostname through which to reach the Netris Controller.
     */
    controllerAddress?: pulumi.Input<string>;
    /**
     * The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.
     *
     *
     * The `tags` block has field `tagAssignment`.
     * The `tagAssignment` block has 2 fields:
     */
    controllerAuthKey?: pulumi.Input<string>;
    /**
     * The version of the Netris Controller to connect to.
     */
    controllerVersion?: pulumi.Input<string>;
    /**
     * Host OS on which the Netris Softgate is installed.
     */
    hostOs?: pulumi.Input<string>;
}

export interface ServerNetworkConfiguration {
    /**
     * The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `networkConfiguration`.
     */
    gatewayAddress?: pulumi.Input<string>;
    ipBlocksConfiguration?: pulumi.Input<inputs.ServerNetworkConfigurationIpBlocksConfiguration>;
    privateNetworkConfiguration?: pulumi.Input<inputs.ServerNetworkConfigurationPrivateNetworkConfiguration>;
    publicNetworkConfiguration?: pulumi.Input<inputs.ServerNetworkConfigurationPublicNetworkConfiguration>;
}

export interface ServerNetworkConfigurationIpBlocksConfiguration {
    /**
     * Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
     */
    configurationType?: pulumi.Input<string>;
    /**
     * Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
     *
     * The `ipBlocks` block has field `serverIpBlock`.
     * The `serverIpBlock` block has 2 fields:
     */
    ipBlocks?: pulumi.Input<pulumi.Input<inputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlock>[]>;
}

export interface ServerNetworkConfigurationIpBlocksConfigurationIpBlock {
    serverIpBlock?: pulumi.Input<inputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock>;
}

export interface ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock {
    /**
     * The network identifier.
     */
    id: pulumi.Input<string>;
    /**
     * The VLAN on which this IP block has been configured within the network switch.
     *
     * The `publicNetworkConfiguration` is the fourth field of the `networkConfiguration` block.
     * The `publicNetworkConfiguration` block has field `publicNetworks`:
     *
     * The `publicNetworks` block has field `serverPublicNetwork`.
     * The `serverPublicNetwork` block has 2 fields:
     */
    vlanId?: pulumi.Input<number>;
}

export interface ServerNetworkConfigurationPrivateNetworkConfiguration {
    /**
     * Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
     */
    configurationType?: pulumi.Input<string>;
    /**
     * The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `networkConfiguration`.
     */
    gatewayAddress?: pulumi.Input<string>;
    /**
     * The list of private networks this server is member of. When this field is part of request body, it'll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
     *
     * The `privateNetworks` block has field `serverPrivateNetwork`.
     * The `serverPrivateNetwork` block has 3 fields:
     */
    privateNetworks?: pulumi.Input<pulumi.Input<inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork>[]>;
}

export interface ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork {
    serverPrivateNetwork?: pulumi.Input<inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork>;
}

export interface ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork {
    /**
     * Determines whether DHCP is enabled for this server. Should be false if ips is not an empty list. Not supported for proxmox OS. Default value is `false`.
     *
     * The `ipBlocksConfiguration` is the third field of the `networkConfiguration` block.
     * The `ipBlocksConfiguration` block has 2 fields:
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * The network identifier.
     */
    id: pulumi.Input<string>;
    /**
     * IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.
     *
     *
     * The `storageConfiguration` block has field `rootPartition`.
     * The `rootPartition` block has two fields:
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    statusDescription?: pulumi.Input<string>;
}

export interface ServerNetworkConfigurationPublicNetworkConfiguration {
    publicNetworks?: pulumi.Input<pulumi.Input<inputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork>[]>;
}

export interface ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork {
    serverPublicNetwork?: pulumi.Input<inputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork>;
}

export interface ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork {
    /**
     * The network identifier.
     */
    id: pulumi.Input<string>;
    /**
     * IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.
     *
     *
     * The `storageConfiguration` block has field `rootPartition`.
     * The `rootPartition` block has two fields:
     */
    ips: pulumi.Input<pulumi.Input<string>[]>;
    statusDescription?: pulumi.Input<string>;
}

export interface ServerStorageConfiguration {
    rootPartition?: pulumi.Input<inputs.ServerStorageConfigurationRootPartition>;
}

export interface ServerStorageConfigurationRootPartition {
    /**
     * Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
     */
    raid?: pulumi.Input<string>;
    /**
     * The size of the root partition in GB. `-1` to use all available space.
     */
    size?: pulumi.Input<number>;
}

export interface ServerTag {
    tagAssignment?: pulumi.Input<inputs.ServerTagTagAssignment>;
}

export interface ServerTagTagAssignment {
    /**
     * Who the tag was created by.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The network identifier.
     */
    id?: pulumi.Input<string>;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag?: pulumi.Input<boolean>;
    /**
     * The name of the tag.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the tag assigned to the IP Block.
     *
     *
     * The `networkConfiguration` block has 4 fields: `gatewayAddress`, `privateNetworkConfiguration`, `ipBlocksConfiguration` and `publicNetworkConfiguration`.
     */
    value?: pulumi.Input<string>;
}

export interface StorageNetworkVolume {
    /**
     * Volume to be created alongside storage.
     */
    volume: pulumi.Input<inputs.StorageNetworkVolumeVolume>;
}

export interface StorageNetworkVolumeVolume {
    /**
     * Capacity of volume in GB. Currently only whole numbers and multiples of 1000 GB are supported.
     */
    capacityInGb: pulumi.Input<number>;
    /**
     * Date and time when this volume was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Date and time of the initial request for volume deletion.
     */
    deleteRequestedOn?: pulumi.Input<string>;
    /**
     * Volume description.
     */
    description?: pulumi.Input<string>;
    /**
     * The unique id of the tag.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the tag.
     */
    name: pulumi.Input<string>;
    /**
     * Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
     */
    path?: pulumi.Input<string>;
    /**
     * Last part of volume's path.
     */
    pathSuffix?: pulumi.Input<string>;
    /**
     * Permissions for the volume.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.StorageNetworkVolumeVolumePermission>[]>;
    /**
     * File system protocol.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Volume's status.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags to set to the volume.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.StorageNetworkVolumeVolumeTag>[]>;
    /**
     * Used capacity in GB, updated periodically.
     */
    usedCapacityInGb?: pulumi.Input<number>;
}

export interface StorageNetworkVolumeVolumePermission {
    /**
     * NFS specific permissions on the volume.
     */
    nfs?: pulumi.Input<pulumi.Input<inputs.StorageNetworkVolumeVolumePermissionNf>[]>;
}

export interface StorageNetworkVolumeVolumePermissionNf {
    /**
     * All squash permission.
     */
    allSquashes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * No squash permission.
     */
    noSquashes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Read only access.
     */
    readOnlies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Read/Write access.
     */
    readWrites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Root squash permission.
     */
    rootSquashes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface StorageNetworkVolumeVolumeTag {
    /**
     * Tag to set to the volume.
     */
    tagAssignment?: pulumi.Input<inputs.StorageNetworkVolumeVolumeTagTagAssignment>;
}

export interface StorageNetworkVolumeVolumeTagTagAssignment {
    /**
     * Who the tag was created by.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The unique id of the tag.
     */
    id?: pulumi.Input<string>;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag?: pulumi.Input<boolean>;
    /**
     * The name of the tag.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the tag assigned to the volume.
     */
    value?: pulumi.Input<string>;
}

export interface TagResourceAssignment {
    /**
     * The resource name.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The value of the tag assigned to the resource.
     * * `createdBy ` - The tag's creator.
     */
    value?: pulumi.Input<string>;
}
