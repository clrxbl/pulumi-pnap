// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetEventsEvent {
    /**
     * Event name.
     */
    name: string;
    /**
     * The UTC time the event initiated.
     */
    timestamp: string;
    /**
     * Details related to the user / application.
     */
    userInfos: outputs.GetEventsEventUserInfo[];
}

export interface GetEventsEventUserInfo {
    /**
     * The BMC account ID.
     */
    accountId: string;
    /**
     * The client ID of the application.
     */
    clientId: string;
    /**
     * The logged in user or owner of the client application.
     */
    username: string;
}

export interface GetInvoicesPaginatedInvoice {
    /**
     * The limit of the number of results returned. The number of records returned may be smaller than the limit.
     */
    limit: number;
    /**
     * The number of items to skip in the results.
     */
    offset: number;
    /**
     * The list of invoices.
     */
    results: outputs.GetInvoicesPaginatedInvoiceResult[];
    total: number;
}

export interface GetInvoicesPaginatedInvoiceResult {
    /**
     * The invoice amount.
     */
    amount: number;
    /**
     * The currency of the invoice.
     */
    currency: string;
    /**
     * Date and time when the invoice payment is due.
     */
    dueDate: string;
    /**
     * The unique resource identifier of the invoice.
     */
    id: string;
    /**
     * A user-friendly reference number assigned to the invoice.
     */
    number: string;
    /**
     * The invoice outstanding amount.
     */
    outstandingAmount: number;
    /**
     * Date and time when the invoice was sent.
     */
    sentOn: string;
    /**
     * Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
     */
    status: string;
}

export interface GetIpBlockTag {
    /**
     * Who the tag was created by.
     */
    createdBy: string;
    /**
     * The IP Block identifier.
     */
    id: string;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag: boolean;
    /**
     * The name of the tag.
     */
    name: string;
    /**
     * The value of the tag assigned to the IP Block.
     */
    value: string;
}

export interface GetLocationsLocation {
    /**
     * The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
     */
    location: string;
    /**
     * Description of the location.
     */
    locationDescription: string;
    /**
     * The list of product categories.
     */
    productCategories: outputs.GetLocationsLocationProductCategory[];
}

export interface GetLocationsLocationProductCategory {
    /**
     * The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.
     */
    productCategory: string;
    /**
     * Description of the product category.
     */
    productCategoryDescription: string;
}

export interface GetPrivateNetworkMembership {
    /**
     * List of public IPs associated to the resource.
     */
    ips: string[];
    /**
     * The resource identifier.
     */
    resourceId: string;
    /**
     * The resource's type.
     */
    resourceType: string;
}

export interface GetPrivateNetworkServer {
    /**
     * The private network identifier.
     */
    id: string;
    /**
     * List of public IPs associated to the resource.
     */
    ips: string[];
}

export interface GetProductAvailabilityProductAvailability {
    /**
     * Infos about location, solutions and availability for a product.
     */
    locationAvailabilityDetails: outputs.GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail[];
    /**
     * Product category. Currently only `SERVER` category is supported.
     */
    productCategory: string;
    /**
     * The code identifying the product. This code has significance across all locations.
     */
    productCode: string;
}

export interface GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail {
    /**
     * Total available quantity of product in specific location. Max value is 10.
     */
    availableQuantity: number;
    /**
     * The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.
     */
    location: string;
    /**
     * Is product available in specific location for requested quantity.
     */
    minQuantityAvailable: boolean;
    /**
     * Requested quantity.
     */
    minQuantityRequested: number;
    /**
     * Solutions supported in specific location for a product.
     */
    solutions: string[];
}

export interface GetProductsProduct {
    /**
     * Details of the server product.
     */
    metadatas: outputs.GetProductsProductMetadata[];
    /**
     * The pricing plans available for this product.
     */
    plans: outputs.GetProductsProductPlan[];
    /**
     * The product category.
     */
    productCategory: string;
    /**
     * The code identifying the product. This code has significance across all locations.
     */
    productCode: string;
}

export interface GetProductsProductMetadata {
    /**
     * The number of physical cores present on each CPU.
     */
    coresPerCpu: number;
    /**
     * CPU name.
     */
    cpu: string;
    /**
     * Number of CPUs.
     */
    cpuCount: number;
    /**
     * CPU frequency in GHz.
     */
    cpuFrequency: number;
    /**
     * Server network.
     */
    network: string;
    /**
     * RAM in GB.
     */
    ramInGb: number;
    /**
     * Server storage.
     */
    storage: string;
}

export interface GetProductsProductPlan {
    /**
     * Product code of the correlated product.
     */
    correlatedProductCode: string;
    /**
     * The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.
     */
    location: string;
    /**
     * Package size per month.
     */
    packageQuantity: number;
    /**
     * Package size unit.
     */
    packageUnit: string;
    /**
     * Price per unit.
     */
    price: number;
    /**
     * The unit to which the price applies.
     */
    priceUnit: string;
    /**
     * The pricing model.
     */
    pricingModel: string;
    /**
     * The SKU identifying the pricing plan.
     */
    sku: string;
    /**
     * Description of the pricing plan.
     */
    skuDescription: string;
}

export interface GetPublicNetworkIpBlock {
    /**
     * The public network identifier.
     */
    id: string;
}

export interface GetPublicNetworkMembership {
    /**
     * List of public IPs associated to the resource.
     */
    ips: string[];
    /**
     * The resource identifier.
     */
    resourceId: string;
    /**
     * The resource's type.
     */
    resourceType: string;
}

export interface GetQuotaQuotaEditLimitRequestDetail {
    /**
     * The new limit that is requested.
     */
    limit: number;
    /**
     * The reason for changing the limit.
     */
    reason: string;
    /**
     * The point in time the request was submitted.
     */
    requestedOn: string;
}

export interface GetRancherClusterMetadata {
    /**
     * The Rancher Server URL.
     */
    url: string;
}

export interface GetRancherClusterNodePool {
    /**
     * Cluster name.
     */
    name: string;
    /**
     * Number of configured nodes.
     */
    nodeCount: number;
    /**
     * The nodes associated with this node pool.
     */
    nodes: outputs.GetRancherClusterNodePoolNode[];
    /**
     * Node server type.
     */
    serverType: string;
}

export interface GetRancherClusterNodePoolNode {
    /**
     * The server identifier.
     */
    serverId: string;
}

export interface GetServerNetrisController {
    /**
     * Host OS on which the Netris Softgate is installed.
     */
    hostOs: string;
}

export interface GetServerNetrisSoftgate {
    /**
     * Host OS on which the Netris Softgate is installed.
     */
    hostOs: string;
}

export interface GetServerNetworkConfiguration {
    /**
     * The address of the gateway assigned to the server.
     */
    gatewayAddress: string;
    /**
     * IP block details of bare metal server.
     */
    ipBlocksConfigurations: outputs.GetServerNetworkConfigurationIpBlocksConfiguration[];
    /**
     * Private network details of bare metal server.
     */
    privateNetworkConfigurations: outputs.GetServerNetworkConfigurationPrivateNetworkConfiguration[];
    /**
     * Public network details of bare metal server.
     */
    publicNetworkConfigurations: outputs.GetServerNetworkConfigurationPublicNetworkConfiguration[];
}

export interface GetServerNetworkConfigurationIpBlocksConfiguration {
    /**
     * Determines the approach for configuring IP blocks for the server being provisioned.
     */
    configurationType: string;
    /**
     * The IP blocks assigned to this server.
     */
    ipBlocks: outputs.GetServerNetworkConfigurationIpBlocksConfigurationIpBlock[];
}

export interface GetServerNetworkConfigurationIpBlocksConfigurationIpBlock {
    /**
     * The unique identifier of the server.
     */
    id: string;
    vlanId: number;
}

export interface GetServerNetworkConfigurationPrivateNetworkConfiguration {
    /**
     * Determines the approach for configuring IP blocks for the server being provisioned.
     */
    configurationType: string;
    /**
     * The list of private networks this server is member of.
     */
    privateNetworks: outputs.GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork[];
}

export interface GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork {
    /**
     * Determines whether DHCP is enabled for this server.
     */
    dhcp: boolean;
    /**
     * The unique identifier of the server.
     */
    id: string;
    /**
     * IPs configured on the server.
     */
    ips: string[];
    /**
     * The status of the assignment to the network.
     */
    statusDescription: string;
}

export interface GetServerNetworkConfigurationPublicNetworkConfiguration {
    /**
     * The list of public networks this server is member of.
     */
    publicNetworks: outputs.GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork[];
}

export interface GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork {
    /**
     * The unique identifier of the server.
     */
    id: string;
    /**
     * IPs configured on the server.
     */
    ips: string[];
    /**
     * The status of the assignment to the network.
     */
    statusDescription: string;
}

export interface GetServerStorageConfiguration {
    /**
     * Root partition configuration.
     */
    rootPartitions: outputs.GetServerStorageConfigurationRootPartition[];
}

export interface GetServerStorageConfigurationRootPartition {
    /**
     * Software RAID configuration.
     */
    raid: string;
    /**
     * The size of the root partition in GB.
     */
    size: number;
}

export interface GetServerTag {
    /**
     * Who the tag was created by.
     */
    createdBy: string;
    /**
     * The unique identifier of the server.
     */
    id: string;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag: boolean;
    /**
     * The name of the tag.
     */
    name: string;
    /**
     * The value of the tag assigned to the server.
     */
    value: string;
}

export interface GetStorageNetworkVolume {
    /**
     * Maximum capacity in GB.
     */
    capacityInGb: number;
    /**
     * Date and time when this volume was created.
     */
    createdOn: string;
    /**
     * Date and time of the initial request for volume deletion.
     */
    deleteRequestedOn: string;
    /**
     * Volume description.
     */
    description: string;
    /**
     * The storage network identifier.
     */
    id: string;
    /**
     * The friendly name of this storage network.
     */
    name: string;
    /**
     * Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
     */
    path: string;
    /**
     * Last part of volume's path.
     */
    pathSuffix: string;
    /**
     * Permissions for the volume.
     */
    permissions: outputs.GetStorageNetworkVolumePermission[];
    /**
     * File system protocol.
     */
    protocol: string;
    /**
     * Volume's status.
     */
    status: string;
    /**
     * The tags assigned to the volume.
     */
    tags: outputs.GetStorageNetworkVolumeTag[];
    /**
     * Used capacity in GB, updated periodically.
     */
    usedCapacityInGb: number;
}

export interface GetStorageNetworkVolumePermission {
    /**
     * NFS specific permissions on the volume.
     */
    nfs: outputs.GetStorageNetworkVolumePermissionNf[];
}

export interface GetStorageNetworkVolumePermissionNf {
    /**
     * All squash permission.
     */
    allSquashes: string[];
    /**
     * No squash permission.
     */
    noSquashes: string[];
    /**
     * Read only access.
     */
    readOnlies: string[];
    /**
     * Read/Write access.
     */
    readWrites: string[];
    /**
     * Root squash permission.
     */
    rootSquashes: string[];
}

export interface GetStorageNetworkVolumeTag {
    /**
     * Who the tag was created by.
     */
    createdBy: string;
    /**
     * The storage network identifier.
     */
    id: string;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag: boolean;
    /**
     * The friendly name of this storage network.
     */
    name: string;
    /**
     * The value of the tag assigned to the volume.
     */
    value: string;
}

export interface GetTagResourceAssignment {
    /**
     * The resource name.
     */
    resourceName: string;
    /**
     * The value of the tag assigned to the resource.
     * * `createdBy ` - The tag's creator.
     */
    value: string;
}

export interface IpBlockTag {
    /**
     * Tag request to assign to the IP Block.
     */
    tagAssignment: outputs.IpBlockTagTagAssignment;
}

export interface IpBlockTagTagAssignment {
    /**
     * Who the tag was created by.
     */
    createdBy: string;
    /**
     * The unique id of the tag.
     */
    id: string;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag: boolean;
    /**
     * The name of the tag.
     */
    name: string;
    /**
     * The value of the tag assigned to the IP Block.
     */
    value?: string;
}

export interface PrivateNetworkMembership {
    /**
     * List of public IPs associated to the resource.
     */
    ips: string[];
    /**
     * The resource identifier.
     */
    resourceId: string;
    /**
     * The resource's type.
     */
    resourceType: string;
}

export interface PrivateNetworkServer {
    /**
     * The server identifier.
     */
    id: string;
    /**
     * List of public IPs associated to the resource.
     */
    ips: string[];
}

export interface PublicNetworkIpBlock {
    /**
     * The assigned IP Block to the public network.
     */
    publicNetworkIpBlock: outputs.PublicNetworkIpBlockPublicNetworkIpBlock;
}

export interface PublicNetworkIpBlockPublicNetworkIpBlock {
    /**
     * The IP Block identifier.
     */
    id: string;
}

export interface PublicNetworkMembership {
    /**
     * List of public IPs associated to the resource.
     */
    ips: string[];
    /**
     * The resource identifier.
     */
    resourceId: string;
    /**
     * The resource's type.
     */
    resourceType: string;
}

export interface RancherClusterConfiguration {
    /**
     * Define the custom SSL certificates to be used instead of defaults. The `certificates` block has 3 fields.
     */
    certificates?: outputs.RancherClusterConfigurationCertificates;
    /**
     * This maps to rancher's cluster-domain. Cluster Domain.
     */
    clusterDomain?: string;
    /**
     * This maps to rancher's etcd-snapshot-retention. Number of snapshots to retain. Default value is 5.
     */
    etcdSnapshotRetention?: number;
    /**
     * This maps to rancher's etcd-snapshot-schedule-cron. Snapshot interval time in cron spec.
     */
    etcdSnapshotScheduleCron?: string;
    /**
     * This maps to rancher's node-taint. Registering kubelet with set of taints.
     */
    nodeTaint?: string;
    /**
     * This maps to rancher's tls-san. Add additional hostname or IP as a Subject Alternative Name in the TLS cert.
     */
    tlsSan?: string;
    /**
     * Shared secret used to join a server or agent to a cluster.
     */
    token?: string;
}

export interface RancherClusterConfigurationCertificates {
    /**
     * The SSL CA certificate to be used for rancher admin.
     */
    caCertificate?: string;
    /**
     * The SSL certificate to be used for rancher admin.
     */
    certificate?: string;
    /**
     * The SSL certificate key to be used for rancher admin.
     */
    certificateKey?: string;
}

export interface RancherClusterMetadata {
    /**
     * This is the password to be used to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
     */
    password: string;
    /**
     * The Rancher Server URL.
     */
    url: string;
    /**
     * The username to use to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.
     */
    username: string;
}

export interface RancherClusterNodePools {
    /**
     * The name of the workload cluster. This field is autogenerated if not provided.
     */
    name: string;
    /**
     * Number of configured nodes. Currently only node counts of 1 and 3 are possible.
     */
    nodeCount: number;
    /**
     * The nodes associated with this node pool.
     */
    nodes: outputs.RancherClusterNodePoolsNode[];
    /**
     * Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     */
    serverType: string;
    /**
     * Configuration defining which public SSH keys are pre-installed as authorized on the server. The `sshConfig` block has 3 fields.
     */
    sshConfig?: outputs.RancherClusterNodePoolsSshConfig;
}

export interface RancherClusterNodePoolsNode {
    /**
     * The server identifier.
     */
    serverId: string;
}

export interface RancherClusterNodePoolsSshConfig {
    /**
     * Define whether public keys marked as default should be installed on this node. Default value is true.
     */
    installDefaultKeys?: boolean;
    /**
     * List of public SSH key identifiers.
     */
    keyIds?: string[];
    /**
     * List of public SSH keys.
     */
    keys?: string[];
}

export interface RancherClusterWorkloadConfiguration {
    /**
     * Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     */
    location: string;
    /**
     * The name of the workload cluster. This field is autogenerated if not provided.
     */
    name?: string;
    /**
     * Number of configured servers. Currently only server counts of 1 and 3 are possible. Default value is 1.
     */
    serverCount?: number;
    /**
     * Node server type. Cannot be changed once the cluster is created. Default value is "s0.d1.small". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
     */
    serverType: string;
}

export interface ServerCloudInit {
    /**
     * User data for the [cloud-init](https://cloudinit.readthedocs.io/en/latest/) configuration in base64 encoding. NoCloud format is supported. Follow the [instructions](https://phoenixnap.com/kb/bmc-cloud-init) on how to provision a server using cloud-init. Only ubuntu/bionic and ubuntu/focal and ubuntu/jammy are supported.
     *
     *
     * The `netrisSoftgate` block has three fields:
     */
    userData?: string;
}

export interface ServerNetrisController {
    /**
     * Host OS on which the Netris Softgate is installed.
     */
    hostOs: string;
    /**
     * Auto-generated password set for user 'netris' in the web console.
     */
    netrisUserPassword: string;
    /**
     * The URL for the Netris Controller web console.
     */
    netrisWebConsoleUrl: string;
}

export interface ServerNetrisSoftgate {
    /**
     * IP address or hostname through which to reach the Netris Controller.
     */
    controllerAddress?: string;
    /**
     * The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.
     *
     *
     * The `tags` block has field `tagAssignment`.
     * The `tagAssignment` block has 2 fields:
     */
    controllerAuthKey?: string;
    /**
     * The version of the Netris Controller to connect to.
     */
    controllerVersion?: string;
    /**
     * Host OS on which the Netris Softgate is installed.
     */
    hostOs: string;
}

export interface ServerNetworkConfiguration {
    /**
     * The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `networkConfiguration`.
     */
    gatewayAddress: string;
    ipBlocksConfiguration: outputs.ServerNetworkConfigurationIpBlocksConfiguration;
    privateNetworkConfiguration: outputs.ServerNetworkConfigurationPrivateNetworkConfiguration;
    publicNetworkConfiguration: outputs.ServerNetworkConfigurationPublicNetworkConfiguration;
}

export interface ServerNetworkConfigurationIpBlocksConfiguration {
    /**
     * Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
     */
    configurationType: string;
    /**
     * Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.
     *
     * The `ipBlocks` block has field `serverIpBlock`.
     * The `serverIpBlock` block has 2 fields:
     */
    ipBlocks: outputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlock[];
}

export interface ServerNetworkConfigurationIpBlocksConfigurationIpBlock {
    serverIpBlock: outputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock;
}

export interface ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock {
    /**
     * The network identifier.
     */
    id: string;
    /**
     * The VLAN on which this IP block has been configured within the network switch.
     *
     * The `publicNetworkConfiguration` is the fourth field of the `networkConfiguration` block.
     * The `publicNetworkConfiguration` block has field `publicNetworks`:
     *
     * The `publicNetworks` block has field `serverPublicNetwork`.
     * The `serverPublicNetwork` block has 2 fields:
     */
    vlanId: number;
}

export interface ServerNetworkConfigurationPrivateNetworkConfiguration {
    /**
     * Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.
     */
    configurationType: string;
    /**
     * The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `networkConfiguration`.
     */
    gatewayAddress: string;
    /**
     * The list of private networks this server is member of. When this field is part of request body, it'll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.
     *
     * The `privateNetworks` block has field `serverPrivateNetwork`.
     * The `serverPrivateNetwork` block has 3 fields:
     */
    privateNetworks: outputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork[];
}

export interface ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork {
    serverPrivateNetwork: outputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork;
}

export interface ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork {
    /**
     * Determines whether DHCP is enabled for this server. Should be false if ips is not an empty list. Not supported for proxmox OS. Default value is `false`.
     *
     * The `ipBlocksConfiguration` is the third field of the `networkConfiguration` block.
     * The `ipBlocksConfiguration` block has 2 fields:
     */
    dhcp: boolean;
    /**
     * The network identifier.
     */
    id: string;
    /**
     * IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.
     *
     *
     * The `storageConfiguration` block has field `rootPartition`.
     * The `rootPartition` block has two fields:
     */
    ips: string[];
    statusDescription: string;
}

export interface ServerNetworkConfigurationPublicNetworkConfiguration {
    publicNetworks: outputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork[];
}

export interface ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork {
    serverPublicNetwork: outputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork;
}

export interface ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork {
    /**
     * The network identifier.
     */
    id: string;
    /**
     * IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.
     *
     *
     * The `storageConfiguration` block has field `rootPartition`.
     * The `rootPartition` block has two fields:
     */
    ips: string[];
    statusDescription: string;
}

export interface ServerStorageConfiguration {
    rootPartition?: outputs.ServerStorageConfigurationRootPartition;
}

export interface ServerStorageConfigurationRootPartition {
    /**
     * Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.
     */
    raid?: string;
    /**
     * The size of the root partition in GB. `-1` to use all available space.
     */
    size?: number;
}

export interface ServerTag {
    tagAssignment: outputs.ServerTagTagAssignment;
}

export interface ServerTagTagAssignment {
    /**
     * Who the tag was created by.
     */
    createdBy: string;
    /**
     * The network identifier.
     */
    id: string;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag: boolean;
    /**
     * The name of the tag.
     */
    name: string;
    /**
     * The value of the tag assigned to the IP Block.
     *
     *
     * The `networkConfiguration` block has 4 fields: `gatewayAddress`, `privateNetworkConfiguration`, `ipBlocksConfiguration` and `publicNetworkConfiguration`.
     */
    value?: string;
}

export interface StorageNetworkVolume {
    /**
     * Volume to be created alongside storage.
     */
    volume: outputs.StorageNetworkVolumeVolume;
}

export interface StorageNetworkVolumeVolume {
    /**
     * Capacity of volume in GB. Currently only whole numbers and multiples of 1000 GB are supported.
     */
    capacityInGb: number;
    /**
     * Date and time when this volume was created.
     */
    createdOn: string;
    /**
     * Date and time of the initial request for volume deletion.
     */
    deleteRequestedOn: string;
    /**
     * Volume description.
     */
    description?: string;
    /**
     * The unique id of the tag.
     */
    id: string;
    /**
     * The name of the tag.
     */
    name: string;
    /**
     * Volume's full path. It is in form of `/{volumeId}/pathSuffix`.
     */
    path: string;
    /**
     * Last part of volume's path.
     */
    pathSuffix: string;
    /**
     * Permissions for the volume.
     */
    permissions: outputs.StorageNetworkVolumeVolumePermission[];
    /**
     * File system protocol.
     */
    protocol: string;
    /**
     * Volume's status.
     */
    status: string;
    /**
     * Tags to set to the volume.
     */
    tags?: outputs.StorageNetworkVolumeVolumeTag[];
    /**
     * Used capacity in GB, updated periodically.
     */
    usedCapacityInGb: number;
}

export interface StorageNetworkVolumeVolumePermission {
    /**
     * NFS specific permissions on the volume.
     */
    nfs: outputs.StorageNetworkVolumeVolumePermissionNf[];
}

export interface StorageNetworkVolumeVolumePermissionNf {
    /**
     * All squash permission.
     */
    allSquashes: string[];
    /**
     * No squash permission.
     */
    noSquashes: string[];
    /**
     * Read only access.
     */
    readOnlies: string[];
    /**
     * Read/Write access.
     */
    readWrites: string[];
    /**
     * Root squash permission.
     */
    rootSquashes: string[];
}

export interface StorageNetworkVolumeVolumeTag {
    /**
     * Tag to set to the volume.
     */
    tagAssignment: outputs.StorageNetworkVolumeVolumeTagTagAssignment;
}

export interface StorageNetworkVolumeVolumeTagTagAssignment {
    /**
     * Who the tag was created by.
     */
    createdBy: string;
    /**
     * The unique id of the tag.
     */
    id: string;
    /**
     * Whether or not to show the tag as part of billing and invoices.
     */
    isBillingTag: boolean;
    /**
     * The name of the tag.
     */
    name: string;
    /**
     * The value of the tag assigned to the volume.
     */
    value?: string;
}

export interface TagResourceAssignment {
    /**
     * The resource name.
     */
    resourceName: string;
    /**
     * The value of the tag assigned to the resource.
     * * `createdBy ` - The tag's creator.
     */
    value: string;
}

