// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a phoenixNAP events datasource. This can be used to read event logs.
 *
 * ## Example Usage
 *
 * Fetch event logs by name and show their details.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@pulumi/pnap";
 *
 * const test = pnap.getEvents({
 *     events: [{
 *         name: "API.SshKeysUpdate",
 *     }],
 * });
 * export const logs = test;
 * ```
 */
export function getEvents(args: GetEventsArgs, opts?: pulumi.InvokeOptions): Promise<GetEventsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pnap:index/getEvents:getEvents", {
        "events": args.events,
    }, opts);
}

/**
 * A collection of arguments for invoking getEvents.
 */
export interface GetEventsArgs {
    /**
     * Block `events` has field `name`.
     */
    events: inputs.GetEventsEvent[];
}

/**
 * A collection of values returned by getEvents.
 */
export interface GetEventsResult {
    /**
     * The list of events recorded.
     */
    readonly events: outputs.GetEventsEvent[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
/**
 * Provides a phoenixNAP events datasource. This can be used to read event logs.
 *
 * ## Example Usage
 *
 * Fetch event logs by name and show their details.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@pulumi/pnap";
 *
 * const test = pnap.getEvents({
 *     events: [{
 *         name: "API.SshKeysUpdate",
 *     }],
 * });
 * export const logs = test;
 * ```
 */
export function getEventsOutput(args: GetEventsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventsResult> {
    return pulumi.output(args).apply((a: any) => getEvents(a, opts))
}

/**
 * A collection of arguments for invoking getEvents.
 */
export interface GetEventsOutputArgs {
    /**
     * Block `events` has field `name`.
     */
    events: pulumi.Input<pulumi.Input<inputs.GetEventsEventArgs>[]>;
}
