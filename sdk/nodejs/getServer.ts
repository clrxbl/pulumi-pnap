// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a phoenixNAP server datasource. This can be used to read servers.
 *
 * ## Example Usage
 *
 * Fetch a server data by hostname and show it's primary public IP address
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@pulumi/pnap";
 *
 * const serverDs = pnap.getServer({
 *     hostname: "demo-server",
 * });
 * export const serverId = serverDs.then(serverDs => serverDs.primaryIpAddress);
 * ```
 */
export function getServer(args?: GetServerArgs, opts?: pulumi.InvokeOptions): Promise<GetServerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pnap:index/getServer:getServer", {
        "hostname": args.hostname,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerArgs {
    /**
     * Server hostname.
     */
    hostname?: string;
    /**
     * The unique identifier of the server.
     */
    id?: string;
}

/**
 * A collection of values returned by getServer.
 */
export interface GetServerResult {
    readonly hostname: string;
    /**
     * The network identifier.
     */
    readonly id: string;
    /**
     * Server Location ID. Cannot be changed once a server is created.
     */
    readonly location: string;
    /**
     * Netris Controller configuration properties.
     */
    readonly netrisControllers: outputs.GetServerNetrisController[];
    /**
     * Netris Softgate configuration properties.
     */
    readonly netrisSoftgates: outputs.GetServerNetrisSoftgate[];
    /**
     * Entire network details of bare metal server.
     */
    readonly networkConfigurations: outputs.GetServerNetworkConfiguration[];
    /**
     * The type of network configuration for this server.
     */
    readonly networkType: string;
    /**
     * The serverâ€™s OS ID used when the server was created.
     */
    readonly os: string;
    /**
     * First usable public IP Address.
     */
    readonly primaryIpAddress: string;
    /**
     * Private IP Addresses assigned to server. Must contain at least 1 item.
     */
    readonly privateIpAddresses: string[];
    /**
     * Public IP Addresses assigned to server. Must contain at least 1 item.
     */
    readonly publicIpAddresses: string[];
    /**
     * The status of the server.
     */
    readonly status: string;
    /**
     * Storage configuration.
     */
    readonly storageConfigurations: outputs.GetServerStorageConfiguration[];
    /**
     * Unique identifier of the server to which the reservation has been transferred.
     */
    readonly supersededBy: string;
    /**
     * Unique identifier of the server from which the reservation has been transferred.
     */
    readonly supersedes: string;
    /**
     * The tags assigned to the server.
     */
    readonly tags: outputs.GetServerTag[];
    /**
     * Server type ID. Cannot be changed once a server is created.
     */
    readonly type: string;
}
/**
 * Provides a phoenixNAP server datasource. This can be used to read servers.
 *
 * ## Example Usage
 *
 * Fetch a server data by hostname and show it's primary public IP address
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pnap from "@pulumi/pnap";
 *
 * const serverDs = pnap.getServer({
 *     hostname: "demo-server",
 * });
 * export const serverId = serverDs.then(serverDs => serverDs.primaryIpAddress);
 * ```
 */
export function getServerOutput(args?: GetServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerResult> {
    return pulumi.output(args).apply((a: any) => getServer(a, opts))
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerOutputArgs {
    /**
     * Server hostname.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The unique identifier of the server.
     */
    id?: pulumi.Input<string>;
}
