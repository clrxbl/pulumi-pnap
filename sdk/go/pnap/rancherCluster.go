// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pnap

import (
	"context"
	"reflect"

	"errors"
	"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a phoenixNAP Rancher Cluster resource. This can be used to create and delete Rancher Server deployments.
//
// ## Example Usage
//
// # Create a Rancher Cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pnap.NewRancherCluster(ctx, "rancher-Deployment-1", &pnap.RancherClusterArgs{
//				Description: pulumi.String("A Rancher Server deployment with specific server type."),
//				Location:    pulumi.String("PHX"),
//				NodePools: &pnap.RancherClusterNodePoolsArgs{
//					NodeCount:  pulumi.Int(1),
//					ServerType: pulumi.String("s1.c1.medium"),
//					SshConfig: &pnap.RancherClusterNodePoolsSshConfigArgs{
//						InstallDefaultKeys: pulumi.Bool(false),
//						Keys: pulumi.StringArray{
//							pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne"),
//							pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RancherCluster struct {
	pulumi.CustomResourceState

	// Rancher configuration parameters. The `configuration` block has 7 fields.
	Configuration RancherClusterConfigurationPtrOutput `pulumi:"configuration"`
	// Cluster description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Rancher version that was installed on the cluster during the first creation process.
	InitialClusterVersion pulumi.StringOutput `pulumi:"initialClusterVersion"`
	// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
	Location pulumi.StringOutput `pulumi:"location"`
	// Connection parameters to use to connect to the Rancher Server Administrative GUI.
	Metadatas RancherClusterMetadataArrayOutput `pulumi:"metadatas"`
	// The name of the workload cluster. This field is autogenerated if not provided.
	Name pulumi.StringOutput `pulumi:"name"`
	// The node pools associated with the cluster (must contain exactly one item). The `nodePools` block has 4 fields.
	NodePools RancherClusterNodePoolsOutput `pulumi:"nodePools"`
	// The cluster status.
	StatusDescription pulumi.StringOutput `pulumi:"statusDescription"`
	// Workload cluster configuration parameters. The `workloadConfiguration` block has 4 fields.
	WorkloadConfiguration RancherClusterWorkloadConfigurationPtrOutput `pulumi:"workloadConfiguration"`
}

// NewRancherCluster registers a new resource with the given unique name, arguments, and options.
func NewRancherCluster(ctx *pulumi.Context,
	name string, args *RancherClusterArgs, opts ...pulumi.ResourceOption) (*RancherCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RancherCluster
	err := ctx.RegisterResource("pnap:index/rancherCluster:RancherCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRancherCluster gets an existing RancherCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRancherCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RancherClusterState, opts ...pulumi.ResourceOption) (*RancherCluster, error) {
	var resource RancherCluster
	err := ctx.ReadResource("pnap:index/rancherCluster:RancherCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RancherCluster resources.
type rancherClusterState struct {
	// Rancher configuration parameters. The `configuration` block has 7 fields.
	Configuration *RancherClusterConfiguration `pulumi:"configuration"`
	// Cluster description.
	Description *string `pulumi:"description"`
	// The Rancher version that was installed on the cluster during the first creation process.
	InitialClusterVersion *string `pulumi:"initialClusterVersion"`
	// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
	Location *string `pulumi:"location"`
	// Connection parameters to use to connect to the Rancher Server Administrative GUI.
	Metadatas []RancherClusterMetadata `pulumi:"metadatas"`
	// The name of the workload cluster. This field is autogenerated if not provided.
	Name *string `pulumi:"name"`
	// The node pools associated with the cluster (must contain exactly one item). The `nodePools` block has 4 fields.
	NodePools *RancherClusterNodePools `pulumi:"nodePools"`
	// The cluster status.
	StatusDescription *string `pulumi:"statusDescription"`
	// Workload cluster configuration parameters. The `workloadConfiguration` block has 4 fields.
	WorkloadConfiguration *RancherClusterWorkloadConfiguration `pulumi:"workloadConfiguration"`
}

type RancherClusterState struct {
	// Rancher configuration parameters. The `configuration` block has 7 fields.
	Configuration RancherClusterConfigurationPtrInput
	// Cluster description.
	Description pulumi.StringPtrInput
	// The Rancher version that was installed on the cluster during the first creation process.
	InitialClusterVersion pulumi.StringPtrInput
	// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
	Location pulumi.StringPtrInput
	// Connection parameters to use to connect to the Rancher Server Administrative GUI.
	Metadatas RancherClusterMetadataArrayInput
	// The name of the workload cluster. This field is autogenerated if not provided.
	Name pulumi.StringPtrInput
	// The node pools associated with the cluster (must contain exactly one item). The `nodePools` block has 4 fields.
	NodePools RancherClusterNodePoolsPtrInput
	// The cluster status.
	StatusDescription pulumi.StringPtrInput
	// Workload cluster configuration parameters. The `workloadConfiguration` block has 4 fields.
	WorkloadConfiguration RancherClusterWorkloadConfigurationPtrInput
}

func (RancherClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*rancherClusterState)(nil)).Elem()
}

type rancherClusterArgs struct {
	// Rancher configuration parameters. The `configuration` block has 7 fields.
	Configuration *RancherClusterConfiguration `pulumi:"configuration"`
	// Cluster description.
	Description *string `pulumi:"description"`
	// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
	Location string `pulumi:"location"`
	// The name of the workload cluster. This field is autogenerated if not provided.
	Name *string `pulumi:"name"`
	// The node pools associated with the cluster (must contain exactly one item). The `nodePools` block has 4 fields.
	NodePools *RancherClusterNodePools `pulumi:"nodePools"`
	// Workload cluster configuration parameters. The `workloadConfiguration` block has 4 fields.
	WorkloadConfiguration *RancherClusterWorkloadConfiguration `pulumi:"workloadConfiguration"`
}

// The set of arguments for constructing a RancherCluster resource.
type RancherClusterArgs struct {
	// Rancher configuration parameters. The `configuration` block has 7 fields.
	Configuration RancherClusterConfigurationPtrInput
	// Cluster description.
	Description pulumi.StringPtrInput
	// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
	Location pulumi.StringInput
	// The name of the workload cluster. This field is autogenerated if not provided.
	Name pulumi.StringPtrInput
	// The node pools associated with the cluster (must contain exactly one item). The `nodePools` block has 4 fields.
	NodePools RancherClusterNodePoolsPtrInput
	// Workload cluster configuration parameters. The `workloadConfiguration` block has 4 fields.
	WorkloadConfiguration RancherClusterWorkloadConfigurationPtrInput
}

func (RancherClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rancherClusterArgs)(nil)).Elem()
}

type RancherClusterInput interface {
	pulumi.Input

	ToRancherClusterOutput() RancherClusterOutput
	ToRancherClusterOutputWithContext(ctx context.Context) RancherClusterOutput
}

func (*RancherCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**RancherCluster)(nil)).Elem()
}

func (i *RancherCluster) ToRancherClusterOutput() RancherClusterOutput {
	return i.ToRancherClusterOutputWithContext(context.Background())
}

func (i *RancherCluster) ToRancherClusterOutputWithContext(ctx context.Context) RancherClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RancherClusterOutput)
}

// RancherClusterArrayInput is an input type that accepts RancherClusterArray and RancherClusterArrayOutput values.
// You can construct a concrete instance of `RancherClusterArrayInput` via:
//
//	RancherClusterArray{ RancherClusterArgs{...} }
type RancherClusterArrayInput interface {
	pulumi.Input

	ToRancherClusterArrayOutput() RancherClusterArrayOutput
	ToRancherClusterArrayOutputWithContext(context.Context) RancherClusterArrayOutput
}

type RancherClusterArray []RancherClusterInput

func (RancherClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RancherCluster)(nil)).Elem()
}

func (i RancherClusterArray) ToRancherClusterArrayOutput() RancherClusterArrayOutput {
	return i.ToRancherClusterArrayOutputWithContext(context.Background())
}

func (i RancherClusterArray) ToRancherClusterArrayOutputWithContext(ctx context.Context) RancherClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RancherClusterArrayOutput)
}

// RancherClusterMapInput is an input type that accepts RancherClusterMap and RancherClusterMapOutput values.
// You can construct a concrete instance of `RancherClusterMapInput` via:
//
//	RancherClusterMap{ "key": RancherClusterArgs{...} }
type RancherClusterMapInput interface {
	pulumi.Input

	ToRancherClusterMapOutput() RancherClusterMapOutput
	ToRancherClusterMapOutputWithContext(context.Context) RancherClusterMapOutput
}

type RancherClusterMap map[string]RancherClusterInput

func (RancherClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RancherCluster)(nil)).Elem()
}

func (i RancherClusterMap) ToRancherClusterMapOutput() RancherClusterMapOutput {
	return i.ToRancherClusterMapOutputWithContext(context.Background())
}

func (i RancherClusterMap) ToRancherClusterMapOutputWithContext(ctx context.Context) RancherClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RancherClusterMapOutput)
}

type RancherClusterOutput struct{ *pulumi.OutputState }

func (RancherClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RancherCluster)(nil)).Elem()
}

func (o RancherClusterOutput) ToRancherClusterOutput() RancherClusterOutput {
	return o
}

func (o RancherClusterOutput) ToRancherClusterOutputWithContext(ctx context.Context) RancherClusterOutput {
	return o
}

// Rancher configuration parameters. The `configuration` block has 7 fields.
func (o RancherClusterOutput) Configuration() RancherClusterConfigurationPtrOutput {
	return o.ApplyT(func(v *RancherCluster) RancherClusterConfigurationPtrOutput { return v.Configuration }).(RancherClusterConfigurationPtrOutput)
}

// Cluster description.
func (o RancherClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RancherCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Rancher version that was installed on the cluster during the first creation process.
func (o RancherClusterOutput) InitialClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RancherCluster) pulumi.StringOutput { return v.InitialClusterVersion }).(pulumi.StringOutput)
}

// Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)
func (o RancherClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *RancherCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Connection parameters to use to connect to the Rancher Server Administrative GUI.
func (o RancherClusterOutput) Metadatas() RancherClusterMetadataArrayOutput {
	return o.ApplyT(func(v *RancherCluster) RancherClusterMetadataArrayOutput { return v.Metadatas }).(RancherClusterMetadataArrayOutput)
}

// The name of the workload cluster. This field is autogenerated if not provided.
func (o RancherClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RancherCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The node pools associated with the cluster (must contain exactly one item). The `nodePools` block has 4 fields.
func (o RancherClusterOutput) NodePools() RancherClusterNodePoolsOutput {
	return o.ApplyT(func(v *RancherCluster) RancherClusterNodePoolsOutput { return v.NodePools }).(RancherClusterNodePoolsOutput)
}

// The cluster status.
func (o RancherClusterOutput) StatusDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *RancherCluster) pulumi.StringOutput { return v.StatusDescription }).(pulumi.StringOutput)
}

// Workload cluster configuration parameters. The `workloadConfiguration` block has 4 fields.
func (o RancherClusterOutput) WorkloadConfiguration() RancherClusterWorkloadConfigurationPtrOutput {
	return o.ApplyT(func(v *RancherCluster) RancherClusterWorkloadConfigurationPtrOutput { return v.WorkloadConfiguration }).(RancherClusterWorkloadConfigurationPtrOutput)
}

type RancherClusterArrayOutput struct{ *pulumi.OutputState }

func (RancherClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RancherCluster)(nil)).Elem()
}

func (o RancherClusterArrayOutput) ToRancherClusterArrayOutput() RancherClusterArrayOutput {
	return o
}

func (o RancherClusterArrayOutput) ToRancherClusterArrayOutputWithContext(ctx context.Context) RancherClusterArrayOutput {
	return o
}

func (o RancherClusterArrayOutput) Index(i pulumi.IntInput) RancherClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RancherCluster {
		return vs[0].([]*RancherCluster)[vs[1].(int)]
	}).(RancherClusterOutput)
}

type RancherClusterMapOutput struct{ *pulumi.OutputState }

func (RancherClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RancherCluster)(nil)).Elem()
}

func (o RancherClusterMapOutput) ToRancherClusterMapOutput() RancherClusterMapOutput {
	return o
}

func (o RancherClusterMapOutput) ToRancherClusterMapOutputWithContext(ctx context.Context) RancherClusterMapOutput {
	return o
}

func (o RancherClusterMapOutput) MapIndex(k pulumi.StringInput) RancherClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RancherCluster {
		return vs[0].(map[string]*RancherCluster)[vs[1].(string)]
	}).(RancherClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RancherClusterInput)(nil)).Elem(), &RancherCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*RancherClusterArrayInput)(nil)).Elem(), RancherClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RancherClusterMapInput)(nil)).Elem(), RancherClusterMap{})
	pulumi.RegisterOutputType(RancherClusterOutput{})
	pulumi.RegisterOutputType(RancherClusterArrayOutput{})
	pulumi.RegisterOutputType(RancherClusterMapOutput{})
}
