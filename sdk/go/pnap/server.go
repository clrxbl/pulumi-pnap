// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pnap

import (
	"context"
	"reflect"

	"errors"
	"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a phoenixNAP server resource. This can be used to create,
// modify, and delete servers.
//
// ## Example Usage
//
// # Create a server
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) string {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return base64.StdEncoding.EncodeToString(fileData[:])
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := pnap.NewServer(ctx, "test-Server-1", &pnap.ServerArgs{
//				Hostname:              pulumi.String("Test-Server-1"),
//				Os:                    pulumi.String("ubuntu/bionic"),
//				Type:                  pulumi.String("s1.c1.medium"),
//				Location:              pulumi.String("PHX"),
//				InstallDefaultSshKeys: pulumi.Bool(true),
//				SshKeys: pulumi.StringArray{
//					pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126"),
//				},
//				CloudInit: &pnap.ServerCloudInitArgs{
//					UserData: filebase64OrPanic("~/terraform-provider-pnap/create-folder.txt"),
//				},
//				NetworkConfiguration: &pnap.ServerNetworkConfigurationArgs{
//					PrivateNetworkConfiguration: &pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs{
//						ConfigurationType: pulumi.String("USER_DEFINED"),
//						PrivateNetworks: pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArray{
//							&pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs{
//								ServerPrivateNetwork: &pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs{
//									Id: pulumi.Any(pnap_private_network.TestNetwork33.Id),
//									Ips: pulumi.StringArray{
//										pulumi.String("10.0.0.12"),
//									},
//								},
//							},
//							&pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs{
//								ServerPrivateNetwork: &pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs{
//									Id: pulumi.Any(pnap_private_network.TestNetwork44.Id),
//									Ips: pulumi.StringArray{
//										pulumi.String("172.16.0.12"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Server struct {
	pulumi.CustomResourceState

	// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// Cloud-init configuration details. Structure is documented below.
	CloudInit ServerCloudInitOutput `pulumi:"cloudInit"`
	// The cluster reference id if any.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The number of physical cores present on each CPU.
	CoresPerCpu pulumi.IntOutput `pulumi:"coresPerCpu"`
	// A description of the machine CPU.
	Cpu pulumi.StringOutput `pulumi:"cpu"`
	// The number of CPUs available in the system.
	CpuCount pulumi.IntOutput `pulumi:"cpuCount"`
	// The CPU frequency in GHz.
	CpuFrequencyInGhz pulumi.IntOutput `pulumi:"cpuFrequencyInGhz"`
	// Server description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
	//
	// The `cloudInit` block has one field:
	Force pulumi.BoolPtrOutput `pulumi:"force"`
	// Server hostname.
	Hostname              pulumi.StringOutput  `pulumi:"hostname"`
	InstallDefaultSshKeys pulumi.BoolPtrOutput `pulumi:"installDefaultSshKeys"`
	// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
	InstallOsToRam pulumi.BoolOutput `pulumi:"installOsToRam"`
	// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
	Location pulumi.StringOutput `pulumi:"location"`
	// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
	ManagementAccessAllowedIps pulumi.StringArrayOutput `pulumi:"managementAccessAllowedIps"`
	// The URL of the management UI which will only be returned in response to provisioning a server.
	ManagementUiUrl pulumi.StringOutput `pulumi:"managementUiUrl"`
	// Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
	NetrisControllers ServerNetrisControllerArrayOutput `pulumi:"netrisControllers"`
	// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
	NetrisSoftgate ServerNetrisSoftgateOutput `pulumi:"netrisSoftgate"`
	// Entire network details of bare metal server. Structure is documented below.
	NetworkConfiguration ServerNetworkConfigurationOutput `pulumi:"networkConfiguration"`
	// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Os pulumi.StringOutput `pulumi:"os"`
	// Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
	Password pulumi.StringOutput `pulumi:"password"`
	// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
	PricingModel pulumi.StringOutput `pulumi:"pricingModel"`
	// Private IP Addresses assigned to server. Must contain at least 1 item.
	PrivateIpAddresses pulumi.StringArrayOutput `pulumi:"privateIpAddresses"`
	// Date and time when server was provisioned.
	ProvisionedOn pulumi.StringOutput `pulumi:"provisionedOn"`
	// Public IP Addresses assigned to server. Must contain at least 1 item.
	PublicIpAddresses pulumi.StringArrayOutput `pulumi:"publicIpAddresses"`
	// A description of the machine RAM.
	Ram pulumi.StringOutput `pulumi:"ram"`
	// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
	RdpAllowedIps pulumi.StringArrayOutput `pulumi:"rdpAllowedIps"`
	// Server reservation ID.
	ReservationId pulumi.StringOutput `pulumi:"reservationId"`
	// Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
	RootPassword pulumi.StringOutput `pulumi:"rootPassword"`
	// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
	SshKeyIds pulumi.StringArrayOutput `pulumi:"sshKeyIds"`
	// A list of SSH Keys that will be installed on the server.
	SshKeys pulumi.StringArrayOutput `pulumi:"sshKeys"`
	// The status of the server.
	Status pulumi.StringOutput `pulumi:"status"`
	// A description of the machine storage.
	Storage pulumi.StringOutput `pulumi:"storage"`
	// Storage configuration. Structure is documented below.
	StorageConfiguration ServerStorageConfigurationPtrOutput `pulumi:"storageConfiguration"`
	// Unique identifier of the server to which the reservation has been transferred.
	SupersededBy pulumi.StringOutput `pulumi:"supersededBy"`
	// Unique identifier of the server from which the reservation has been transferred.
	Supersedes pulumi.StringOutput `pulumi:"supersedes"`
	// Tags to set to server, if any. Structure is documented below.
	Tags ServerTagArrayOutput `pulumi:"tags"`
	// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Os == nil {
		return nil, errors.New("invalid value for required argument 'Os'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("pnap:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("pnap:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
	Action *string `pulumi:"action"`
	// Cloud-init configuration details. Structure is documented below.
	CloudInit *ServerCloudInit `pulumi:"cloudInit"`
	// The cluster reference id if any.
	ClusterId *string `pulumi:"clusterId"`
	// The number of physical cores present on each CPU.
	CoresPerCpu *int `pulumi:"coresPerCpu"`
	// A description of the machine CPU.
	Cpu *string `pulumi:"cpu"`
	// The number of CPUs available in the system.
	CpuCount *int `pulumi:"cpuCount"`
	// The CPU frequency in GHz.
	CpuFrequencyInGhz *int `pulumi:"cpuFrequencyInGhz"`
	// Server description.
	Description *string `pulumi:"description"`
	// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
	//
	// The `cloudInit` block has one field:
	Force *bool `pulumi:"force"`
	// Server hostname.
	Hostname              *string `pulumi:"hostname"`
	InstallDefaultSshKeys *bool   `pulumi:"installDefaultSshKeys"`
	// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
	InstallOsToRam *bool `pulumi:"installOsToRam"`
	// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
	Location *string `pulumi:"location"`
	// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
	ManagementAccessAllowedIps []string `pulumi:"managementAccessAllowedIps"`
	// The URL of the management UI which will only be returned in response to provisioning a server.
	ManagementUiUrl *string `pulumi:"managementUiUrl"`
	// Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
	NetrisControllers []ServerNetrisController `pulumi:"netrisControllers"`
	// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
	NetrisSoftgate *ServerNetrisSoftgate `pulumi:"netrisSoftgate"`
	// Entire network details of bare metal server. Structure is documented below.
	NetworkConfiguration *ServerNetworkConfiguration `pulumi:"networkConfiguration"`
	// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
	NetworkType *string `pulumi:"networkType"`
	// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Os *string `pulumi:"os"`
	// Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
	Password *string `pulumi:"password"`
	// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
	PricingModel *string `pulumi:"pricingModel"`
	// Private IP Addresses assigned to server. Must contain at least 1 item.
	PrivateIpAddresses []string `pulumi:"privateIpAddresses"`
	// Date and time when server was provisioned.
	ProvisionedOn *string `pulumi:"provisionedOn"`
	// Public IP Addresses assigned to server. Must contain at least 1 item.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// A description of the machine RAM.
	Ram *string `pulumi:"ram"`
	// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
	RdpAllowedIps []string `pulumi:"rdpAllowedIps"`
	// Server reservation ID.
	ReservationId *string `pulumi:"reservationId"`
	// Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
	RootPassword *string `pulumi:"rootPassword"`
	// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// A list of SSH Keys that will be installed on the server.
	SshKeys []string `pulumi:"sshKeys"`
	// The status of the server.
	Status *string `pulumi:"status"`
	// A description of the machine storage.
	Storage *string `pulumi:"storage"`
	// Storage configuration. Structure is documented below.
	StorageConfiguration *ServerStorageConfiguration `pulumi:"storageConfiguration"`
	// Unique identifier of the server to which the reservation has been transferred.
	SupersededBy *string `pulumi:"supersededBy"`
	// Unique identifier of the server from which the reservation has been transferred.
	Supersedes *string `pulumi:"supersedes"`
	// Tags to set to server, if any. Structure is documented below.
	Tags []ServerTag `pulumi:"tags"`
	// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Type *string `pulumi:"type"`
}

type ServerState struct {
	// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
	Action pulumi.StringPtrInput
	// Cloud-init configuration details. Structure is documented below.
	CloudInit ServerCloudInitPtrInput
	// The cluster reference id if any.
	ClusterId pulumi.StringPtrInput
	// The number of physical cores present on each CPU.
	CoresPerCpu pulumi.IntPtrInput
	// A description of the machine CPU.
	Cpu pulumi.StringPtrInput
	// The number of CPUs available in the system.
	CpuCount pulumi.IntPtrInput
	// The CPU frequency in GHz.
	CpuFrequencyInGhz pulumi.IntPtrInput
	// Server description.
	Description pulumi.StringPtrInput
	// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
	//
	// The `cloudInit` block has one field:
	Force pulumi.BoolPtrInput
	// Server hostname.
	Hostname              pulumi.StringPtrInput
	InstallDefaultSshKeys pulumi.BoolPtrInput
	// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
	InstallOsToRam pulumi.BoolPtrInput
	// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
	Location pulumi.StringPtrInput
	// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
	ManagementAccessAllowedIps pulumi.StringArrayInput
	// The URL of the management UI which will only be returned in response to provisioning a server.
	ManagementUiUrl pulumi.StringPtrInput
	// Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
	NetrisControllers ServerNetrisControllerArrayInput
	// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
	NetrisSoftgate ServerNetrisSoftgatePtrInput
	// Entire network details of bare metal server. Structure is documented below.
	NetworkConfiguration ServerNetworkConfigurationPtrInput
	// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
	NetworkType pulumi.StringPtrInput
	// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Os pulumi.StringPtrInput
	// Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
	Password pulumi.StringPtrInput
	// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
	PricingModel pulumi.StringPtrInput
	// Private IP Addresses assigned to server. Must contain at least 1 item.
	PrivateIpAddresses pulumi.StringArrayInput
	// Date and time when server was provisioned.
	ProvisionedOn pulumi.StringPtrInput
	// Public IP Addresses assigned to server. Must contain at least 1 item.
	PublicIpAddresses pulumi.StringArrayInput
	// A description of the machine RAM.
	Ram pulumi.StringPtrInput
	// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
	RdpAllowedIps pulumi.StringArrayInput
	// Server reservation ID.
	ReservationId pulumi.StringPtrInput
	// Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
	RootPassword pulumi.StringPtrInput
	// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
	SshKeyIds pulumi.StringArrayInput
	// A list of SSH Keys that will be installed on the server.
	SshKeys pulumi.StringArrayInput
	// The status of the server.
	Status pulumi.StringPtrInput
	// A description of the machine storage.
	Storage pulumi.StringPtrInput
	// Storage configuration. Structure is documented below.
	StorageConfiguration ServerStorageConfigurationPtrInput
	// Unique identifier of the server to which the reservation has been transferred.
	SupersededBy pulumi.StringPtrInput
	// Unique identifier of the server from which the reservation has been transferred.
	Supersedes pulumi.StringPtrInput
	// Tags to set to server, if any. Structure is documented below.
	Tags ServerTagArrayInput
	// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Type pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
	Action *string `pulumi:"action"`
	// Cloud-init configuration details. Structure is documented below.
	CloudInit *ServerCloudInit `pulumi:"cloudInit"`
	// Server description.
	Description *string `pulumi:"description"`
	// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
	//
	// The `cloudInit` block has one field:
	Force *bool `pulumi:"force"`
	// Server hostname.
	Hostname              string `pulumi:"hostname"`
	InstallDefaultSshKeys *bool  `pulumi:"installDefaultSshKeys"`
	// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
	InstallOsToRam *bool `pulumi:"installOsToRam"`
	// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
	Location string `pulumi:"location"`
	// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
	ManagementAccessAllowedIps []string `pulumi:"managementAccessAllowedIps"`
	// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
	NetrisSoftgate *ServerNetrisSoftgate `pulumi:"netrisSoftgate"`
	// Entire network details of bare metal server. Structure is documented below.
	NetworkConfiguration *ServerNetworkConfiguration `pulumi:"networkConfiguration"`
	// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
	NetworkType *string `pulumi:"networkType"`
	// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Os string `pulumi:"os"`
	// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
	PricingModel *string `pulumi:"pricingModel"`
	// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
	RdpAllowedIps []string `pulumi:"rdpAllowedIps"`
	// Server reservation ID.
	ReservationId *string `pulumi:"reservationId"`
	// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
	SshKeyIds []string `pulumi:"sshKeyIds"`
	// A list of SSH Keys that will be installed on the server.
	SshKeys []string `pulumi:"sshKeys"`
	// Storage configuration. Structure is documented below.
	StorageConfiguration *ServerStorageConfiguration `pulumi:"storageConfiguration"`
	// Tags to set to server, if any. Structure is documented below.
	Tags []ServerTag `pulumi:"tags"`
	// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
	Action pulumi.StringPtrInput
	// Cloud-init configuration details. Structure is documented below.
	CloudInit ServerCloudInitPtrInput
	// Server description.
	Description pulumi.StringPtrInput
	// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
	//
	// The `cloudInit` block has one field:
	Force pulumi.BoolPtrInput
	// Server hostname.
	Hostname              pulumi.StringInput
	InstallDefaultSshKeys pulumi.BoolPtrInput
	// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
	InstallOsToRam pulumi.BoolPtrInput
	// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
	Location pulumi.StringInput
	// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
	ManagementAccessAllowedIps pulumi.StringArrayInput
	// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
	NetrisSoftgate ServerNetrisSoftgatePtrInput
	// Entire network details of bare metal server. Structure is documented below.
	NetworkConfiguration ServerNetworkConfigurationPtrInput
	// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
	NetworkType pulumi.StringPtrInput
	// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Os pulumi.StringInput
	// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
	PricingModel pulumi.StringPtrInput
	// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
	RdpAllowedIps pulumi.StringArrayInput
	// Server reservation ID.
	ReservationId pulumi.StringPtrInput
	// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
	SshKeyIds pulumi.StringArrayInput
	// A list of SSH Keys that will be installed on the server.
	SshKeys pulumi.StringArrayInput
	// Storage configuration. Structure is documented below.
	StorageConfiguration ServerStorageConfigurationPtrInput
	// Tags to set to server, if any. Structure is documented below.
	Tags ServerTagArrayInput
	// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
	Type pulumi.StringInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.
func (o ServerOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// Cloud-init configuration details. Structure is documented below.
func (o ServerOutput) CloudInit() ServerCloudInitOutput {
	return o.ApplyT(func(v *Server) ServerCloudInitOutput { return v.CloudInit }).(ServerCloudInitOutput)
}

// The cluster reference id if any.
func (o ServerOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The number of physical cores present on each CPU.
func (o ServerOutput) CoresPerCpu() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.CoresPerCpu }).(pulumi.IntOutput)
}

// A description of the machine CPU.
func (o ServerOutput) Cpu() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Cpu }).(pulumi.StringOutput)
}

// The number of CPUs available in the system.
func (o ServerOutput) CpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.CpuCount }).(pulumi.IntOutput)
}

// The CPU frequency in GHz.
func (o ServerOutput) CpuFrequencyInGhz() pulumi.IntOutput {
	return o.ApplyT(func(v *Server) pulumi.IntOutput { return v.CpuFrequencyInGhz }).(pulumi.IntOutput)
}

// Server description.
func (o ServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.
//
// The `cloudInit` block has one field:
func (o ServerOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

// Server hostname.
func (o ServerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

func (o ServerOutput) InstallDefaultSshKeys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolPtrOutput { return v.InstallDefaultSshKeys }).(pulumi.BoolPtrOutput)
}

// If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.
func (o ServerOutput) InstallOsToRam() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.InstallOsToRam }).(pulumi.BoolOutput)
}

// Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)
func (o ServerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.
func (o ServerOutput) ManagementAccessAllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.ManagementAccessAllowedIps }).(pulumi.StringArrayOutput)
}

// The URL of the management UI which will only be returned in response to provisioning a server.
func (o ServerOutput) ManagementUiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ManagementUiUrl }).(pulumi.StringOutput)
}

// Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).
func (o ServerOutput) NetrisControllers() ServerNetrisControllerArrayOutput {
	return o.ApplyT(func(v *Server) ServerNetrisControllerArrayOutput { return v.NetrisControllers }).(ServerNetrisControllerArrayOutput)
}

// Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.
func (o ServerOutput) NetrisSoftgate() ServerNetrisSoftgateOutput {
	return o.ApplyT(func(v *Server) ServerNetrisSoftgateOutput { return v.NetrisSoftgate }).(ServerNetrisSoftgateOutput)
}

// Entire network details of bare metal server. Structure is documented below.
func (o ServerOutput) NetworkConfiguration() ServerNetworkConfigurationOutput {
	return o.ApplyT(func(v *Server) ServerNetworkConfigurationOutput { return v.NetworkConfiguration }).(ServerNetworkConfigurationOutput)
}

// The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.
func (o ServerOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// The serverâ€™s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
func (o ServerOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

// Password set for user Admin on Windows server which will only be returned in response to provisioning a server.
func (o ServerOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.
func (o ServerOutput) PricingModel() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PricingModel }).(pulumi.StringOutput)
}

// Private IP Addresses assigned to server. Must contain at least 1 item.
func (o ServerOutput) PrivateIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.PrivateIpAddresses }).(pulumi.StringArrayOutput)
}

// Date and time when server was provisioned.
func (o ServerOutput) ProvisionedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ProvisionedOn }).(pulumi.StringOutput)
}

// Public IP Addresses assigned to server. Must contain at least 1 item.
func (o ServerOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// A description of the machine RAM.
func (o ServerOutput) Ram() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Ram }).(pulumi.StringOutput)
}

// List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.
func (o ServerOutput) RdpAllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.RdpAllowedIps }).(pulumi.StringArrayOutput)
}

// Server reservation ID.
func (o ServerOutput) ReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ReservationId }).(pulumi.StringOutput)
}

// Password set for user root on an ESXi server which will only be returned in response to provisioning a server.
func (o ServerOutput) RootPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.RootPassword }).(pulumi.StringOutput)
}

// A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.
func (o ServerOutput) SshKeyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SshKeyIds }).(pulumi.StringArrayOutput)
}

// A list of SSH Keys that will be installed on the server.
func (o ServerOutput) SshKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Server) pulumi.StringArrayOutput { return v.SshKeys }).(pulumi.StringArrayOutput)
}

// The status of the server.
func (o ServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A description of the machine storage.
func (o ServerOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Storage }).(pulumi.StringOutput)
}

// Storage configuration. Structure is documented below.
func (o ServerOutput) StorageConfiguration() ServerStorageConfigurationPtrOutput {
	return o.ApplyT(func(v *Server) ServerStorageConfigurationPtrOutput { return v.StorageConfiguration }).(ServerStorageConfigurationPtrOutput)
}

// Unique identifier of the server to which the reservation has been transferred.
func (o ServerOutput) SupersededBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.SupersededBy }).(pulumi.StringOutput)
}

// Unique identifier of the server from which the reservation has been transferred.
func (o ServerOutput) Supersedes() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Supersedes }).(pulumi.StringOutput)
}

// Tags to set to server, if any. Structure is documented below.
func (o ServerOutput) Tags() ServerTagArrayOutput {
	return o.ApplyT(func(v *Server) ServerTagArrayOutput { return v.Tags }).(ServerTagArrayOutput)
}

// Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).
func (o ServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
