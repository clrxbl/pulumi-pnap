// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pnap

import (
	"context"
	"reflect"

	"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a phoenixNAP invoices datasource. This can be used to read invoices.
//
// ## Example Usage
//
// Fetch invoices by status and date sent and show their details.
//
// ```go
// package main
//
// import (
//
//	"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			query_C, err := pnap.GetInvoices(ctx, &pnap.GetInvoicesArgs{
//				Status:     pulumi.StringRef("PAID"),
//				SentOnFrom: pulumi.StringRef("2020-04-13T00:00:00.000Z"),
//				SentOnTo:   pulumi.StringRef("2022-04-13T00:00:00.000Z"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("invoices", query_C.PaginatedInvoices)
//			return nil
//		})
//	}
//
// ```
func GetInvoices(ctx *pulumi.Context, args *GetInvoicesArgs, opts ...pulumi.InvokeOption) (*GetInvoicesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInvoicesResult
	err := ctx.Invoke("pnap:index/getInvoices:getInvoices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInvoices.
type GetInvoicesArgs struct {
	// The limit of the number of results returned. The number of records returned may be smaller than the limit.
	Limit *int `pulumi:"limit"`
	// A user-friendly reference number assigned to the invoice.
	Number *string `pulumi:"number"`
	// The number of items to skip in the results.
	Offset *int `pulumi:"offset"`
	// Minimum value to filter invoices by sent on date.
	SentOnFrom *string `pulumi:"sentOnFrom"`
	// Maximum value to filter invoices by sent on date.
	SentOnTo *string `pulumi:"sentOnTo"`
	// Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
	SortDirection *string `pulumi:"sortDirection"`
	// If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
	SortField *string `pulumi:"sortField"`
	// Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
	Status *string `pulumi:"status"`
}

// A collection of values returned by getInvoices.
type GetInvoicesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Maximum number of items in the page (actual returned length can be less).
	Limit *int `pulumi:"limit"`
	// A user-friendly reference number assigned to the invoice.
	Number *string `pulumi:"number"`
	// The number of returned items skipped.
	Offset *int `pulumi:"offset"`
	// The paginated list of invoices.
	PaginatedInvoices []GetInvoicesPaginatedInvoice `pulumi:"paginatedInvoices"`
	SentOnFrom        *string                       `pulumi:"sentOnFrom"`
	SentOnTo          *string                       `pulumi:"sentOnTo"`
	SortDirection     *string                       `pulumi:"sortDirection"`
	SortField         *string                       `pulumi:"sortField"`
	// The status of the invoice.
	Status *string `pulumi:"status"`
}

func GetInvoicesOutput(ctx *pulumi.Context, args GetInvoicesOutputArgs, opts ...pulumi.InvokeOption) GetInvoicesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInvoicesResult, error) {
			args := v.(GetInvoicesArgs)
			r, err := GetInvoices(ctx, &args, opts...)
			var s GetInvoicesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInvoicesResultOutput)
}

// A collection of arguments for invoking getInvoices.
type GetInvoicesOutputArgs struct {
	// The limit of the number of results returned. The number of records returned may be smaller than the limit.
	Limit pulumi.IntPtrInput `pulumi:"limit"`
	// A user-friendly reference number assigned to the invoice.
	Number pulumi.StringPtrInput `pulumi:"number"`
	// The number of items to skip in the results.
	Offset pulumi.IntPtrInput `pulumi:"offset"`
	// Minimum value to filter invoices by sent on date.
	SentOnFrom pulumi.StringPtrInput `pulumi:"sentOnFrom"`
	// Maximum value to filter invoices by sent on date.
	SentOnTo pulumi.StringPtrInput `pulumi:"sentOnTo"`
	// Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.
	SortDirection pulumi.StringPtrInput `pulumi:"sortDirection"`
	// If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.
	SortField pulumi.StringPtrInput `pulumi:"sortField"`
	// Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetInvoicesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvoicesArgs)(nil)).Elem()
}

// A collection of values returned by getInvoices.
type GetInvoicesResultOutput struct{ *pulumi.OutputState }

func (GetInvoicesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvoicesResult)(nil)).Elem()
}

func (o GetInvoicesResultOutput) ToGetInvoicesResultOutput() GetInvoicesResultOutput {
	return o
}

func (o GetInvoicesResultOutput) ToGetInvoicesResultOutputWithContext(ctx context.Context) GetInvoicesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetInvoicesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvoicesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Maximum number of items in the page (actual returned length can be less).
func (o GetInvoicesResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetInvoicesResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

// A user-friendly reference number assigned to the invoice.
func (o GetInvoicesResultOutput) Number() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvoicesResult) *string { return v.Number }).(pulumi.StringPtrOutput)
}

// The number of returned items skipped.
func (o GetInvoicesResultOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetInvoicesResult) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

// The paginated list of invoices.
func (o GetInvoicesResultOutput) PaginatedInvoices() GetInvoicesPaginatedInvoiceArrayOutput {
	return o.ApplyT(func(v GetInvoicesResult) []GetInvoicesPaginatedInvoice { return v.PaginatedInvoices }).(GetInvoicesPaginatedInvoiceArrayOutput)
}

func (o GetInvoicesResultOutput) SentOnFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvoicesResult) *string { return v.SentOnFrom }).(pulumi.StringPtrOutput)
}

func (o GetInvoicesResultOutput) SentOnTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvoicesResult) *string { return v.SentOnTo }).(pulumi.StringPtrOutput)
}

func (o GetInvoicesResultOutput) SortDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvoicesResult) *string { return v.SortDirection }).(pulumi.StringPtrOutput)
}

func (o GetInvoicesResultOutput) SortField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvoicesResult) *string { return v.SortField }).(pulumi.StringPtrOutput)
}

// The status of the invoice.
func (o GetInvoicesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvoicesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInvoicesResultOutput{})
}
