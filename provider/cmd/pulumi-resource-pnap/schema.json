{
    "name": "pnap",
    "displayName": "PhoenixNAP",
    "description": "A Pulumi package for creating and managing PhoenixNAP BMC resources.",
    "keywords": [
        "phoenixnap",
        "pnap",
        "category/cloud"
    ],
    "homepage": "https://www.phoenixnap.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`pnap` Terraform Provider](https://github.com/phoenixnap/terraform-provider-pnap).",
    "repository": "https://github.com/phoenixnap/pulumi-pnap",
    "pluginDownloadURL": "https://github.com/phoenixnap/pulumi-pnap/releases/",
    "publisher": "phoenixnap",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/phoenixnap/pulumi-pnap/sdk/go/pnap",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing PhoenixNAP BMC resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/phoenixnap/terraform-provider-pnap)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-pnap` repo](https://github.com/phoenixnap/pulumi-pnap/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-pnap` repo](https://github.com/phoenixnap/terraform-provider-pnap/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/phoenixnap/terraform-provider-pnap)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-pnap` repo](https://github.com/phoenixnap/pulumi-pnap/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-pnap` repo](https://github.com/phoenixnap/terraform-provider-pnap/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "clientId": {
                "type": "string"
            },
            "clientSecret": {
                "type": "string",
                "secret": true
            },
            "configFilePath": {
                "type": "string"
            }
        }
    },
    "types": {
        "pnap:index/IpBlockTag:IpBlockTag": {
            "properties": {
                "tagAssignment": {
                    "$ref": "#/types/pnap:index/IpBlockTagTagAssignment:IpBlockTagTagAssignment",
                    "description": "Tag request to assign to the IP Block.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "tagAssignment"
                    ]
                }
            }
        },
        "pnap:index/IpBlockTagTagAssignment:IpBlockTagTagAssignment": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Who the tag was created by.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the tag.\n"
                },
                "isBillingTag": {
                    "type": "boolean",
                    "description": "Whether or not to show the tag as part of billing and invoices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag assigned to the IP Block.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "id",
                        "isBillingTag",
                        "name"
                    ]
                }
            }
        },
        "pnap:index/PrivateNetworkMembership:PrivateNetworkMembership": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of public IPs associated to the resource.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The resource identifier.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The resource's type.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ips",
                        "resourceId",
                        "resourceType"
                    ]
                }
            }
        },
        "pnap:index/PrivateNetworkServer:PrivateNetworkServer": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The server identifier.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of public IPs associated to the resource.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ips"
                    ]
                }
            }
        },
        "pnap:index/PublicNetworkIpBlock:PublicNetworkIpBlock": {
            "properties": {
                "publicNetworkIpBlock": {
                    "$ref": "#/types/pnap:index/PublicNetworkIpBlockPublicNetworkIpBlock:PublicNetworkIpBlockPublicNetworkIpBlock",
                    "description": "The assigned IP Block to the public network.\n",
                    "language": {
                        "csharp": {
                            "name": "AssignedIpBlock"
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "publicNetworkIpBlock"
                    ]
                }
            }
        },
        "pnap:index/PublicNetworkIpBlockPublicNetworkIpBlock:PublicNetworkIpBlockPublicNetworkIpBlock": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The IP Block identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "pnap:index/PublicNetworkMembership:PublicNetworkMembership": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of public IPs associated to the resource.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The resource identifier.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The resource's type.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ips",
                        "resourceId",
                        "resourceType"
                    ]
                }
            }
        },
        "pnap:index/RancherClusterConfiguration:RancherClusterConfiguration": {
            "properties": {
                "certificates": {
                    "$ref": "#/types/pnap:index/RancherClusterConfigurationCertificates:RancherClusterConfigurationCertificates",
                    "description": "Define the custom SSL certificates to be used instead of defaults. The `certificates` block has 3 fields.\n"
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "This maps to rancher's cluster-domain. Cluster Domain.\n"
                },
                "etcdSnapshotRetention": {
                    "type": "integer",
                    "description": "This maps to rancher's etcd-snapshot-retention. Number of snapshots to retain. Default value is 5.\n"
                },
                "etcdSnapshotScheduleCron": {
                    "type": "string",
                    "description": "This maps to rancher's etcd-snapshot-schedule-cron. Snapshot interval time in cron spec.\n"
                },
                "nodeTaint": {
                    "type": "string",
                    "description": "This maps to rancher's node-taint. Registering kubelet with set of taints.\n"
                },
                "tlsSan": {
                    "type": "string",
                    "description": "This maps to rancher's tls-san. Add additional hostname or IP as a Subject Alternative Name in the TLS cert.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Shared secret used to join a server or agent to a cluster.\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "pnap:index/RancherClusterConfigurationCertificates:RancherClusterConfigurationCertificates": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "The SSL CA certificate to be used for rancher admin.\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The SSL certificate to be used for rancher admin.\n"
                },
                "certificateKey": {
                    "type": "string",
                    "description": "The SSL certificate key to be used for rancher admin.\n"
                }
            },
            "type": "object"
        },
        "pnap:index/RancherClusterMetadata:RancherClusterMetadata": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "This is the password to be used to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The Rancher Server URL.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to use to login to the Rancher Server. This field is returned only as a response to the create cluster request. Make sure to take note or you will not be able to access the server.\n",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "password",
                        "url",
                        "username"
                    ]
                }
            }
        },
        "pnap:index/RancherClusterNodePools:RancherClusterNodePools": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the workload cluster. This field is autogenerated if not provided.\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "Number of configured nodes. Currently only node counts of 1 and 3 are possible.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/RancherClusterNodePoolsNode:RancherClusterNodePoolsNode"
                    },
                    "description": "The nodes associated with this node pool.\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Node server type. Cannot be changed once the cluster is created. Default value is \"s0.d1.small\". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)\n"
                },
                "sshConfig": {
                    "$ref": "#/types/pnap:index/RancherClusterNodePoolsSshConfig:RancherClusterNodePoolsSshConfig",
                    "description": "Configuration defining which public SSH keys are pre-installed as authorized on the server. The `ssh_config` block has 3 fields.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "nodeCount",
                        "nodes",
                        "serverType"
                    ]
                }
            }
        },
        "pnap:index/RancherClusterNodePoolsNode:RancherClusterNodePoolsNode": {
            "properties": {
                "serverId": {
                    "type": "string",
                    "description": "The server identifier.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "serverId"
                    ]
                }
            }
        },
        "pnap:index/RancherClusterNodePoolsSshConfig:RancherClusterNodePoolsSshConfig": {
            "properties": {
                "installDefaultKeys": {
                    "type": "boolean",
                    "description": "Define whether public keys marked as default should be installed on this node. Default value is true.\n"
                },
                "keyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of public SSH key identifiers.\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of public SSH keys.\n"
                }
            },
            "type": "object"
        },
        "pnap:index/RancherClusterWorkloadConfiguration:RancherClusterWorkloadConfiguration": {
            "properties": {
                "location": {
                    "type": "string",
                    "description": "Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload cluster. This field is autogenerated if not provided.\n"
                },
                "serverCount": {
                    "type": "integer",
                    "description": "Number of configured servers. Currently only server counts of 1 and 3 are possible. Default value is 1.\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Node server type. Cannot be changed once the cluster is created. Default value is \"s0.d1.small\". For a full list of allowed values visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)\n"
                }
            },
            "type": "object",
            "required": [
                "location",
                "serverType"
            ]
        },
        "pnap:index/ServerCloudInit:ServerCloudInit": {
            "properties": {
                "userData": {
                    "type": "string",
                    "description": "User data for the [cloud-init](https://cloudinit.readthedocs.io/en/latest/) configuration in base64 encoding. NoCloud format is supported. Follow the [instructions](https://phoenixnap.com/kb/bmc-cloud-init) on how to provision a server using cloud-init. Only ubuntu/bionic and ubuntu/focal and ubuntu/jammy are supported.\n\n\nThe `netris_softgate` block has three fields:\n"
                }
            },
            "type": "object"
        },
        "pnap:index/ServerNetrisController:ServerNetrisController": {
            "properties": {
                "hostOs": {
                    "type": "string",
                    "description": "Host OS on which the Netris Softgate is installed.\n"
                },
                "netrisUserPassword": {
                    "type": "string",
                    "description": "Auto-generated password set for user 'netris' in the web console.\n"
                },
                "netrisWebConsoleUrl": {
                    "type": "string",
                    "description": "The URL for the Netris Controller web console.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostOs",
                        "netrisUserPassword",
                        "netrisWebConsoleUrl"
                    ]
                }
            }
        },
        "pnap:index/ServerNetrisSoftgate:ServerNetrisSoftgate": {
            "properties": {
                "controllerAddress": {
                    "type": "string",
                    "description": "IP address or hostname through which to reach the Netris Controller.\n"
                },
                "controllerAuthKey": {
                    "type": "string",
                    "description": "The authentication key of the Netris Controller to connect to. Required for the softgate agent to be able to interact with the Netris Controller.\n\n\nThe `tags` block has field `tag_assignment`.\nThe `tag_assignment` block has 2 fields:\n"
                },
                "controllerVersion": {
                    "type": "string",
                    "description": "The version of the Netris Controller to connect to.\n"
                },
                "hostOs": {
                    "type": "string",
                    "description": "Host OS on which the Netris Softgate is installed.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostOs"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfiguration:ServerNetworkConfiguration": {
            "properties": {
                "gatewayAddress": {
                    "type": "string",
                    "description": "The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.\n"
                },
                "ipBlocksConfiguration": {
                    "$ref": "#/types/pnap:index/ServerNetworkConfigurationIpBlocksConfiguration:ServerNetworkConfigurationIpBlocksConfiguration"
                },
                "privateNetworkConfiguration": {
                    "$ref": "#/types/pnap:index/ServerNetworkConfigurationPrivateNetworkConfiguration:ServerNetworkConfigurationPrivateNetworkConfiguration"
                },
                "publicNetworkConfiguration": {
                    "$ref": "#/types/pnap:index/ServerNetworkConfigurationPublicNetworkConfiguration:ServerNetworkConfigurationPublicNetworkConfiguration"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gatewayAddress",
                        "ipBlocksConfiguration",
                        "privateNetworkConfiguration",
                        "publicNetworkConfiguration"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationIpBlocksConfiguration:ServerNetworkConfigurationIpBlocksConfiguration": {
            "properties": {
                "configurationType": {
                    "type": "string",
                    "description": "Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.\n"
                },
                "ipBlocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/ServerNetworkConfigurationIpBlocksConfigurationIpBlock:ServerNetworkConfigurationIpBlocksConfigurationIpBlock"
                    },
                    "description": "Used to specify the previously purchased IP blocks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configurationType. Must contain at most 1 item.\n\nThe `ip_blocks` block has field `server_ip_block`.\nThe `server_ip_block` block has 2 fields:\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configurationType",
                        "ipBlocks"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationIpBlocksConfigurationIpBlock:ServerNetworkConfigurationIpBlocksConfigurationIpBlock": {
            "properties": {
                "serverIpBlock": {
                    "$ref": "#/types/pnap:index/ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock:ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "serverIpBlock"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock:ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The network identifier.\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "The VLAN on which this IP block has been configured within the network switch.\n\nThe `public_network_configuration` is the fourth field of the `network_configuration` block.\nThe `public_network_configuration` block has field `public_networks`:\n\nThe `public_networks` block has field `server_public_network`.\nThe `server_public_network` block has 2 fields:\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "vlanId"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationPrivateNetworkConfiguration:ServerNetworkConfigurationPrivateNetworkConfiguration": {
            "properties": {
                "configurationType": {
                    "type": "string",
                    "description": "Determines the approach for configuring IP blocks for the server being provisioned. If `PURCHASE_NEW` is selected, the smallest supported range, depending on the operating system, is allocated to the server. The following values are allowed: `PURCHASE_NEW`, `USER_DEFINED`, `NONE`. Default value is `PURCHASE_NEW`.\n"
                },
                "gatewayAddress": {
                    "type": "string",
                    "description": "The address of the gateway assigned / to assign to the server. When used as part of request body, it has to match one of the IP addresses used in the existing assigned private networks for the relevant location. Deprecated in favour of a common gateway address across all networks available under `network_configuration`.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork:ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork"
                    },
                    "description": "The list of private networks this server is member of. When this field is part of request body, it'll be used to specify the private networks to assign to this server upon provisioning. Used alongside the `USER_DEFINED` configuration type.\n\nThe `private_networks` block has field `server_private_network`.\nThe `server_private_network` block has 3 fields:\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configurationType",
                        "gatewayAddress",
                        "privateNetworks"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork:ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork": {
            "properties": {
                "serverPrivateNetwork": {
                    "$ref": "#/types/pnap:index/ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork:ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "serverPrivateNetwork"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork:ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork": {
            "properties": {
                "dhcp": {
                    "type": "boolean",
                    "description": "Determines whether DHCP is enabled for this server. Should be false if ips is not an empty list. Not supported for proxmox OS. Default value is `false`.\n\nThe `ip_blocks_configuration` is the third field of the `network_configuration` block.\nThe `ip_blocks_configuration` block has 2 fields:\n"
                },
                "id": {
                    "type": "string",
                    "description": "The network identifier.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.\n\n\nThe `storage_configuration` block has field `root_partition`.\nThe `root_partition` block has two fields:\n"
                },
                "statusDescription": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dhcp",
                        "id",
                        "ips",
                        "statusDescription"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationPublicNetworkConfiguration:ServerNetworkConfigurationPublicNetworkConfiguration": {
            "properties": {
                "publicNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork:ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "publicNetworks"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork:ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork": {
            "properties": {
                "serverPublicNetwork": {
                    "$ref": "#/types/pnap:index/ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork:ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "serverPublicNetwork"
                    ]
                }
            }
        },
        "pnap:index/ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork:ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The network identifier.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPs to configure on the server. IPs must be within the network's range. Must contain at least 1 item.\n\n\nThe `storage_configuration` block has field `root_partition`.\nThe `root_partition` block has two fields:\n"
                },
                "statusDescription": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ips"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ips",
                        "statusDescription"
                    ]
                }
            }
        },
        "pnap:index/ServerStorageConfiguration:ServerStorageConfiguration": {
            "properties": {
                "rootPartition": {
                    "$ref": "#/types/pnap:index/ServerStorageConfigurationRootPartition:ServerStorageConfigurationRootPartition"
                }
            },
            "type": "object"
        },
        "pnap:index/ServerStorageConfigurationRootPartition:ServerStorageConfigurationRootPartition": {
            "properties": {
                "raid": {
                    "type": "string",
                    "description": "Software RAID configuration. The following RAID options are available: `NO_RAID`, `RAID_0`, `RAID_1`.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the root partition in GB. `-1` to use all available space.\n"
                }
            },
            "type": "object"
        },
        "pnap:index/ServerTag:ServerTag": {
            "properties": {
                "tagAssignment": {
                    "$ref": "#/types/pnap:index/ServerTagTagAssignment:ServerTagTagAssignment"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "tagAssignment"
                    ]
                }
            }
        },
        "pnap:index/ServerTagTagAssignment:ServerTagTagAssignment": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Who the tag was created by.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The network identifier.\n"
                },
                "isBillingTag": {
                    "type": "boolean",
                    "description": "Whether or not to show the tag as part of billing and invoices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag assigned to the IP Block.\n\n\nThe `network_configuration` block has 4 fields: `gateway_address`, `private_network_configuration`, `ip_blocks_configuration` and `public_network_configuration`.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "id",
                        "isBillingTag",
                        "name"
                    ]
                }
            }
        },
        "pnap:index/StorageNetworkVolume:StorageNetworkVolume": {
            "properties": {
                "volume": {
                    "$ref": "#/types/pnap:index/StorageNetworkVolumeVolume:StorageNetworkVolumeVolume",
                    "description": "Volume to be created alongside storage.\n"
                }
            },
            "type": "object",
            "required": [
                "volume"
            ]
        },
        "pnap:index/StorageNetworkVolumeVolume:StorageNetworkVolumeVolume": {
            "properties": {
                "capacityInGb": {
                    "type": "integer",
                    "description": "Capacity of volume in GB. Currently only whole numbers and multiples of 1000 GB are supported.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when this volume was created.\n"
                },
                "deleteRequestedOn": {
                    "type": "string",
                    "description": "Date and time of the initial request for volume deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Volume description.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the tag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Volume's full path. It is in form of `/{volumeId}/pathSuffix`.\n"
                },
                "pathSuffix": {
                    "type": "string",
                    "description": "Last part of volume's path.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/StorageNetworkVolumeVolumePermission:StorageNetworkVolumeVolumePermission"
                    },
                    "description": "Permissions for the volume.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "File system protocol.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Volume's status.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/StorageNetworkVolumeVolumeTag:StorageNetworkVolumeVolumeTag"
                    },
                    "description": "Tags to set to the volume.\n"
                },
                "usedCapacityInGb": {
                    "type": "integer",
                    "description": "Used capacity in GB, updated periodically.\n"
                }
            },
            "type": "object",
            "required": [
                "capacityInGb",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "capacityInGb",
                        "createdOn",
                        "deleteRequestedOn",
                        "id",
                        "name",
                        "path",
                        "pathSuffix",
                        "permissions",
                        "protocol",
                        "status",
                        "usedCapacityInGb"
                    ]
                }
            }
        },
        "pnap:index/StorageNetworkVolumeVolumePermission:StorageNetworkVolumeVolumePermission": {
            "properties": {
                "nfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/StorageNetworkVolumeVolumePermissionNf:StorageNetworkVolumeVolumePermissionNf"
                    },
                    "description": "NFS specific permissions on the volume.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nfs"
                    ]
                }
            }
        },
        "pnap:index/StorageNetworkVolumeVolumePermissionNf:StorageNetworkVolumeVolumePermissionNf": {
            "properties": {
                "allSquashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All squash permission.\n"
                },
                "noSquashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "No squash permission.\n"
                },
                "readOnlies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Read only access.\n"
                },
                "readWrites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Read/Write access.\n"
                },
                "rootSquashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Root squash permission.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allSquashes",
                        "noSquashes",
                        "readOnlies",
                        "readWrites",
                        "rootSquashes"
                    ]
                }
            }
        },
        "pnap:index/StorageNetworkVolumeVolumeTag:StorageNetworkVolumeVolumeTag": {
            "properties": {
                "tagAssignment": {
                    "$ref": "#/types/pnap:index/StorageNetworkVolumeVolumeTagTagAssignment:StorageNetworkVolumeVolumeTagTagAssignment",
                    "description": "Tag to set to the volume.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "tagAssignment"
                    ]
                }
            }
        },
        "pnap:index/StorageNetworkVolumeVolumeTagTagAssignment:StorageNetworkVolumeVolumeTagTagAssignment": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Who the tag was created by.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique id of the tag.\n"
                },
                "isBillingTag": {
                    "type": "boolean",
                    "description": "Whether or not to show the tag as part of billing and invoices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag assigned to the volume.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdBy",
                        "id",
                        "isBillingTag",
                        "name"
                    ]
                }
            }
        },
        "pnap:index/TagResourceAssignment:TagResourceAssignment": {
            "properties": {
                "resourceName": {
                    "type": "string",
                    "description": "The resource name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag assigned to the resource.\n* `created_by ` - The tag's creator.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "resourceName",
                        "value"
                    ]
                }
            }
        },
        "pnap:index/getEventsEvent:getEventsEvent": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Event name.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "The UTC time the event initiated.\n"
                },
                "userInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getEventsEventUserInfo:getEventsEventUserInfo"
                    },
                    "description": "Details related to the user / application.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "timestamp",
                "userInfos"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "name"
                    ]
                }
            }
        },
        "pnap:index/getEventsEventUserInfo:getEventsEventUserInfo": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The BMC account ID.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID of the application.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The logged in user or owner of the client application.\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "clientId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getInvoicesPaginatedInvoice:getInvoicesPaginatedInvoice": {
            "properties": {
                "limit": {
                    "type": "integer",
                    "description": "The limit of the number of results returned. The number of records returned may be smaller than the limit.\n"
                },
                "offset": {
                    "type": "integer",
                    "description": "The number of items to skip in the results.\n"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getInvoicesPaginatedInvoiceResult:getInvoicesPaginatedInvoiceResult"
                    },
                    "description": "The list of invoices.\n"
                },
                "total": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "limit",
                "offset",
                "results",
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getInvoicesPaginatedInvoiceResult:getInvoicesPaginatedInvoiceResult": {
            "properties": {
                "amount": {
                    "type": "number",
                    "description": "The invoice amount.\n"
                },
                "currency": {
                    "type": "string",
                    "description": "The currency of the invoice.\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "Date and time when the invoice payment is due.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique resource identifier of the invoice.\n"
                },
                "number": {
                    "type": "string",
                    "description": "A user-friendly reference number assigned to the invoice.\n"
                },
                "outstandingAmount": {
                    "type": "number",
                    "description": "The invoice outstanding amount.\n"
                },
                "sentOn": {
                    "type": "string",
                    "description": "Date and time when the invoice was sent.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`\n"
                }
            },
            "type": "object",
            "required": [
                "amount",
                "currency",
                "dueDate",
                "id",
                "number",
                "outstandingAmount",
                "sentOn",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getIpBlockTag:getIpBlockTag": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Who the tag was created by.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The IP Block identifier.\n"
                },
                "isBillingTag": {
                    "type": "boolean",
                    "description": "Whether or not to show the tag as part of billing and invoices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag assigned to the IP Block.\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "id",
                "isBillingTag",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getLocationsLocation:getLocationsLocation": {
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.\n"
                },
                "locationDescription": {
                    "type": "string",
                    "description": "Description of the location.\n"
                },
                "productCategories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getLocationsLocationProductCategory:getLocationsLocationProductCategory"
                    },
                    "description": "The list of product categories.\n"
                }
            },
            "type": "object",
            "required": [
                "location",
                "locationDescription",
                "productCategories"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getLocationsLocationProductCategory:getLocationsLocationProductCategory": {
            "properties": {
                "productCategory": {
                    "type": "string",
                    "description": "The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.\n"
                },
                "productCategoryDescription": {
                    "type": "string",
                    "description": "Description of the product category.\n"
                }
            },
            "type": "object",
            "required": [
                "productCategory",
                "productCategoryDescription"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getPrivateNetworkMembership:getPrivateNetworkMembership": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of public IPs associated to the resource.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The resource identifier.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The resource's type.\n"
                }
            },
            "type": "object",
            "required": [
                "ips",
                "resourceId",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getPrivateNetworkServer:getPrivateNetworkServer": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The private network identifier.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of public IPs associated to the resource.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ips"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getProductAvailabilityProductAvailability:getProductAvailabilityProductAvailability": {
            "properties": {
                "locationAvailabilityDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getProductAvailabilityProductAvailabilityLocationAvailabilityDetail:getProductAvailabilityProductAvailabilityLocationAvailabilityDetail"
                    },
                    "description": "Infos about location, solutions and availability for a product.\n"
                },
                "productCategory": {
                    "type": "string",
                    "description": "Product category. Currently only `SERVER` category is supported.\n"
                },
                "productCode": {
                    "type": "string",
                    "description": "The code identifying the product. This code has significance across all locations.\n"
                }
            },
            "type": "object",
            "required": [
                "locationAvailabilityDetails",
                "productCategory",
                "productCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getProductAvailabilityProductAvailabilityLocationAvailabilityDetail:getProductAvailabilityProductAvailabilityLocationAvailabilityDetail": {
            "properties": {
                "availableQuantity": {
                    "type": "integer",
                    "description": "Total available quantity of product in specific location. Max value is 10.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.\n"
                },
                "minQuantityAvailable": {
                    "type": "boolean",
                    "description": "Is product available in specific location for requested quantity.\n"
                },
                "minQuantityRequested": {
                    "type": "integer",
                    "description": "Requested quantity.\n"
                },
                "solutions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Solutions supported in specific location for a product.\n"
                }
            },
            "type": "object",
            "required": [
                "availableQuantity",
                "location",
                "minQuantityAvailable",
                "minQuantityRequested",
                "solutions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getProductsProduct:getProductsProduct": {
            "properties": {
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getProductsProductMetadata:getProductsProductMetadata"
                    },
                    "description": "Details of the server product.\n"
                },
                "plans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getProductsProductPlan:getProductsProductPlan"
                    },
                    "description": "The pricing plans available for this product.\n"
                },
                "productCategory": {
                    "type": "string",
                    "description": "The product category.\n"
                },
                "productCode": {
                    "type": "string",
                    "description": "The code identifying the product. This code has significance across all locations.\n"
                }
            },
            "type": "object",
            "required": [
                "metadatas",
                "plans",
                "productCategory",
                "productCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getProductsProductMetadata:getProductsProductMetadata": {
            "properties": {
                "coresPerCpu": {
                    "type": "integer",
                    "description": "The number of physical cores present on each CPU.\n"
                },
                "cpu": {
                    "type": "string",
                    "description": "CPU name.\n"
                },
                "cpuCount": {
                    "type": "integer",
                    "description": "Number of CPUs.\n"
                },
                "cpuFrequency": {
                    "type": "number",
                    "description": "CPU frequency in GHz.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Server network.\n"
                },
                "ramInGb": {
                    "type": "integer",
                    "description": "RAM in GB.\n"
                },
                "storage": {
                    "type": "string",
                    "description": "Server storage.\n"
                }
            },
            "type": "object",
            "required": [
                "coresPerCpu",
                "cpu",
                "cpuCount",
                "cpuFrequency",
                "network",
                "ramInGb",
                "storage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getProductsProductPlan:getProductsProductPlan": {
            "properties": {
                "correlatedProductCode": {
                    "type": "string",
                    "description": "Product code of the correlated product.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.\n"
                },
                "packageQuantity": {
                    "type": "integer",
                    "description": "Package size per month.\n"
                },
                "packageUnit": {
                    "type": "string",
                    "description": "Package size unit.\n"
                },
                "price": {
                    "type": "number",
                    "description": "Price per unit.\n"
                },
                "priceUnit": {
                    "type": "string",
                    "description": "The unit to which the price applies.\n"
                },
                "pricingModel": {
                    "type": "string",
                    "description": "The pricing model.\n"
                },
                "sku": {
                    "type": "string",
                    "description": "The SKU identifying the pricing plan.\n"
                },
                "skuDescription": {
                    "type": "string",
                    "description": "Description of the pricing plan.\n"
                }
            },
            "type": "object",
            "required": [
                "correlatedProductCode",
                "location",
                "packageQuantity",
                "packageUnit",
                "price",
                "priceUnit",
                "pricingModel",
                "sku",
                "skuDescription"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getPublicNetworkIpBlock:getPublicNetworkIpBlock": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The public network identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getPublicNetworkMembership:getPublicNetworkMembership": {
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of public IPs associated to the resource.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The resource identifier.\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "The resource's type.\n"
                }
            },
            "type": "object",
            "required": [
                "ips",
                "resourceId",
                "resourceType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getQuotaQuotaEditLimitRequestDetail:getQuotaQuotaEditLimitRequestDetail": {
            "properties": {
                "limit": {
                    "type": "integer",
                    "description": "The new limit that is requested.\n"
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for changing the limit.\n"
                },
                "requestedOn": {
                    "type": "string",
                    "description": "The point in time the request was submitted.\n"
                }
            },
            "type": "object",
            "required": [
                "limit",
                "reason",
                "requestedOn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getRancherClusterMetadata:getRancherClusterMetadata": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The Rancher Server URL.\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getRancherClusterNodePool:getRancherClusterNodePool": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Cluster name.\n"
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "Number of configured nodes.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getRancherClusterNodePoolNode:getRancherClusterNodePoolNode"
                    },
                    "description": "The nodes associated with this node pool.\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Node server type.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "nodeCount",
                "nodes",
                "serverType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getRancherClusterNodePoolNode:getRancherClusterNodePoolNode": {
            "properties": {
                "serverId": {
                    "type": "string",
                    "description": "The server identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "serverId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetrisController:getServerNetrisController": {
            "properties": {
                "hostOs": {
                    "type": "string",
                    "description": "Host OS on which the Netris Softgate is installed.\n"
                }
            },
            "type": "object",
            "required": [
                "hostOs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetrisSoftgate:getServerNetrisSoftgate": {
            "properties": {
                "hostOs": {
                    "type": "string",
                    "description": "Host OS on which the Netris Softgate is installed.\n"
                }
            },
            "type": "object",
            "required": [
                "hostOs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetworkConfiguration:getServerNetworkConfiguration": {
            "properties": {
                "gatewayAddress": {
                    "type": "string",
                    "description": "The address of the gateway assigned to the server.\n"
                },
                "ipBlocksConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getServerNetworkConfigurationIpBlocksConfiguration:getServerNetworkConfigurationIpBlocksConfiguration"
                    },
                    "description": "IP block details of bare metal server.\n"
                },
                "privateNetworkConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getServerNetworkConfigurationPrivateNetworkConfiguration:getServerNetworkConfigurationPrivateNetworkConfiguration"
                    },
                    "description": "Private network details of bare metal server.\n"
                },
                "publicNetworkConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getServerNetworkConfigurationPublicNetworkConfiguration:getServerNetworkConfigurationPublicNetworkConfiguration"
                    },
                    "description": "Public network details of bare metal server.\n"
                }
            },
            "type": "object",
            "required": [
                "gatewayAddress",
                "ipBlocksConfigurations",
                "privateNetworkConfigurations",
                "publicNetworkConfigurations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetworkConfigurationIpBlocksConfiguration:getServerNetworkConfigurationIpBlocksConfiguration": {
            "properties": {
                "configurationType": {
                    "type": "string",
                    "description": "Determines the approach for configuring IP blocks for the server being provisioned.\n"
                },
                "ipBlocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getServerNetworkConfigurationIpBlocksConfigurationIpBlock:getServerNetworkConfigurationIpBlocksConfigurationIpBlock"
                    },
                    "description": "The IP blocks assigned to this server.\n"
                }
            },
            "type": "object",
            "required": [
                "configurationType",
                "ipBlocks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetworkConfigurationIpBlocksConfigurationIpBlock:getServerNetworkConfigurationIpBlocksConfigurationIpBlock": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the server.\n"
                },
                "vlanId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "vlanId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetworkConfigurationPrivateNetworkConfiguration:getServerNetworkConfigurationPrivateNetworkConfiguration": {
            "properties": {
                "configurationType": {
                    "type": "string",
                    "description": "Determines the approach for configuring IP blocks for the server being provisioned.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork:getServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork"
                    },
                    "description": "The list of private networks this server is member of.\n"
                }
            },
            "type": "object",
            "required": [
                "configurationType",
                "privateNetworks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork:getServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork": {
            "properties": {
                "dhcp": {
                    "type": "boolean",
                    "description": "Determines whether DHCP is enabled for this server.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the server.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPs configured on the server.\n"
                },
                "statusDescription": {
                    "type": "string",
                    "description": "The status of the assignment to the network.\n"
                }
            },
            "type": "object",
            "required": [
                "dhcp",
                "id",
                "ips",
                "statusDescription"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetworkConfigurationPublicNetworkConfiguration:getServerNetworkConfigurationPublicNetworkConfiguration": {
            "properties": {
                "publicNetworks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork:getServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork"
                    },
                    "description": "The list of public networks this server is member of.\n"
                }
            },
            "type": "object",
            "required": [
                "publicNetworks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork:getServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the server.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPs configured on the server.\n"
                },
                "statusDescription": {
                    "type": "string",
                    "description": "The status of the assignment to the network.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ips",
                "statusDescription"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerStorageConfiguration:getServerStorageConfiguration": {
            "properties": {
                "rootPartitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getServerStorageConfigurationRootPartition:getServerStorageConfigurationRootPartition"
                    },
                    "description": "Root partition configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "rootPartitions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerStorageConfigurationRootPartition:getServerStorageConfigurationRootPartition": {
            "properties": {
                "raid": {
                    "type": "string",
                    "description": "Software RAID configuration.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the root partition in GB.\n"
                }
            },
            "type": "object",
            "required": [
                "raid",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getServerTag:getServerTag": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Who the tag was created by.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the server.\n"
                },
                "isBillingTag": {
                    "type": "boolean",
                    "description": "Whether or not to show the tag as part of billing and invoices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag assigned to the server.\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "id",
                "isBillingTag",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getStorageNetworkVolume:getStorageNetworkVolume": {
            "properties": {
                "capacityInGb": {
                    "type": "integer",
                    "description": "Maximum capacity in GB.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when this volume was created.\n"
                },
                "deleteRequestedOn": {
                    "type": "string",
                    "description": "Date and time of the initial request for volume deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Volume description.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The storage network identifier.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of this storage network.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Volume's full path. It is in form of `/{volumeId}/pathSuffix`.\n"
                },
                "pathSuffix": {
                    "type": "string",
                    "description": "Last part of volume's path.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getStorageNetworkVolumePermission:getStorageNetworkVolumePermission"
                    },
                    "description": "Permissions for the volume.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "File system protocol.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Volume's status.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getStorageNetworkVolumeTag:getStorageNetworkVolumeTag"
                    },
                    "description": "The tags assigned to the volume.\n"
                },
                "usedCapacityInGb": {
                    "type": "integer",
                    "description": "Used capacity in GB, updated periodically.\n"
                }
            },
            "type": "object",
            "required": [
                "capacityInGb",
                "createdOn",
                "deleteRequestedOn",
                "description",
                "id",
                "name",
                "path",
                "pathSuffix",
                "permissions",
                "protocol",
                "status",
                "tags",
                "usedCapacityInGb"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getStorageNetworkVolumePermission:getStorageNetworkVolumePermission": {
            "properties": {
                "nfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/getStorageNetworkVolumePermissionNf:getStorageNetworkVolumePermissionNf"
                    },
                    "description": "NFS specific permissions on the volume.\n"
                }
            },
            "type": "object",
            "required": [
                "nfs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getStorageNetworkVolumePermissionNf:getStorageNetworkVolumePermissionNf": {
            "properties": {
                "allSquashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All squash permission.\n"
                },
                "noSquashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "No squash permission.\n"
                },
                "readOnlies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Read only access.\n"
                },
                "readWrites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Read/Write access.\n"
                },
                "rootSquashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Root squash permission.\n"
                }
            },
            "type": "object",
            "required": [
                "allSquashes",
                "noSquashes",
                "readOnlies",
                "readWrites",
                "rootSquashes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getStorageNetworkVolumeTag:getStorageNetworkVolumeTag": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "Who the tag was created by.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The storage network identifier.\n"
                },
                "isBillingTag": {
                    "type": "boolean",
                    "description": "Whether or not to show the tag as part of billing and invoices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of this storage network.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag assigned to the volume.\n"
                }
            },
            "type": "object",
            "required": [
                "createdBy",
                "id",
                "isBillingTag",
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "pnap:index/getTagResourceAssignment:getTagResourceAssignment": {
            "properties": {
                "resourceName": {
                    "type": "string",
                    "description": "The resource name.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the tag assigned to the resource.\n* `created_by ` - The tag's creator.\n"
                }
            },
            "type": "object",
            "required": [
                "resourceName",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the pnap package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "clientId": {
                "type": "string"
            },
            "clientSecret": {
                "type": "string",
                "secret": true
            },
            "configFilePath": {
                "type": "string"
            }
        },
        "inputProperties": {
            "clientId": {
                "type": "string"
            },
            "clientSecret": {
                "type": "string",
                "secret": true
            },
            "configFilePath": {
                "type": "string"
            }
        }
    },
    "resources": {
        "pnap:index/ipBlock:IpBlock": {
            "description": "Provides a phoenixNAP IP Block resource. This can be used to create, modify and delete IP Blocks.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate an IP Block \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\n// Create an IP Block\nconst ip_block_1 = new pnap.IpBlock(\"ip-block-1\", {\n    cidrBlockSize: \"/28\",\n    description: \"IP Block #1 used for publicly accessing server #1.\",\n    location: \"PHX\",\n    tags: [\n        {\n            tagAssignment: {\n                name: \"tag-1\",\n                value: \"PROD\",\n            },\n        },\n        {\n            tagAssignment: {\n                name: \"tag-2\",\n            },\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\n# Create an IP Block\nip_block_1 = pnap.IpBlock(\"ip-block-1\",\n    cidr_block_size=\"/28\",\n    description=\"IP Block #1 used for publicly accessing server #1.\",\n    location=\"PHX\",\n    tags=[\n        pnap.IpBlockTagArgs(\n            tag_assignment=pnap.IpBlockTagTagAssignmentArgs(\n                name=\"tag-1\",\n                value=\"PROD\",\n            ),\n        ),\n        pnap.IpBlockTagArgs(\n            tag_assignment=pnap.IpBlockTagTagAssignmentArgs(\n                name=\"tag-2\",\n            ),\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create an IP Block\n    var ip_block_1 = new Pnap.IpBlock(\"ip-block-1\", new()\n    {\n        CidrBlockSize = \"/28\",\n        Description = \"IP Block #1 used for publicly accessing server #1.\",\n        Location = \"PHX\",\n        Tags = new[]\n        {\n            new Pnap.Inputs.IpBlockTagArgs\n            {\n                TagAssignment = new Pnap.Inputs.IpBlockTagTagAssignmentArgs\n                {\n                    Name = \"tag-1\",\n                    Value = \"PROD\",\n                },\n            },\n            new Pnap.Inputs.IpBlockTagArgs\n            {\n                TagAssignment = new Pnap.Inputs.IpBlockTagTagAssignmentArgs\n                {\n                    Name = \"tag-2\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pnap.NewIpBlock(ctx, \"ip-block-1\", \u0026pnap.IpBlockArgs{\n\t\t\tCidrBlockSize: pulumi.String(\"/28\"),\n\t\t\tDescription:   pulumi.String(\"IP Block #1 used for publicly accessing server #1.\"),\n\t\t\tLocation:      pulumi.String(\"PHX\"),\n\t\t\tTags: pnap.IpBlockTagArray{\n\t\t\t\t\u0026pnap.IpBlockTagArgs{\n\t\t\t\t\tTagAssignment: \u0026pnap.IpBlockTagTagAssignmentArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"tag-1\"),\n\t\t\t\t\t\tValue: pulumi.String(\"PROD\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026pnap.IpBlockTagArgs{\n\t\t\t\t\tTagAssignment: \u0026pnap.IpBlockTagTagAssignmentArgs{\n\t\t\t\t\t\tName: pulumi.String(\"tag-2\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.IpBlock;\nimport com.pulumi.pnap.IpBlockArgs;\nimport com.pulumi.pnap.inputs.IpBlockTagArgs;\nimport com.pulumi.pnap.inputs.IpBlockTagTagAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var ip_block_1 = new IpBlock(\"ip-block-1\", IpBlockArgs.builder()        \n            .cidrBlockSize(\"/28\")\n            .description(\"IP Block #1 used for publicly accessing server #1.\")\n            .location(\"PHX\")\n            .tags(            \n                IpBlockTagArgs.builder()\n                    .tagAssignment(IpBlockTagTagAssignmentArgs.builder()\n                        .name(\"tag-1\")\n                        .value(\"PROD\")\n                        .build())\n                    .build(),\n                IpBlockTagArgs.builder()\n                    .tagAssignment(IpBlockTagTagAssignmentArgs.builder()\n                        .name(\"tag-2\")\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create an IP Block\n  ip-block-1:\n    type: pnap:IpBlock\n    properties:\n      cidrBlockSize: /28\n      description: 'IP Block #1 used for publicly accessing server #1.'\n      location: PHX\n      tags:\n        - tagAssignment:\n            name: tag-1\n            value: PROD\n        - tagAssignment:\n            name: tag-2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "assignedResourceId": {
                    "type": "string",
                    "description": "ID of the resource assigned to the IP Block.\n* `assigned_resource_type `- Type of the resource assigned to the IP Block.\n"
                },
                "assignedResourceType": {
                    "type": "string"
                },
                "cidr": {
                    "type": "string",
                    "description": "The IP Block in CIDR notation.\n"
                },
                "cidrBlockSize": {
                    "type": "string",
                    "description": "CIDR IP Block Size. Currently this field should be set to either `/31`, `/30`, `/29` or `/28`. For a larger Block Size contact support.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the IP Block was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IP Block.\n"
                },
                "isBringYourOwn": {
                    "type": "boolean",
                    "description": "True if the IP Block is a \"bring your own\" block.\n"
                },
                "location": {
                    "type": "string",
                    "description": "IP Block location ID. Currently this field should be set to `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` or `AUS`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the IP Block.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/IpBlockTag:IpBlockTag"
                    },
                    "description": "Tags to set to IP Block, if any.\n"
                }
            },
            "required": [
                "assignedResourceId",
                "assignedResourceType",
                "cidr",
                "cidrBlockSize",
                "createdOn",
                "isBringYourOwn",
                "location",
                "status"
            ],
            "inputProperties": {
                "cidrBlockSize": {
                    "type": "string",
                    "description": "CIDR IP Block Size. Currently this field should be set to either `/31`, `/30`, `/29` or `/28`. For a larger Block Size contact support.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IP Block.\n"
                },
                "location": {
                    "type": "string",
                    "description": "IP Block location ID. Currently this field should be set to `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` or `AUS`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/IpBlockTag:IpBlockTag"
                    },
                    "description": "Tags to set to IP Block, if any.\n"
                }
            },
            "requiredInputs": [
                "cidrBlockSize",
                "location"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpBlock resources.\n",
                "properties": {
                    "assignedResourceId": {
                        "type": "string",
                        "description": "ID of the resource assigned to the IP Block.\n* `assigned_resource_type `- Type of the resource assigned to the IP Block.\n"
                    },
                    "assignedResourceType": {
                        "type": "string"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The IP Block in CIDR notation.\n"
                    },
                    "cidrBlockSize": {
                        "type": "string",
                        "description": "CIDR IP Block Size. Currently this field should be set to either `/31`, `/30`, `/29` or `/28`. For a larger Block Size contact support.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the IP Block was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IP Block.\n"
                    },
                    "isBringYourOwn": {
                        "type": "boolean",
                        "description": "True if the IP Block is a \"bring your own\" block.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "IP Block location ID. Currently this field should be set to `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` or `AUS`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the IP Block.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/IpBlockTag:IpBlockTag"
                        },
                        "description": "Tags to set to IP Block, if any.\n"
                    }
                },
                "type": "object"
            }
        },
        "pnap:index/privateNetwork:PrivateNetwork": {
            "description": "Provides a phoenixNAP Private Network resource. This can be used to create,\nmodify, and delete private networks.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\n// Create a private network\nconst test_Network_33 = new pnap.PrivateNetwork(\"test-Network-33\", {\n    cidr: \"10.0.0.0/24\",\n    location: \"PHX\",\n});\nconst test_Network_44 = new pnap.PrivateNetwork(\"test-Network-44\", {\n    cidr: \"172.16.0.0/24\",\n    location: \"PHX\",\n});\n// Create a server\nconst test_Server_1 = new pnap.Server(\"test-Server-1\", {\n    hostname: \"Test-Server-1\",\n    os: \"ubuntu/bionic\",\n    type: \"s1.c1.medium\",\n    location: \"PHX\",\n    installDefaultSshKeys: true,\n    networkConfiguration: {\n        privateNetworkConfiguration: {\n            configurationType: \"USER_DEFINED\",\n            privateNetworks: [\n                {\n                    serverPrivateNetwork: {\n                        id: test_Network_33.id,\n                        ips: [\"10.0.0.12\"],\n                    },\n                },\n                {\n                    serverPrivateNetwork: {\n                        id: test_Network_44.id,\n                        ips: [\"172.16.0.12\"],\n                    },\n                },\n            ],\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\n# Create a private network\ntest__network_33 = pnap.PrivateNetwork(\"test-Network-33\",\n    cidr=\"10.0.0.0/24\",\n    location=\"PHX\")\ntest__network_44 = pnap.PrivateNetwork(\"test-Network-44\",\n    cidr=\"172.16.0.0/24\",\n    location=\"PHX\")\n# Create a server\ntest__server_1 = pnap.Server(\"test-Server-1\",\n    hostname=\"Test-Server-1\",\n    os=\"ubuntu/bionic\",\n    type=\"s1.c1.medium\",\n    location=\"PHX\",\n    install_default_ssh_keys=True,\n    network_configuration=pnap.ServerNetworkConfigurationArgs(\n        private_network_configuration=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs(\n            configuration_type=\"USER_DEFINED\",\n            private_networks=[\n                pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(\n                    server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(\n                        id=test__network_33.id,\n                        ips=[\"10.0.0.12\"],\n                    ),\n                ),\n                pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(\n                    server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(\n                        id=test__network_44.id,\n                        ips=[\"172.16.0.12\"],\n                    ),\n                ),\n            ],\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a private network\n    var test_Network_33 = new Pnap.PrivateNetwork(\"test-Network-33\", new()\n    {\n        Cidr = \"10.0.0.0/24\",\n        Location = \"PHX\",\n    });\n\n    var test_Network_44 = new Pnap.PrivateNetwork(\"test-Network-44\", new()\n    {\n        Cidr = \"172.16.0.0/24\",\n        Location = \"PHX\",\n    });\n\n    // Create a server\n    var test_Server_1 = new Pnap.Server(\"test-Server-1\", new()\n    {\n        Hostname = \"Test-Server-1\",\n        Os = \"ubuntu/bionic\",\n        Type = \"s1.c1.medium\",\n        Location = \"PHX\",\n        InstallDefaultSshKeys = true,\n        NetworkConfiguration = new Pnap.Inputs.ServerNetworkConfigurationArgs\n        {\n            PrivateNetworkConfiguration = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationArgs\n            {\n                ConfigurationType = \"USER_DEFINED\",\n                PrivateNetworks = new[]\n                {\n                    new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs\n                    {\n                        ServerPrivateNetwork = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs\n                        {\n                            Id = test_Network_33.Id,\n                            Ips = new[]\n                            {\n                                \"10.0.0.12\",\n                            },\n                        },\n                    },\n                    new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs\n                    {\n                        ServerPrivateNetwork = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs\n                        {\n                            Id = test_Network_44.Id,\n                            Ips = new[]\n                            {\n                                \"172.16.0.12\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pnap.NewPrivateNetwork(ctx, \"test-Network-33\", \u0026pnap.PrivateNetworkArgs{\n\t\t\tCidr:     pulumi.String(\"10.0.0.0/24\"),\n\t\t\tLocation: pulumi.String(\"PHX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pnap.NewPrivateNetwork(ctx, \"test-Network-44\", \u0026pnap.PrivateNetworkArgs{\n\t\t\tCidr:     pulumi.String(\"172.16.0.0/24\"),\n\t\t\tLocation: pulumi.String(\"PHX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = pnap.NewServer(ctx, \"test-Server-1\", \u0026pnap.ServerArgs{\n\t\t\tHostname:              pulumi.String(\"Test-Server-1\"),\n\t\t\tOs:                    pulumi.String(\"ubuntu/bionic\"),\n\t\t\tType:                  pulumi.String(\"s1.c1.medium\"),\n\t\t\tLocation:              pulumi.String(\"PHX\"),\n\t\t\tInstallDefaultSshKeys: pulumi.Bool(true),\n\t\t\tNetworkConfiguration: \u0026pnap.ServerNetworkConfigurationArgs{\n\t\t\t\tPrivateNetworkConfiguration: \u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs{\n\t\t\t\t\tConfigurationType: pulumi.String(\"USER_DEFINED\"),\n\t\t\t\t\tPrivateNetworks: pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArray{\n\t\t\t\t\t\t\u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs{\n\t\t\t\t\t\t\tServerPrivateNetwork: \u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs{\n\t\t\t\t\t\t\t\tId: test_Network_33.ID(),\n\t\t\t\t\t\t\t\tIps: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"10.0.0.12\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs{\n\t\t\t\t\t\t\tServerPrivateNetwork: \u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs{\n\t\t\t\t\t\t\t\tId: test_Network_44.ID(),\n\t\t\t\t\t\t\t\tIps: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"172.16.0.12\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PrivateNetwork;\nimport com.pulumi.pnap.PrivateNetworkArgs;\nimport com.pulumi.pnap.Server;\nimport com.pulumi.pnap.ServerArgs;\nimport com.pulumi.pnap.inputs.ServerNetworkConfigurationArgs;\nimport com.pulumi.pnap.inputs.ServerNetworkConfigurationPrivateNetworkConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_Network_33 = new PrivateNetwork(\"test-Network-33\", PrivateNetworkArgs.builder()        \n            .cidr(\"10.0.0.0/24\")\n            .location(\"PHX\")\n            .build());\n\n        var test_Network_44 = new PrivateNetwork(\"test-Network-44\", PrivateNetworkArgs.builder()        \n            .cidr(\"172.16.0.0/24\")\n            .location(\"PHX\")\n            .build());\n\n        var test_Server_1 = new Server(\"test-Server-1\", ServerArgs.builder()        \n            .hostname(\"Test-Server-1\")\n            .os(\"ubuntu/bionic\")\n            .type(\"s1.c1.medium\")\n            .location(\"PHX\")\n            .installDefaultSshKeys(true)\n            .networkConfiguration(ServerNetworkConfigurationArgs.builder()\n                .privateNetworkConfiguration(ServerNetworkConfigurationPrivateNetworkConfigurationArgs.builder()\n                    .configurationType(\"USER_DEFINED\")\n                    .privateNetworks(                    \n                        ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs.builder()\n                            .serverPrivateNetwork(ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs.builder()\n                                .id(test_Network_33.id())\n                                .ips(\"10.0.0.12\")\n                                .build())\n                            .build(),\n                        ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs.builder()\n                            .serverPrivateNetwork(ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs.builder()\n                                .id(test_Network_44.id())\n                                .ips(\"172.16.0.12\")\n                                .build())\n                            .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a private network\n  test-Network-33:\n    type: pnap:PrivateNetwork\n    properties:\n      cidr: 10.0.0.0/24\n      location: PHX\n  test-Network-44:\n    type: pnap:PrivateNetwork\n    properties:\n      cidr: 172.16.0.0/24\n      location: PHX\n  # Create a server\n  test-Server-1:\n    type: pnap:Server\n    properties:\n      hostname: Test-Server-1\n      os: ubuntu/bionic\n      type: s1.c1.medium\n      location: PHX\n      installDefaultSshKeys: true\n      networkConfiguration:\n        privateNetworkConfiguration:\n          configurationType: USER_DEFINED\n          privateNetworks:\n            - serverPrivateNetwork:\n                id: ${[\"test-Network-33\"].id}\n                ips:\n                  - 10.0.0.12\n            - serverPrivateNetwork:\n                id: ${[\"test-Network-44\"].id}\n                ips:\n                  - 172.16.0.12\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when this private network was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of this private network.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.\n"
                },
                "locationDefault": {
                    "type": "boolean",
                    "description": "Identifies network as the default private network for the specified location. Default value is `false`.\n* `vlan_id `- The VLAN that will be assigned to this network.\n"
                },
                "memberships": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/PrivateNetworkMembership:PrivateNetworkMembership"
                    },
                    "description": "A list of resources that are members of this private network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of this private network. This name should be unique.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/PrivateNetworkServer:PrivateNetworkServer"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the private network.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the private network.\n* `servers ` - (Deprecated) List of server details linked to the private network.\n"
                },
                "vlanId": {
                    "type": "integer"
                }
            },
            "required": [
                "cidr",
                "createdOn",
                "location",
                "locationDefault",
                "memberships",
                "name",
                "servers",
                "status",
                "type",
                "vlanId"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "string",
                    "description": "IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of this private network.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.\n"
                },
                "locationDefault": {
                    "type": "boolean",
                    "description": "Identifies network as the default private network for the specified location. Default value is `false`.\n* `vlan_id `- The VLAN that will be assigned to this network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of this private network. This name should be unique.\n"
                },
                "vlanId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "location"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateNetwork resources.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "IP range associated with this private network in CIDR notation. Setting the `force` query parameter to `true` allows you to skip assigning a specific IP range to network.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when this private network was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of this private network.\n"
                    },
                    "force": {
                        "type": "boolean",
                        "description": "Query parameter controlling advanced features availability. It is advised to use with caution since it might lead to unhealthy setups.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of this private network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.\n"
                    },
                    "locationDefault": {
                        "type": "boolean",
                        "description": "Identifies network as the default private network for the specified location. Default value is `false`.\n* `vlan_id `- The VLAN that will be assigned to this network.\n"
                    },
                    "memberships": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/PrivateNetworkMembership:PrivateNetworkMembership"
                        },
                        "description": "A list of resources that are members of this private network.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of this private network. This name should be unique.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/PrivateNetworkServer:PrivateNetworkServer"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the private network.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the private network.\n* `servers ` - (Deprecated) List of server details linked to the private network.\n"
                    },
                    "vlanId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "pnap:index/publicNetwork:PublicNetwork": {
            "description": "Provides a phoenixNAP Public Network resource. This can be used to create,\nmodify, and delete public networks.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\n// Create a public network\nconst public_Network_1 = new pnap.PublicNetwork(\"public-Network-1\", {\n    description: \"First public network.\",\n    ipBlocks: [\n        {\n            publicNetworkIpBlock: {\n                id: \"60473a6115e34466c9f8f083\",\n            },\n        },\n        {\n            publicNetworkIpBlock: {\n                id: \"616e6ec6d66b406a45ab8797\",\n            },\n        },\n    ],\n    location: \"PHX\",\n});\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\n# Create a public network\npublic__network_1 = pnap.PublicNetwork(\"public-Network-1\",\n    description=\"First public network.\",\n    ip_blocks=[\n        pnap.PublicNetworkIpBlockArgs(\n            public_network_ip_block=pnap.PublicNetworkIpBlockPublicNetworkIpBlockArgs(\n                id=\"60473a6115e34466c9f8f083\",\n            ),\n        ),\n        pnap.PublicNetworkIpBlockArgs(\n            public_network_ip_block=pnap.PublicNetworkIpBlockPublicNetworkIpBlockArgs(\n                id=\"616e6ec6d66b406a45ab8797\",\n            ),\n        ),\n    ],\n    location=\"PHX\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a public network\n    var public_Network_1 = new Pnap.PublicNetwork(\"public-Network-1\", new()\n    {\n        Description = \"First public network.\",\n        IpBlocks = new[]\n        {\n            new Pnap.Inputs.PublicNetworkIpBlockArgs\n            {\n                AssignedIpBlock = new Pnap.Inputs.PublicNetworkIpBlockPublicNetworkIpBlockArgs\n                {\n                    Id = \"60473a6115e34466c9f8f083\",\n                },\n            },\n            new Pnap.Inputs.PublicNetworkIpBlockArgs\n            {\n                AssignedIpBlock = new Pnap.Inputs.PublicNetworkIpBlockPublicNetworkIpBlockArgs\n                {\n                    Id = \"616e6ec6d66b406a45ab8797\",\n                },\n            },\n        },\n        Location = \"PHX\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pnap.NewPublicNetwork(ctx, \"public-Network-1\", \u0026pnap.PublicNetworkArgs{\n\t\t\tDescription: pulumi.String(\"First public network.\"),\n\t\t\tIpBlocks: pnap.PublicNetworkIpBlockArray{\n\t\t\t\t\u0026pnap.PublicNetworkIpBlockArgs{\n\t\t\t\t\tPublicNetworkIpBlock: \u0026pnap.PublicNetworkIpBlockPublicNetworkIpBlockArgs{\n\t\t\t\t\t\tId: pulumi.String(\"60473a6115e34466c9f8f083\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026pnap.PublicNetworkIpBlockArgs{\n\t\t\t\t\tPublicNetworkIpBlock: \u0026pnap.PublicNetworkIpBlockPublicNetworkIpBlockArgs{\n\t\t\t\t\t\tId: pulumi.String(\"616e6ec6d66b406a45ab8797\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tLocation: pulumi.String(\"PHX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PublicNetwork;\nimport com.pulumi.pnap.PublicNetworkArgs;\nimport com.pulumi.pnap.inputs.PublicNetworkIpBlockArgs;\nimport com.pulumi.pnap.inputs.PublicNetworkIpBlockPublicNetworkIpBlockArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var public_Network_1 = new PublicNetwork(\"public-Network-1\", PublicNetworkArgs.builder()        \n            .description(\"First public network.\")\n            .ipBlocks(            \n                PublicNetworkIpBlockArgs.builder()\n                    .publicNetworkIpBlock(PublicNetworkIpBlockPublicNetworkIpBlockArgs.builder()\n                        .id(\"60473a6115e34466c9f8f083\")\n                        .build())\n                    .build(),\n                PublicNetworkIpBlockArgs.builder()\n                    .publicNetworkIpBlock(PublicNetworkIpBlockPublicNetworkIpBlockArgs.builder()\n                        .id(\"616e6ec6d66b406a45ab8797\")\n                        .build())\n                    .build())\n            .location(\"PHX\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a public network\n  public-Network-1:\n    type: pnap:PublicNetwork\n    properties:\n      description: First public network.\n      ipBlocks:\n        - publicNetworkIpBlock:\n            id: 60473a6115e34466c9f8f083\n        - publicNetworkIpBlock:\n            id: 616e6ec6d66b406a45ab8797\n      location: PHX\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when this public network was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of this public network.\n"
                },
                "ipBlocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/PublicNetworkIpBlock:PublicNetworkIpBlock"
                    },
                    "description": "A list of IP Blocks that will be associated with this public network (10 items at most).\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.\n* `vlan_id `- The VLAN that will be assigned to this network.\n"
                },
                "memberships": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/PublicNetworkMembership:PublicNetworkMembership"
                    },
                    "description": "A list of resources that are members of this public network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of this public network. This name should be unique.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the public network.\n"
                },
                "vlanId": {
                    "type": "integer"
                }
            },
            "required": [
                "createdOn",
                "ipBlocks",
                "location",
                "memberships",
                "name",
                "status",
                "vlanId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of this public network.\n"
                },
                "ipBlocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/PublicNetworkIpBlock:PublicNetworkIpBlock"
                    },
                    "description": "A list of IP Blocks that will be associated with this public network (10 items at most).\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.\n* `vlan_id `- The VLAN that will be assigned to this network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The friendly name of this public network. This name should be unique.\n"
                },
                "vlanId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "location"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PublicNetwork resources.\n",
                "properties": {
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when this public network was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of this public network.\n"
                    },
                    "ipBlocks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/PublicNetworkIpBlock:PublicNetworkIpBlock"
                        },
                        "description": "A list of IP Blocks that will be associated with this public network (10 items at most).\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of this public network. Supported values are `PHX`, `ASH`, `SGP`, `NLD`, `CHI`, `SEA` and `AUS`.\n* `vlan_id `- The VLAN that will be assigned to this network.\n"
                    },
                    "memberships": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/PublicNetworkMembership:PublicNetworkMembership"
                        },
                        "description": "A list of resources that are members of this public network.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of this public network. This name should be unique.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the public network.\n"
                    },
                    "vlanId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "pnap:index/rancherCluster:RancherCluster": {
            "description": "Provides a phoenixNAP Rancher Cluster resource. This can be used to create and delete Rancher Server deployments.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a Rancher Cluster\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\n// Create a Rancher Cluster\nconst rancher_Deployment_1 = new pnap.RancherCluster(\"rancher-Deployment-1\", {\n    description: \"A Rancher Server deployment with specific server type.\",\n    location: \"PHX\",\n    nodePools: {\n        nodeCount: 1,\n        serverType: \"s1.c1.medium\",\n        sshConfig: {\n            installDefaultKeys: false,\n            keys: [\n                \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne\",\n                \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo\",\n            ],\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\n# Create a Rancher Cluster\nrancher__deployment_1 = pnap.RancherCluster(\"rancher-Deployment-1\",\n    description=\"A Rancher Server deployment with specific server type.\",\n    location=\"PHX\",\n    node_pools=pnap.RancherClusterNodePoolsArgs(\n        node_count=1,\n        server_type=\"s1.c1.medium\",\n        ssh_config=pnap.RancherClusterNodePoolsSshConfigArgs(\n            install_default_keys=False,\n            keys=[\n                \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne\",\n                \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo\",\n            ],\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Rancher Cluster\n    var rancher_Deployment_1 = new Pnap.RancherCluster(\"rancher-Deployment-1\", new()\n    {\n        Description = \"A Rancher Server deployment with specific server type.\",\n        Location = \"PHX\",\n        NodePools = new Pnap.Inputs.RancherClusterNodePoolsArgs\n        {\n            NodeCount = 1,\n            ServerType = \"s1.c1.medium\",\n            SshConfig = new Pnap.Inputs.RancherClusterNodePoolsSshConfigArgs\n            {\n                InstallDefaultKeys = false,\n                Keys = new[]\n                {\n                    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne\",\n                    \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pnap.NewRancherCluster(ctx, \"rancher-Deployment-1\", \u0026pnap.RancherClusterArgs{\n\t\t\tDescription: pulumi.String(\"A Rancher Server deployment with specific server type.\"),\n\t\t\tLocation:    pulumi.String(\"PHX\"),\n\t\t\tNodePools: \u0026pnap.RancherClusterNodePoolsArgs{\n\t\t\t\tNodeCount:  pulumi.Int(1),\n\t\t\t\tServerType: pulumi.String(\"s1.c1.medium\"),\n\t\t\t\tSshConfig: \u0026pnap.RancherClusterNodePoolsSshConfigArgs{\n\t\t\t\t\tInstallDefaultKeys: pulumi.Bool(false),\n\t\t\t\t\tKeys: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne\"),\n\t\t\t\t\t\tpulumi.String(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.RancherCluster;\nimport com.pulumi.pnap.RancherClusterArgs;\nimport com.pulumi.pnap.inputs.RancherClusterNodePoolsArgs;\nimport com.pulumi.pnap.inputs.RancherClusterNodePoolsSshConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var rancher_Deployment_1 = new RancherCluster(\"rancher-Deployment-1\", RancherClusterArgs.builder()        \n            .description(\"A Rancher Server deployment with specific server type.\")\n            .location(\"PHX\")\n            .nodePools(RancherClusterNodePoolsArgs.builder()\n                .nodeCount(1)\n                .serverType(\"s1.c1.medium\")\n                .sshConfig(RancherClusterNodePoolsSshConfigArgs.builder()\n                    .installDefaultKeys(false)\n                    .keys(                    \n                        \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne\",\n                        \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Rancher Cluster\n  rancher-Deployment-1:\n    type: pnap:RancherCluster\n    properties:\n      description: A Rancher Server deployment with specific server type.\n      location: PHX\n      nodePools:\n        nodeCount: 1\n        serverType: s1.c1.medium\n        sshConfig:\n          installDefaultKeys: false\n          keys:\n            - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userOne\n            - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 userTwo\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuration": {
                    "$ref": "#/types/pnap:index/RancherClusterConfiguration:RancherClusterConfiguration",
                    "description": "Rancher configuration parameters. The `configuration` block has 7 fields.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster description.\n"
                },
                "initialClusterVersion": {
                    "type": "string",
                    "description": "The Rancher version that was installed on the cluster during the first creation process.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/RancherClusterMetadata:RancherClusterMetadata"
                    },
                    "description": "Connection parameters to use to connect to the Rancher Server Administrative GUI.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload cluster. This field is autogenerated if not provided.\n"
                },
                "nodePools": {
                    "$ref": "#/types/pnap:index/RancherClusterNodePools:RancherClusterNodePools",
                    "description": "The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.\n"
                },
                "statusDescription": {
                    "type": "string",
                    "description": "The cluster status.\n"
                },
                "workloadConfiguration": {
                    "$ref": "#/types/pnap:index/RancherClusterWorkloadConfiguration:RancherClusterWorkloadConfiguration",
                    "description": "Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.\n"
                }
            },
            "required": [
                "initialClusterVersion",
                "location",
                "metadatas",
                "name",
                "nodePools",
                "statusDescription"
            ],
            "inputProperties": {
                "configuration": {
                    "$ref": "#/types/pnap:index/RancherClusterConfiguration:RancherClusterConfiguration",
                    "description": "Rancher configuration parameters. The `configuration` block has 7 fields.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster description.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload cluster. This field is autogenerated if not provided.\n"
                },
                "nodePools": {
                    "$ref": "#/types/pnap:index/RancherClusterNodePools:RancherClusterNodePools",
                    "description": "The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.\n"
                },
                "workloadConfiguration": {
                    "$ref": "#/types/pnap:index/RancherClusterWorkloadConfiguration:RancherClusterWorkloadConfiguration",
                    "description": "Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.\n"
                }
            },
            "requiredInputs": [
                "location"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RancherCluster resources.\n",
                "properties": {
                    "configuration": {
                        "$ref": "#/types/pnap:index/RancherClusterConfiguration:RancherClusterConfiguration",
                        "description": "Rancher configuration parameters. The `configuration` block has 7 fields.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Cluster description.\n"
                    },
                    "initialClusterVersion": {
                        "type": "string",
                        "description": "The Rancher version that was installed on the cluster during the first creation process.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Workload cluster location. Cannot be changed once the cluster is created. For a full list of allowed locations visit [API docs](https://developers.phoenixnap.com/docs/rancher/1)\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/RancherClusterMetadata:RancherClusterMetadata"
                        },
                        "description": "Connection parameters to use to connect to the Rancher Server Administrative GUI.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workload cluster. This field is autogenerated if not provided.\n"
                    },
                    "nodePools": {
                        "$ref": "#/types/pnap:index/RancherClusterNodePools:RancherClusterNodePools",
                        "description": "The node pools associated with the cluster (must contain exactly one item). The `node_pools` block has 4 fields.\n"
                    },
                    "statusDescription": {
                        "type": "string",
                        "description": "The cluster status.\n"
                    },
                    "workloadConfiguration": {
                        "$ref": "#/types/pnap:index/RancherClusterWorkloadConfiguration:RancherClusterWorkloadConfiguration",
                        "description": "Workload cluster configuration parameters. The `workload_configuration` block has 4 fields.\n"
                    }
                },
                "type": "object"
            }
        },
        "pnap:index/reservation:Reservation": {
            "description": "Provides a phoenixNAP reservation resource. This can be used to create and modify reservations.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a reservation \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\n// Create a reservation\nconst test_Reservation_1 = new pnap.Reservation(\"test-Reservation-1\", {sku: \"XXX-XXX-XXX\"});\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\n# Create a reservation\ntest__reservation_1 = pnap.Reservation(\"test-Reservation-1\", sku=\"XXX-XXX-XXX\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a reservation\n    var test_Reservation_1 = new Pnap.Reservation(\"test-Reservation-1\", new()\n    {\n        Sku = \"XXX-XXX-XXX\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pnap.NewReservation(ctx, \"test-Reservation-1\", \u0026pnap.ReservationArgs{\n\t\t\tSku: pulumi.String(\"XXX-XXX-XXX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.Reservation;\nimport com.pulumi.pnap.ReservationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_Reservation_1 = new Reservation(\"test-Reservation-1\", ReservationArgs.builder()        \n            .sku(\"XXX-XXX-XXX\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a reservation\n  test-Reservation-1:\n    type: pnap:Reservation\n    properties:\n      sku: XXX-XXX-XXX\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "assignedResourceId": {
                    "type": "string",
                    "description": "The resource ID currently being assigned to reservation.\n"
                },
                "autoRenew": {
                    "type": "boolean",
                    "description": "A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).\n"
                },
                "autoRenewDisableReason": {
                    "type": "string",
                    "description": "The reason for disabling auto-renewal.\n"
                },
                "endDateTime": {
                    "type": "string",
                    "description": "The point in time (in UTC) when the reservation ends.\n"
                },
                "initialInvoiceModel": {
                    "type": "string",
                    "description": "Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.\n"
                },
                "lastRenewalDateTime": {
                    "type": "string",
                    "description": "The point in time (in UTC) when the reservation was renewed last.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location code.\n"
                },
                "nextBillingDate": {
                    "type": "string",
                    "description": "Next billing date for reservation.\n"
                },
                "nextRenewalDateTime": {
                    "type": "string",
                    "description": "The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.\n"
                },
                "price": {
                    "type": "number",
                    "description": "Reservation price.\n"
                },
                "priceUnit": {
                    "type": "string",
                    "description": "The unit to which the price applies.\n"
                },
                "productCategory": {
                    "type": "string",
                    "description": "The product category.\n"
                },
                "productCode": {
                    "type": "string",
                    "description": "The code identifying the product. This code has significance across all locations.\n"
                },
                "reservationModel": {
                    "type": "string",
                    "description": "The reservation model.\n"
                },
                "sku": {
                    "type": "string",
                    "description": "The SKU code of product pricing plan.\n"
                },
                "startDateTime": {
                    "type": "string",
                    "description": "The point in time (in UTC) when the reservation starts.\n"
                }
            },
            "required": [
                "assignedResourceId",
                "autoRenew",
                "endDateTime",
                "initialInvoiceModel",
                "lastRenewalDateTime",
                "location",
                "nextBillingDate",
                "nextRenewalDateTime",
                "price",
                "priceUnit",
                "productCategory",
                "productCode",
                "reservationModel",
                "sku",
                "startDateTime"
            ],
            "inputProperties": {
                "autoRenew": {
                    "type": "boolean",
                    "description": "A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).\n"
                },
                "autoRenewDisableReason": {
                    "type": "string",
                    "description": "The reason for disabling auto-renewal.\n"
                },
                "sku": {
                    "type": "string",
                    "description": "The SKU code of product pricing plan.\n"
                }
            },
            "requiredInputs": [
                "sku"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Reservation resources.\n",
                "properties": {
                    "assignedResourceId": {
                        "type": "string",
                        "description": "The resource ID currently being assigned to reservation.\n"
                    },
                    "autoRenew": {
                        "type": "boolean",
                        "description": "A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).\n"
                    },
                    "autoRenewDisableReason": {
                        "type": "string",
                        "description": "The reason for disabling auto-renewal.\n"
                    },
                    "endDateTime": {
                        "type": "string",
                        "description": "The point in time (in UTC) when the reservation ends.\n"
                    },
                    "initialInvoiceModel": {
                        "type": "string",
                        "description": "Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.\n"
                    },
                    "lastRenewalDateTime": {
                        "type": "string",
                        "description": "The point in time (in UTC) when the reservation was renewed last.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location code.\n"
                    },
                    "nextBillingDate": {
                        "type": "string",
                        "description": "Next billing date for reservation.\n"
                    },
                    "nextRenewalDateTime": {
                        "type": "string",
                        "description": "The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.\n"
                    },
                    "price": {
                        "type": "number",
                        "description": "Reservation price.\n"
                    },
                    "priceUnit": {
                        "type": "string",
                        "description": "The unit to which the price applies.\n"
                    },
                    "productCategory": {
                        "type": "string",
                        "description": "The product category.\n"
                    },
                    "productCode": {
                        "type": "string",
                        "description": "The code identifying the product. This code has significance across all locations.\n"
                    },
                    "reservationModel": {
                        "type": "string",
                        "description": "The reservation model.\n"
                    },
                    "sku": {
                        "type": "string",
                        "description": "The SKU code of product pricing plan.\n"
                    },
                    "startDateTime": {
                        "type": "string",
                        "description": "The point in time (in UTC) when the reservation starts.\n"
                    }
                },
                "type": "object"
            }
        },
        "pnap:index/server:Server": {
            "description": "Provides a phoenixNAP server resource. This can be used to create,\nmodify, and delete servers.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a server\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as pnap from \"@pulumi/pnap\";\n\n// Create a server\nconst test_Server_1 = new pnap.Server(\"test-Server-1\", {\n    hostname: \"Test-Server-1\",\n    os: \"ubuntu/bionic\",\n    type: \"s1.c1.medium\",\n    location: \"PHX\",\n    installDefaultSshKeys: true,\n    sshKeys: [\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126\"],\n    cloudInit: {\n        userData: Buffer.from(fs.readFileSync(\"~/terraform-provider-pnap/create-folder.txt\", 'binary')).toString('base64'),\n    },\n    networkConfiguration: {\n        privateNetworkConfiguration: {\n            configurationType: \"USER_DEFINED\",\n            privateNetworks: [\n                {\n                    serverPrivateNetwork: {\n                        id: pnap_private_network[\"Test-Network-33\"].id,\n                        ips: [\"10.0.0.12\"],\n                    },\n                },\n                {\n                    serverPrivateNetwork: {\n                        id: pnap_private_network[\"Test-Network-44\"].id,\n                        ips: [\"172.16.0.12\"],\n                    },\n                },\n            ],\n        },\n    },\n});\n//pricing_model = \"ONE_MONTH_RESERVATION\"\n//allowed actions are: reboot, reset, powered-on, powered-off, shutdown\n//action = \"powered-on\"\n```\n```python\nimport pulumi\nimport base64\nimport pulumi_pnap as pnap\n\n# Create a server\ntest__server_1 = pnap.Server(\"test-Server-1\",\n    hostname=\"Test-Server-1\",\n    os=\"ubuntu/bionic\",\n    type=\"s1.c1.medium\",\n    location=\"PHX\",\n    install_default_ssh_keys=True,\n    ssh_keys=[\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126\"],\n    cloud_init=pnap.ServerCloudInitArgs(\n        user_data=(lambda path: base64.b64encode(open(path).read().encode()).decode())(\"~/terraform-provider-pnap/create-folder.txt\"),\n    ),\n    network_configuration=pnap.ServerNetworkConfigurationArgs(\n        private_network_configuration=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs(\n            configuration_type=\"USER_DEFINED\",\n            private_networks=[\n                pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(\n                    server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(\n                        id=pnap_private_network[\"Test-Network-33\"][\"id\"],\n                        ips=[\"10.0.0.12\"],\n                    ),\n                ),\n                pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs(\n                    server_private_network=pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs(\n                        id=pnap_private_network[\"Test-Network-44\"][\"id\"],\n                        ips=[\"172.16.0.12\"],\n                    ),\n                ),\n            ],\n        ),\n    ))\n#pricing_model = \"ONE_MONTH_RESERVATION\"\n#allowed actions are: reboot, reset, powered-on, powered-off, shutdown\n#action = \"powered-on\"\n```\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\n\t\nstring ReadFileBase64(string path) \n{\n    return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));\n}\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a server\n    var test_Server_1 = new Pnap.Server(\"test-Server-1\", new()\n    {\n        Hostname = \"Test-Server-1\",\n        Os = \"ubuntu/bionic\",\n        Type = \"s1.c1.medium\",\n        Location = \"PHX\",\n        InstallDefaultSshKeys = true,\n        SshKeys = new[]\n        {\n            \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126\",\n        },\n        CloudInit = new Pnap.Inputs.ServerCloudInitArgs\n        {\n            UserData = ReadFileBase64(\"~/terraform-provider-pnap/create-folder.txt\"),\n        },\n        NetworkConfiguration = new Pnap.Inputs.ServerNetworkConfigurationArgs\n        {\n            PrivateNetworkConfiguration = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationArgs\n            {\n                ConfigurationType = \"USER_DEFINED\",\n                PrivateNetworks = new[]\n                {\n                    new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs\n                    {\n                        ServerPrivateNetwork = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs\n                        {\n                            Id = pnap_private_network.Test_Network_33.Id,\n                            Ips = new[]\n                            {\n                                \"10.0.0.12\",\n                            },\n                        },\n                    },\n                    new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs\n                    {\n                        ServerPrivateNetwork = new Pnap.Inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs\n                        {\n                            Id = pnap_private_network.Test_Network_44.Id,\n                            Ips = new[]\n                            {\n                                \"172.16.0.12\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n    //pricing_model = \"ONE_MONTH_RESERVATION\"\n    //allowed actions are: reboot, reset, powered-on, powered-off, shutdown\n    //action = \"powered-on\"\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"os\"\n\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc filebase64OrPanic(path string) string {\n\tif fileData, err := os.ReadFile(path); err == nil {\n\t\treturn base64.StdEncoding.EncodeToString(fileData[:])\n\t} else {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pnap.NewServer(ctx, \"test-Server-1\", \u0026pnap.ServerArgs{\n\t\t\tHostname:              pulumi.String(\"Test-Server-1\"),\n\t\t\tOs:                    pulumi.String(\"ubuntu/bionic\"),\n\t\t\tType:                  pulumi.String(\"s1.c1.medium\"),\n\t\t\tLocation:              pulumi.String(\"PHX\"),\n\t\t\tInstallDefaultSshKeys: pulumi.Bool(true),\n\t\t\tSshKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126\"),\n\t\t\t},\n\t\t\tCloudInit: \u0026pnap.ServerCloudInitArgs{\n\t\t\t\tUserData: filebase64OrPanic(\"~/terraform-provider-pnap/create-folder.txt\"),\n\t\t\t},\n\t\t\tNetworkConfiguration: \u0026pnap.ServerNetworkConfigurationArgs{\n\t\t\t\tPrivateNetworkConfiguration: \u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationArgs{\n\t\t\t\t\tConfigurationType: pulumi.String(\"USER_DEFINED\"),\n\t\t\t\t\tPrivateNetworks: pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArray{\n\t\t\t\t\t\t\u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs{\n\t\t\t\t\t\t\tServerPrivateNetwork: \u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs{\n\t\t\t\t\t\t\t\tId: pulumi.Any(pnap_private_network.TestNetwork33.Id),\n\t\t\t\t\t\t\t\tIps: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"10.0.0.12\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs{\n\t\t\t\t\t\t\tServerPrivateNetwork: \u0026pnap.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs{\n\t\t\t\t\t\t\t\tId: pulumi.Any(pnap_private_network.TestNetwork44.Id),\n\t\t\t\t\t\t\t\tIps: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"172.16.0.12\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.Server;\nimport com.pulumi.pnap.ServerArgs;\nimport com.pulumi.pnap.inputs.ServerCloudInitArgs;\nimport com.pulumi.pnap.inputs.ServerNetworkConfigurationArgs;\nimport com.pulumi.pnap.inputs.ServerNetworkConfigurationPrivateNetworkConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_Server_1 = new Server(\"test-Server-1\", ServerArgs.builder()        \n            .hostname(\"Test-Server-1\")\n            .os(\"ubuntu/bionic\")\n            .type(\"s1.c1.medium\")\n            .location(\"PHX\")\n            .installDefaultSshKeys(true)\n            .sshKeys(\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF9LdAFElNCi7JoWh6KUcchrJ2Gac1aqGRPpdZNowObpRtmiRCecAMb7bUgNAaNfcmwiQi7tos9TlnFgprIcfMWb8MSs3ABYHmBgqEEt3RWYf0fAc9CsIpJdMCUG28TPGTlRXCEUVNKgLMdcseAlJoGp1CgbHWIN65fB3he3kAZcfpPn5mapV0tsl2p+ZyuAGRYdn5dJv2RZDHUZBkOeUobwsij+weHCKAFmKQKtCP7ybgVHaQjAPrj8MGnk1jBbjDt5ws+Be+9JNjQJee9zCKbAOsIo3i+GcUIkrw5jxPU/RTGlWBcemPaKHdciSzGcjWboapzIy49qypQhZe1U75 user2@122.16.1.126\")\n            .cloudInit(ServerCloudInitArgs.builder()\n                .userData(Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(\"~/terraform-provider-pnap/create-folder.txt\"))))\n                .build())\n            .networkConfiguration(ServerNetworkConfigurationArgs.builder()\n                .privateNetworkConfiguration(ServerNetworkConfigurationPrivateNetworkConfigurationArgs.builder()\n                    .configurationType(\"USER_DEFINED\")\n                    .privateNetworks(                    \n                        ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs.builder()\n                            .serverPrivateNetwork(ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs.builder()\n                                .id(pnap_private_network.Test-Network-33().id())\n                                .ips(\"10.0.0.12\")\n                                .build())\n                            .build(),\n                        ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkArgs.builder()\n                            .serverPrivateNetwork(ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetworkArgs.builder()\n                                .id(pnap_private_network.Test-Network-44().id())\n                                .ips(\"172.16.0.12\")\n                                .build())\n                            .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.\n"
                },
                "cloudInit": {
                    "$ref": "#/types/pnap:index/ServerCloudInit:ServerCloudInit",
                    "description": "Cloud-init configuration details. Structure is documented below.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster reference id if any.\n"
                },
                "coresPerCpu": {
                    "type": "integer",
                    "description": "The number of physical cores present on each CPU.\n"
                },
                "cpu": {
                    "type": "string",
                    "description": "A description of the machine CPU.\n"
                },
                "cpuCount": {
                    "type": "integer",
                    "description": "The number of CPUs available in the system.\n"
                },
                "cpuFrequencyInGhz": {
                    "type": "integer",
                    "description": "The CPU frequency in GHz.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Server description.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.\n\n\nThe `cloud_init` block has one field:\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Server hostname.\n"
                },
                "installDefaultSshKeys": {
                    "type": "boolean"
                },
                "installOsToRam": {
                    "type": "boolean",
                    "description": "If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)\n"
                },
                "managementAccessAllowedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.\n"
                },
                "managementUiUrl": {
                    "type": "string",
                    "description": "The URL of the management UI which will only be returned in response to provisioning a server.\n"
                },
                "netrisControllers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/ServerNetrisController:ServerNetrisController"
                    },
                    "description": "Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).\n"
                },
                "netrisSoftgate": {
                    "$ref": "#/types/pnap:index/ServerNetrisSoftgate:ServerNetrisSoftgate",
                    "description": "Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.\n"
                },
                "networkConfiguration": {
                    "$ref": "#/types/pnap:index/ServerNetworkConfiguration:ServerNetworkConfiguration",
                    "description": "Entire network details of bare metal server. Structure is documented below.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password set for user Admin on Windows server which will only be returned in response to provisioning a server.\n",
                    "secret": true
                },
                "pricingModel": {
                    "type": "string",
                    "description": "Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.\n"
                },
                "privateIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Private IP Addresses assigned to server. Must contain at least 1 item.\n"
                },
                "provisionedOn": {
                    "type": "string",
                    "description": "Date and time when server was provisioned.\n"
                },
                "publicIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Public IP Addresses assigned to server. Must contain at least 1 item.\n"
                },
                "ram": {
                    "type": "string",
                    "description": "A description of the machine RAM.\n"
                },
                "rdpAllowedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.\n"
                },
                "reservationId": {
                    "type": "string",
                    "description": "Server reservation ID.\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Password set for user root on an ESXi server which will only be returned in response to provisioning a server.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH Keys that will be installed on the server.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the server.\n"
                },
                "storage": {
                    "type": "string",
                    "description": "A description of the machine storage.\n"
                },
                "storageConfiguration": {
                    "$ref": "#/types/pnap:index/ServerStorageConfiguration:ServerStorageConfiguration",
                    "description": "Storage configuration. Structure is documented below.\n"
                },
                "supersededBy": {
                    "type": "string",
                    "description": "Unique identifier of the server to which the reservation has been transferred.\n"
                },
                "supersedes": {
                    "type": "string",
                    "description": "Unique identifier of the server from which the reservation has been transferred.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/ServerTag:ServerTag"
                    },
                    "description": "Tags to set to server, if any. Structure is documented below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).\n"
                }
            },
            "required": [
                "cloudInit",
                "clusterId",
                "coresPerCpu",
                "cpu",
                "cpuCount",
                "cpuFrequencyInGhz",
                "hostname",
                "installOsToRam",
                "location",
                "managementAccessAllowedIps",
                "managementUiUrl",
                "netrisControllers",
                "netrisSoftgate",
                "networkConfiguration",
                "networkType",
                "os",
                "password",
                "pricingModel",
                "privateIpAddresses",
                "provisionedOn",
                "publicIpAddresses",
                "ram",
                "rdpAllowedIps",
                "reservationId",
                "rootPassword",
                "status",
                "storage",
                "supersededBy",
                "supersedes",
                "type"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.\n"
                },
                "cloudInit": {
                    "$ref": "#/types/pnap:index/ServerCloudInit:ServerCloudInit",
                    "description": "Cloud-init configuration details. Structure is documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Server description.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.\n\n\nThe `cloud_init` block has one field:\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Server hostname.\n"
                },
                "installDefaultSshKeys": {
                    "type": "boolean"
                },
                "installOsToRam": {
                    "type": "boolean",
                    "description": "If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)\n"
                },
                "managementAccessAllowedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.\n"
                },
                "netrisSoftgate": {
                    "$ref": "#/types/pnap:index/ServerNetrisSoftgate:ServerNetrisSoftgate",
                    "description": "Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.\n"
                },
                "networkConfiguration": {
                    "$ref": "#/types/pnap:index/ServerNetworkConfiguration:ServerNetworkConfiguration",
                    "description": "Entire network details of bare metal server. Structure is documented below.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.\n"
                },
                "os": {
                    "type": "string",
                    "description": "The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).\n"
                },
                "pricingModel": {
                    "type": "string",
                    "description": "Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.\n"
                },
                "rdpAllowedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.\n"
                },
                "reservationId": {
                    "type": "string",
                    "description": "Server reservation ID.\n"
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SSH Keys that will be installed on the server.\n"
                },
                "storageConfiguration": {
                    "$ref": "#/types/pnap:index/ServerStorageConfiguration:ServerStorageConfiguration",
                    "description": "Storage configuration. Structure is documented below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/ServerTag:ServerTag"
                    },
                    "description": "Tags to set to server, if any. Structure is documented below.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).\n"
                }
            },
            "requiredInputs": [
                "hostname",
                "location",
                "os",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action to perform on server. Allowed actions are: reboot, reset (deprecated), powered-on, powered-off, shutdown.\n"
                    },
                    "cloudInit": {
                        "$ref": "#/types/pnap:index/ServerCloudInit:ServerCloudInit",
                        "description": "Cloud-init configuration details. Structure is documented below.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster reference id if any.\n"
                    },
                    "coresPerCpu": {
                        "type": "integer",
                        "description": "The number of physical cores present on each CPU.\n"
                    },
                    "cpu": {
                        "type": "string",
                        "description": "A description of the machine CPU.\n"
                    },
                    "cpuCount": {
                        "type": "integer",
                        "description": "The number of CPUs available in the system.\n"
                    },
                    "cpuFrequencyInGhz": {
                        "type": "integer",
                        "description": "The CPU frequency in GHz.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Server description.\n"
                    },
                    "force": {
                        "type": "boolean",
                        "description": "Query parameter controlling advanced features availability. Currently applicable for networking. It is advised to use with caution since it might lead to unhealthy setups.\n\n\nThe `cloud_init` block has one field:\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Server hostname.\n"
                    },
                    "installDefaultSshKeys": {
                        "type": "boolean"
                    },
                    "installOsToRam": {
                        "type": "boolean",
                        "description": "If true, OS will be installed to and booted from the server's RAM. On restart RAM OS will be lost and the server will not be reachable unless a custom bootable OS has been deployed. Only supported for ubuntu/focal. Default value is `false`.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Server Location ID. Cannot be changed once a server is created (e.g., PHX). For a full list of available locations visit [API docs](https://developers.phoenixnap.com/docs/bmc/1)\n"
                    },
                    "managementAccessAllowedIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Define list of IPs allowed to access the Management UI. Supported in single IP, CIDR and range format. When undefined, Management UI is disabled.Must contain at least 1 item.\n"
                    },
                    "managementUiUrl": {
                        "type": "string",
                        "description": "The URL of the management UI which will only be returned in response to provisioning a server.\n"
                    },
                    "netrisControllers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/ServerNetrisController:ServerNetrisController"
                        },
                        "description": "Netris Controller configuration properties. Knowledge base article to help you can be found [here](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-controller).\n"
                    },
                    "netrisSoftgate": {
                        "$ref": "#/types/pnap:index/ServerNetrisSoftgate:ServerNetrisSoftgate",
                        "description": "Netris Softgate configuration properties. Follow [instructions](https://phoenixnap.com/kb/netris-bare-metal-cloud#deploy-netris-softgate) for retrieving the required details. Structure is documented below.\n"
                    },
                    "networkConfiguration": {
                        "$ref": "#/types/pnap:index/ServerNetworkConfiguration:ServerNetworkConfiguration",
                        "description": "Entire network details of bare metal server. Structure is documented below.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "The type of network configuration for this server. Currently this field should be set to PUBLIC_AND_PRIVATE, PRIVATE_ONLY, PUBLIC_ONLY or USER_DEFINED. Setting the force query parameter to `true` allows you to configure network configuration type as NONE.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The server’s OS ID used when the server was created (e.g., ubuntu/bionic, centos/centos7). For a full list of available operating systems visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password set for user Admin on Windows server which will only be returned in response to provisioning a server.\n",
                        "secret": true
                    },
                    "pricingModel": {
                        "type": "string",
                        "description": "Server pricing model. Currently this field should be set to HOURLY, ONE_MONTH_RESERVATION, TWELVE_MONTHS_RESERVATION, TWENTY_FOUR_MONTHS_RESERVATION or THIRTY_SIX_MONTHS_RESERVATION.\n"
                    },
                    "privateIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Private IP Addresses assigned to server. Must contain at least 1 item.\n"
                    },
                    "provisionedOn": {
                        "type": "string",
                        "description": "Date and time when server was provisioned.\n"
                    },
                    "publicIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Public IP Addresses assigned to server. Must contain at least 1 item.\n"
                    },
                    "ram": {
                        "type": "string",
                        "description": "A description of the machine RAM.\n"
                    },
                    "rdpAllowedIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IPs allowed for RDP access to Windows OS. Supported in single IP, CIDR and range format. When undefined, RDP is disabled. To allow RDP access from any IP use 0.0.0.0/0. Must contain at least 1 item.\n"
                    },
                    "reservationId": {
                        "type": "string",
                        "description": "Server reservation ID.\n"
                    },
                    "rootPassword": {
                        "type": "string",
                        "description": "Password set for user root on an ESXi server which will only be returned in response to provisioning a server.\n"
                    },
                    "sshKeyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SSH key IDs that will be installed on the server in addition to any SSH keys specified in this request.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SSH Keys that will be installed on the server.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the server.\n"
                    },
                    "storage": {
                        "type": "string",
                        "description": "A description of the machine storage.\n"
                    },
                    "storageConfiguration": {
                        "$ref": "#/types/pnap:index/ServerStorageConfiguration:ServerStorageConfiguration",
                        "description": "Storage configuration. Structure is documented below.\n"
                    },
                    "supersededBy": {
                        "type": "string",
                        "description": "Unique identifier of the server to which the reservation has been transferred.\n"
                    },
                    "supersedes": {
                        "type": "string",
                        "description": "Unique identifier of the server from which the reservation has been transferred.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/ServerTag:ServerTag"
                        },
                        "description": "Tags to set to server, if any. Structure is documented below.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Server type ID. Cannot be changed once a server is created (e.g., s1.c1.small, s1.c1.medium). For a full list of available types visit [API docs](https://developers.phoenixnap.com/docs/bmc/1).\n"
                    }
                },
                "type": "object"
            }
        },
        "pnap:index/sshKey:SshKey": {
            "description": "Provides a phoenixNAP SSH key resource. This can be used to create,\nmodify, and delete SSH keys.\n\n\n",
            "properties": {
                "createdOn": {
                    "type": "string"
                },
                "default": {
                    "type": "boolean",
                    "description": "Keys marked as default are always included on server creation and reset unless toggled off in creation/reset request.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "SSH key auto-generated SHA-256 fingerprint.\n* `createdOn `- Date and time of creation.\n* `lastUpdatedOn ` - Date and time of last update.\n"
                },
                "key": {
                    "type": "string",
                    "description": "SSH key actual key value.\n"
                },
                "lastUpdatedOn": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly SSH key name to represent an SSH key.\n"
                }
            },
            "required": [
                "createdOn",
                "default",
                "fingerprint",
                "key",
                "lastUpdatedOn",
                "name"
            ],
            "inputProperties": {
                "default": {
                    "type": "boolean",
                    "description": "Keys marked as default are always included on server creation and reset unless toggled off in creation/reset request.\n"
                },
                "key": {
                    "type": "string",
                    "description": "SSH key actual key value.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Friendly SSH key name to represent an SSH key.\n"
                }
            },
            "requiredInputs": [
                "default",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "createdOn": {
                        "type": "string"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Keys marked as default are always included on server creation and reset unless toggled off in creation/reset request.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "SSH key auto-generated SHA-256 fingerprint.\n* `createdOn `- Date and time of creation.\n* `lastUpdatedOn ` - Date and time of last update.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "SSH key actual key value.\n"
                    },
                    "lastUpdatedOn": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly SSH key name to represent an SSH key.\n"
                    }
                },
                "type": "object"
            }
        },
        "pnap:index/storageNetwork:StorageNetwork": {
            "description": "Provides a phoenixNAP Storage Network resource. This can be used to create, modify and delete storage networks.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\n// Create a storage network and volume\nconst storage_Network_1 = new pnap.StorageNetwork(\"storage-Network-1\", {\n    description: \"First storage network.\",\n    location: \"PHX\",\n    volumes: [{\n        volume: {\n            capacityInGb: 1000,\n            name: \"Volume-1\",\n            pathSuffix: \"/shared-docs\",\n            tags: [\n                {\n                    tagAssignment: {\n                        name: \"tag-1\",\n                        value: \"PROD\",\n                    },\n                },\n                {\n                    tagAssignment: {\n                        name: \"tag-2\",\n                    },\n                },\n            ],\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\n# Create a storage network and volume\nstorage__network_1 = pnap.StorageNetwork(\"storage-Network-1\",\n    description=\"First storage network.\",\n    location=\"PHX\",\n    volumes=[pnap.StorageNetworkVolumeArgs(\n        volume=pnap.StorageNetworkVolumeVolumeArgs(\n            capacity_in_gb=1000,\n            name=\"Volume-1\",\n            path_suffix=\"/shared-docs\",\n            tags=[\n                pnap.StorageNetworkVolumeVolumeTagArgs(\n                    tag_assignment=pnap.StorageNetworkVolumeVolumeTagTagAssignmentArgs(\n                        name=\"tag-1\",\n                        value=\"PROD\",\n                    ),\n                ),\n                pnap.StorageNetworkVolumeVolumeTagArgs(\n                    tag_assignment=pnap.StorageNetworkVolumeVolumeTagTagAssignmentArgs(\n                        name=\"tag-2\",\n                    ),\n                ),\n            ],\n        ),\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a storage network and volume\n    var storage_Network_1 = new Pnap.StorageNetwork(\"storage-Network-1\", new()\n    {\n        Description = \"First storage network.\",\n        Location = \"PHX\",\n        Volumes = new[]\n        {\n            new Pnap.Inputs.StorageNetworkVolumeArgs\n            {\n                Volume = new Pnap.Inputs.StorageNetworkVolumeVolumeArgs\n                {\n                    CapacityInGb = 1000,\n                    Name = \"Volume-1\",\n                    PathSuffix = \"/shared-docs\",\n                    Tags = new[]\n                    {\n                        new Pnap.Inputs.StorageNetworkVolumeVolumeTagArgs\n                        {\n                            TagAssignment = new Pnap.Inputs.StorageNetworkVolumeVolumeTagTagAssignmentArgs\n                            {\n                                Name = \"tag-1\",\n                                Value = \"PROD\",\n                            },\n                        },\n                        new Pnap.Inputs.StorageNetworkVolumeVolumeTagArgs\n                        {\n                            TagAssignment = new Pnap.Inputs.StorageNetworkVolumeVolumeTagTagAssignmentArgs\n                            {\n                                Name = \"tag-2\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pnap.NewStorageNetwork(ctx, \"storage-Network-1\", \u0026pnap.StorageNetworkArgs{\n\t\t\tDescription: pulumi.String(\"First storage network.\"),\n\t\t\tLocation:    pulumi.String(\"PHX\"),\n\t\t\tVolumes: pnap.StorageNetworkVolumeArray{\n\t\t\t\t\u0026pnap.StorageNetworkVolumeArgs{\n\t\t\t\t\tVolume: \u0026pnap.StorageNetworkVolumeVolumeArgs{\n\t\t\t\t\t\tCapacityInGb: pulumi.Int(1000),\n\t\t\t\t\t\tName:         pulumi.String(\"Volume-1\"),\n\t\t\t\t\t\tPathSuffix:   pulumi.String(\"/shared-docs\"),\n\t\t\t\t\t\tTags: pnap.StorageNetworkVolumeVolumeTagArray{\n\t\t\t\t\t\t\t\u0026pnap.StorageNetworkVolumeVolumeTagArgs{\n\t\t\t\t\t\t\t\tTagAssignment: \u0026pnap.StorageNetworkVolumeVolumeTagTagAssignmentArgs{\n\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"tag-1\"),\n\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"PROD\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\u0026pnap.StorageNetworkVolumeVolumeTagArgs{\n\t\t\t\t\t\t\t\tTagAssignment: \u0026pnap.StorageNetworkVolumeVolumeTagTagAssignmentArgs{\n\t\t\t\t\t\t\t\t\tName: pulumi.String(\"tag-2\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.StorageNetwork;\nimport com.pulumi.pnap.StorageNetworkArgs;\nimport com.pulumi.pnap.inputs.StorageNetworkVolumeArgs;\nimport com.pulumi.pnap.inputs.StorageNetworkVolumeVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storage_Network_1 = new StorageNetwork(\"storage-Network-1\", StorageNetworkArgs.builder()        \n            .description(\"First storage network.\")\n            .location(\"PHX\")\n            .volumes(StorageNetworkVolumeArgs.builder()\n                .volume(StorageNetworkVolumeVolumeArgs.builder()\n                    .capacityInGb(1000)\n                    .name(\"Volume-1\")\n                    .pathSuffix(\"/shared-docs\")\n                    .tags(                    \n                        StorageNetworkVolumeVolumeTagArgs.builder()\n                            .tagAssignment(StorageNetworkVolumeVolumeTagTagAssignmentArgs.builder()\n                                .name(\"tag-1\")\n                                .value(\"PROD\")\n                                .build())\n                            .build(),\n                        StorageNetworkVolumeVolumeTagArgs.builder()\n                            .tagAssignment(StorageNetworkVolumeVolumeTagTagAssignmentArgs.builder()\n                                .name(\"tag-2\")\n                                .build())\n                            .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a storage network and volume\n  storage-Network-1:\n    type: pnap:StorageNetwork\n    properties:\n      description: First storage network.\n      location: PHX\n      volumes:\n        - volume:\n            capacityInGb: 1000\n            name: Volume-1\n            pathSuffix: /shared-docs\n            tags:\n              - tagAssignment:\n                  name: tag-1\n                  value: PROD\n              - tagAssignment:\n                  name: tag-2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "clientVlan": {
                    "type": "integer",
                    "description": "Custom Client VLAN that the Storage Network will be set to.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when this volume was created.\n"
                },
                "deleteRequestedOn": {
                    "type": "string",
                    "description": "Date and time of the initial request for volume deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Volume description.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP of the storage network\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of this storage network. Currently this field should be set to `PHX` or `ASH`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "networkId": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Volume's status.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/StorageNetworkVolume:StorageNetworkVolume"
                    },
                    "description": "Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).\n"
                }
            },
            "required": [
                "createdOn",
                "deleteRequestedOn",
                "ips",
                "location",
                "name",
                "networkId",
                "status",
                "volumes"
            ],
            "inputProperties": {
                "clientVlan": {
                    "type": "integer",
                    "description": "Custom Client VLAN that the Storage Network will be set to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Volume description.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location of this storage network. Currently this field should be set to `PHX` or `ASH`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the tag.\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/StorageNetworkVolume:StorageNetworkVolume"
                    },
                    "description": "Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).\n"
                }
            },
            "requiredInputs": [
                "location",
                "volumes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageNetwork resources.\n",
                "properties": {
                    "clientVlan": {
                        "type": "integer",
                        "description": "Custom Client VLAN that the Storage Network will be set to.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when this volume was created.\n"
                    },
                    "deleteRequestedOn": {
                        "type": "string",
                        "description": "Date and time of the initial request for volume deletion.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Volume description.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP of the storage network\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of this storage network. Currently this field should be set to `PHX` or `ASH`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the tag.\n"
                    },
                    "networkId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Volume's status.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/StorageNetworkVolume:StorageNetworkVolume"
                        },
                        "description": "Volumes to be created alongside storage. Currently only 1 volume is supported (must contain exactly one item).\n"
                    }
                },
                "type": "object"
            }
        },
        "pnap:index/tag:Tag": {
            "description": "Provides a phoenixNAP tag resource. This can be used to create, modify, and delete tags.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nCreate a tag \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\n// Create a tag\nconst tag_1 = new pnap.Tag(\"tag-1\", {isBillingTag: false});\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\n# Create a tag\ntag_1 = pnap.Tag(\"tag-1\", is_billing_tag=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a tag\n    var tag_1 = new Pnap.Tag(\"tag-1\", new()\n    {\n        IsBillingTag = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := pnap.NewTag(ctx, \"tag-1\", \u0026pnap.TagArgs{\n\t\t\tIsBillingTag: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.Tag;\nimport com.pulumi.pnap.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tag_1 = new Tag(\"tag-1\", TagArgs.builder()        \n            .isBillingTag(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a tag\n  tag-1:\n    type: pnap:Tag\n    properties:\n      isBillingTag: false\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdBy": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the tag.\n"
                },
                "isBillingTag": {
                    "type": "boolean",
                    "description": "Whether or not to show the tag as part of billing and invoices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the tag.\n"
                },
                "resourceAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/pnap:index/TagResourceAssignment:TagResourceAssignment"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The optional values of the tag..\n"
                }
            },
            "required": [
                "createdBy",
                "isBillingTag",
                "name",
                "resourceAssignments",
                "values"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the tag.\n"
                },
                "isBillingTag": {
                    "type": "boolean",
                    "description": "Whether or not to show the tag as part of billing and invoices.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the tag.\n"
                }
            },
            "requiredInputs": [
                "isBillingTag"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the tag.\n"
                    },
                    "isBillingTag": {
                        "type": "boolean",
                        "description": "Whether or not to show the tag as part of billing and invoices.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the tag.\n"
                    },
                    "resourceAssignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/TagResourceAssignment:TagResourceAssignment"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The optional values of the tag..\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pnap:index/getEvents:getEvents": {
            "description": "Provides a phoenixNAP events datasource. This can be used to read event logs.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch event logs by name and show their details.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst test = pnap.getEvents({\n    events: [{\n        name: \"API.SshKeysUpdate\",\n    }],\n});\nexport const logs = test;\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\ntest = pnap.get_events(events=[pnap.GetEventsEventArgs(\n    name=\"API.SshKeysUpdate\",\n)])\npulumi.export(\"logs\", test)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pnap.GetEvents.Invoke(new()\n    {\n        Events = new[]\n        {\n            new Pnap.Inputs.GetEventsEventInputArgs\n            {\n                Name = \"API.SshKeysUpdate\",\n            },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"logs\"] = test,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pnap.GetEvents(ctx, \u0026pnap.GetEventsArgs{\n\t\t\tEvents: []pnap.GetEventsEvent{\n\t\t\t\t{\n\t\t\t\t\tName: \"API.SshKeysUpdate\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"logs\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetEventsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PnapFunctions.getEvents(GetEventsArgs.builder()\n            .events(GetEventsEventArgs.builder()\n                .name(\"API.SshKeysUpdate\")\n                .build())\n            .build());\n\n        ctx.export(\"logs\", test.applyValue(getEventsResult -\u003e getEventsResult));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: pnap:getEvents\n      Arguments:\n        events:\n          - name: API.SshKeysUpdate\noutputs:\n  # Show events\n  logs: ${test}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEvents.\n",
                "properties": {
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getEventsEvent:getEventsEvent"
                        },
                        "description": "Block `events` has field `name`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "events"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEvents.\n",
                "properties": {
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getEventsEvent:getEventsEvent"
                        },
                        "description": "The list of events recorded.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "events",
                    "id"
                ]
            }
        },
        "pnap:index/getInvoices:getInvoices": {
            "description": "Provides a phoenixNAP invoices datasource. This can be used to read invoices.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch invoices by status and date sent and show their details.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst query-C = pnap.getInvoices({\n    status: \"PAID\",\n    sentOnFrom: \"2020-04-13T00:00:00.000Z\",\n    sentOnTo: \"2022-04-13T00:00:00.000Z\",\n});\nexport const invoices = query_C.then(query_C =\u003e query_C.paginatedInvoices);\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\nquery__c = pnap.get_invoices(status=\"PAID\",\n    sent_on_from=\"2020-04-13T00:00:00.000Z\",\n    sent_on_to=\"2022-04-13T00:00:00.000Z\")\npulumi.export(\"invoices\", query__c.paginated_invoices)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var query_C = Pnap.GetInvoices.Invoke(new()\n    {\n        Status = \"PAID\",\n        SentOnFrom = \"2020-04-13T00:00:00.000Z\",\n        SentOnTo = \"2022-04-13T00:00:00.000Z\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"invoices\"] = query_C.Apply(query_C =\u003e query_C.Apply(getInvoicesResult =\u003e getInvoicesResult.PaginatedInvoices)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tquery_C, err := pnap.GetInvoices(ctx, \u0026pnap.GetInvoicesArgs{\n\t\t\tStatus:     pulumi.StringRef(\"PAID\"),\n\t\t\tSentOnFrom: pulumi.StringRef(\"2020-04-13T00:00:00.000Z\"),\n\t\t\tSentOnTo:   pulumi.StringRef(\"2022-04-13T00:00:00.000Z\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"invoices\", query_C.PaginatedInvoices)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetInvoicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var query-C = PnapFunctions.getInvoices(GetInvoicesArgs.builder()\n            .status(\"PAID\")\n            .sentOnFrom(\"2020-04-13T00:00:00.000Z\")\n            .sentOnTo(\"2022-04-13T00:00:00.000Z\")\n            .build());\n\n        ctx.export(\"invoices\", query_C.paginatedInvoices());\n    }\n}\n```\n```yaml\nvariables:\n  query-C:\n    fn::invoke:\n      Function: pnap:getInvoices\n      Arguments:\n        status: PAID\n        sentOnFrom: 2020-04-13T00:00:00.000Z\n        sentOnTo: 2022-04-13T00:00:00.000Z\noutputs:\n  # Show invoices\n  invoices: ${[\"query-C\"].paginatedInvoices}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInvoices.\n",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "description": "The limit of the number of results returned. The number of records returned may be smaller than the limit.\n"
                    },
                    "number": {
                        "type": "string",
                        "description": "A user-friendly reference number assigned to the invoice.\n"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "The number of items to skip in the results.\n"
                    },
                    "sentOnFrom": {
                        "type": "string",
                        "description": "Minimum value to filter invoices by sent on date.\n"
                    },
                    "sentOnTo": {
                        "type": "string",
                        "description": "Maximum value to filter invoices by sent on date.\n"
                    },
                    "sortDirection": {
                        "type": "string",
                        "description": "Sort given field depending on the desired direction. The following values are allowed: `ASC`, `DESC`.\n"
                    },
                    "sortField": {
                        "type": "string",
                        "description": "If a sort field is requested, pagination will be done after sorting. The following values are allowed: `number`, `sentOn`, `dueDate`, `amount`, `outstandingAmount`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Payment status of the invoice. The following values are allowed: `PAID`, `UNPAID`, `OVERDUE`, `PAYMENT_PROCESSING`\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInvoices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of items in the page (actual returned length can be less).\n"
                    },
                    "number": {
                        "type": "string",
                        "description": "A user-friendly reference number assigned to the invoice.\n"
                    },
                    "offset": {
                        "type": "integer",
                        "description": "The number of returned items skipped.\n"
                    },
                    "paginatedInvoices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getInvoicesPaginatedInvoice:getInvoicesPaginatedInvoice"
                        },
                        "description": "The paginated list of invoices.\n"
                    },
                    "sentOnFrom": {
                        "type": "string"
                    },
                    "sentOnTo": {
                        "type": "string"
                    },
                    "sortDirection": {
                        "type": "string"
                    },
                    "sortField": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the invoice.\n"
                    }
                },
                "type": "object",
                "required": [
                    "paginatedInvoices",
                    "id"
                ]
            }
        },
        "pnap:index/getIpBlock:getIpBlock": {
            "description": "Provides a phoenixNAP IP Block datasource. This can be used to read IP Blocks.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch an IP Block by CIDR and show it's details in alphabetical order\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nexport = async () =\u003e {\n    const test = await pnap.getIpBlock({\n        cidr: \"1.1.1.0/31\",\n    });\n    return {\n        \"ip-block\": test,\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\ntest = pnap.get_ip_block(cidr=\"1.1.1.0/31\")\npulumi.export(\"ip-block\", test)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pnap.GetIpBlock.Invoke(new()\n    {\n        Cidr = \"1.1.1.0/31\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ip-block\"] = test,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pnap.LookupIpBlock(ctx, \u0026pnap.LookupIpBlockArgs{\n\t\t\tCidr: pulumi.StringRef(\"1.1.1.0/31\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ip-block\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetIpBlockArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PnapFunctions.getIpBlock(GetIpBlockArgs.builder()\n            .cidr(\"1.1.1.0/31\")\n            .build());\n\n        ctx.export(\"ip-block\", test.applyValue(getIpBlockResult -\u003e getIpBlockResult));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: pnap:getIpBlock\n      Arguments:\n        cidr: 1.1.1.0/31\noutputs:\n  # Show the IP Block details\n  ip-block: ${test}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpBlock.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "The IP Block in CIDR notation.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The IP Block identifier.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIpBlock.\n",
                "properties": {
                    "assignedResourceId": {
                        "type": "string",
                        "description": "ID of the resource assigned to the IP Block.\n* `assigned_resource_type `- Type of the resource assigned to the IP Block.\n"
                    },
                    "assignedResourceType": {
                        "type": "string"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The IP Block in CIDR notation.\n"
                    },
                    "cidrBlockSize": {
                        "type": "string",
                        "description": "CIDR IP Block Size.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the IP Block was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IP Block.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique id of the tag.\n"
                    },
                    "isBringYourOwn": {
                        "type": "boolean",
                        "description": "True if the IP Block is a \"bring your own\" block.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "IP Block location ID.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the IP Block.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getIpBlockTag:getIpBlockTag"
                        },
                        "description": "The tags assigned to the IP Block.\n"
                    }
                },
                "type": "object",
                "required": [
                    "assignedResourceId",
                    "assignedResourceType",
                    "cidr",
                    "cidrBlockSize",
                    "createdOn",
                    "description",
                    "id",
                    "isBringYourOwn",
                    "location",
                    "status",
                    "tags"
                ]
            }
        },
        "pnap:index/getLocations:getLocations": {
            "description": "Provides a phoenixNAP locations datasource. This can be used to retrieve locations info.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch locations by product category and show their details.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst query-C = pnap.getLocations({\n    productCategory: \"BANDWIDTH\",\n});\nexport const locations = query_C.then(query_C =\u003e query_C.locations);\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\nquery__c = pnap.get_locations(product_category=\"BANDWIDTH\")\npulumi.export(\"locations\", query__c.locations)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var query_C = Pnap.GetLocations.Invoke(new()\n    {\n        ProductCategory = \"BANDWIDTH\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"locations\"] = query_C.Apply(query_C =\u003e query_C.Apply(getLocationsResult =\u003e getLocationsResult.Locations)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tquery_C, err := pnap.GetLocations(ctx, \u0026pnap.GetLocationsArgs{\n\t\t\tProductCategory: pulumi.StringRef(\"BANDWIDTH\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"locations\", query_C.Locations)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetLocationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var query-C = PnapFunctions.getLocations(GetLocationsArgs.builder()\n            .productCategory(\"BANDWIDTH\")\n            .build());\n\n        ctx.export(\"locations\", query_C.locations());\n    }\n}\n```\n```yaml\nvariables:\n  query-C:\n    fn::invoke:\n      Function: pnap:getLocations\n      Arguments:\n        productCategory: BANDWIDTH\noutputs:\n  # Show locations\n  locations: ${[\"query-C\"].locations}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLocations.\n",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.\n"
                    },
                    "productCategory": {
                        "type": "string",
                        "description": "The product category. Currently the following values are allowed: `SERVER`, `BANDWIDTH`, `OPERATING_SYSTEM`, `PUBLIC_IP` and `STORAGE`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocations.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location code.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getLocationsLocation:getLocationsLocation"
                        },
                        "description": "The list of locations found.\n"
                    },
                    "productCategory": {
                        "type": "string",
                        "description": "The product category.\n"
                    }
                },
                "type": "object",
                "required": [
                    "locations",
                    "id"
                ]
            }
        },
        "pnap:index/getPrivateNetwork:getPrivateNetwork": {
            "description": "Provides a phoenixNAP Private Network datasource. This can be used to read private networks.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a private network by name and show it's servers \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst test-Network-44 = pnap.getPrivateNetwork({\n    name: \"qqq\",\n});\nexport const servers = test_Network_44.then(test_Network_44 =\u003e test_Network_44.servers);\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\ntest__network_44 = pnap.get_private_network(name=\"qqq\")\npulumi.export(\"servers\", test__network_44.servers)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_Network_44 = Pnap.GetPrivateNetwork.Invoke(new()\n    {\n        Name = \"qqq\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"servers\"] = test_Network_44.Apply(test_Network_44 =\u003e test_Network_44.Apply(getPrivateNetworkResult =\u003e getPrivateNetworkResult.Servers)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest_Network_44, err := pnap.LookupPrivateNetwork(ctx, \u0026pnap.LookupPrivateNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"qqq\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"servers\", test_Network_44.Servers)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetPrivateNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test-Network-44 = PnapFunctions.getPrivateNetwork(GetPrivateNetworkArgs.builder()\n            .name(\"qqq\")\n            .build());\n\n        ctx.export(\"servers\", test_Network_44.servers());\n    }\n}\n```\n```yaml\nvariables:\n  test-Network-44:\n    fn::invoke:\n      Function: pnap:getPrivateNetwork\n      Arguments:\n        name: qqq\noutputs:\n  # Show servers\n  servers: ${[\"test-Network-44\"].servers}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The private network identifier.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of this private network.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateNetwork.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "IP range associated with this private network in CIDR notation.\n* `vlan_id `- The VLAN of this private network.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when this private network was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of this private network.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The server identifier.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of this private network.\n"
                    },
                    "locationDefault": {
                        "type": "boolean",
                        "description": "Identifies network as the default private network for the specified location. Default value is `false`.\n"
                    },
                    "memberships": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getPrivateNetworkMembership:getPrivateNetworkMembership"
                        },
                        "description": "A list of resources that are members of this private network.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of this private network.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getPrivateNetworkServer:getPrivateNetworkServer"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the private network.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the private network.\n* `servers ` - (Deprecated) List of servers' details linked to the private network.\n"
                    },
                    "vlanId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "cidr",
                    "createdOn",
                    "description",
                    "id",
                    "location",
                    "locationDefault",
                    "memberships",
                    "name",
                    "servers",
                    "status",
                    "type",
                    "vlanId"
                ]
            }
        },
        "pnap:index/getProductAvailability:getProductAvailability": {
            "description": "Provides a phoenixNAP product availability datasource. This can be used to read product availabilities.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch product availabilities by product category, product codes and locations.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst query-1 = pnap.getProductAvailability({\n    productCategories: [\"SERVER\"],\n    productCodes: [\n        \"s1.c1.small\",\n        \"s1.c1.medium\",\n    ],\n    locations: [\n        \"PHX\",\n        \"ASH\",\n    ],\n});\nexport const availabilities = query_1.then(query_1 =\u003e query_1.productAvailabilities);\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\nquery_1 = pnap.get_product_availability(product_categories=[\"SERVER\"],\n    product_codes=[\n        \"s1.c1.small\",\n        \"s1.c1.medium\",\n    ],\n    locations=[\n        \"PHX\",\n        \"ASH\",\n    ])\npulumi.export(\"availabilities\", query_1.product_availabilities)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var query_1 = Pnap.GetProductAvailability.Invoke(new()\n    {\n        ProductCategories = new[]\n        {\n            \"SERVER\",\n        },\n        ProductCodes = new[]\n        {\n            \"s1.c1.small\",\n            \"s1.c1.medium\",\n        },\n        Locations = new[]\n        {\n            \"PHX\",\n            \"ASH\",\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"availabilities\"] = query_1.Apply(query_1 =\u003e query_1.Apply(getProductAvailabilityResult =\u003e getProductAvailabilityResult.ProductAvailabilities)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tquery_1, err := pnap.GetProductAvailability(ctx, \u0026pnap.GetProductAvailabilityArgs{\n\t\t\tProductCategories: []string{\n\t\t\t\t\"SERVER\",\n\t\t\t},\n\t\t\tProductCodes: []string{\n\t\t\t\t\"s1.c1.small\",\n\t\t\t\t\"s1.c1.medium\",\n\t\t\t},\n\t\t\tLocations: []string{\n\t\t\t\t\"PHX\",\n\t\t\t\t\"ASH\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"availabilities\", query_1.ProductAvailabilities)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetProductAvailabilityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var query-1 = PnapFunctions.getProductAvailability(GetProductAvailabilityArgs.builder()\n            .productCategories(\"SERVER\")\n            .productCodes(            \n                \"s1.c1.small\",\n                \"s1.c1.medium\")\n            .locations(            \n                \"PHX\",\n                \"ASH\")\n            .build());\n\n        ctx.export(\"availabilities\", query_1.productAvailabilities());\n    }\n}\n```\n```yaml\nvariables:\n  query-1:\n    fn::invoke:\n      Function: pnap:getProductAvailability\n      Arguments:\n        productCategories:\n          - SERVER\n        productCodes:\n          - s1.c1.small\n          - s1.c1.medium\n        locations:\n          - PHX\n          - ASH\noutputs:\n  # Show product availabilities\n  availabilities: ${[\"query-1\"].productAvailabilities}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProductAvailability.\n",
                "properties": {
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA` and `AUS`.\n"
                    },
                    "minQuantity": {
                        "type": "number",
                        "description": "Minimal quantity of product needed. Minimum, maximum and default values might differ for different products. For servers, they are 1, 10 and 1 respectively.\n"
                    },
                    "productCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Product category. Currently only `SERVER` category is supported.\n"
                    },
                    "productCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The code identifying the product. This code has significance across all locations.\n"
                    },
                    "showOnlyMinQuantityAvailable": {
                        "type": "boolean",
                        "description": "Show only locations where product with requested quantity is available or all locations where product is offered. Default value is `true`.\n"
                    },
                    "solutions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Currently only the following value is allowed: `SERVER_RANCHER`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProductAvailability.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The code identifying the location.\n"
                    },
                    "minQuantity": {
                        "type": "number"
                    },
                    "productAvailabilities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getProductAvailabilityProductAvailability:getProductAvailabilityProductAvailability"
                        },
                        "description": "List of product availabilities.\n"
                    },
                    "productCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The product category.\n"
                    },
                    "productCodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The code identifying the product.\n"
                    },
                    "showOnlyMinQuantityAvailable": {
                        "type": "boolean"
                    },
                    "solutions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "productAvailabilities",
                    "id"
                ]
            }
        },
        "pnap:index/getProducts:getProducts": {
            "description": "Provides a phoenixNAP products datasource. This can be used to read products.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch products by product category and show their details.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst query-B = pnap.getProducts({\n    productCategory: \"BANDWIDTH\",\n});\nexport const products = query_B.then(query_B =\u003e query_B.products);\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\nquery__b = pnap.get_products(product_category=\"BANDWIDTH\")\npulumi.export(\"products\", query__b.products)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var query_B = Pnap.GetProducts.Invoke(new()\n    {\n        ProductCategory = \"BANDWIDTH\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"products\"] = query_B.Apply(query_B =\u003e query_B.Apply(getProductsResult =\u003e getProductsResult.Products)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tquery_B, err := pnap.GetProducts(ctx, \u0026pnap.GetProductsArgs{\n\t\t\tProductCategory: pulumi.StringRef(\"BANDWIDTH\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"products\", query_B.Products)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetProductsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var query-B = PnapFunctions.getProducts(GetProductsArgs.builder()\n            .productCategory(\"BANDWIDTH\")\n            .build());\n\n        ctx.export(\"products\", query_B.products());\n    }\n}\n```\n```yaml\nvariables:\n  query-B:\n    fn::invoke:\n      Function: pnap:getProducts\n      Arguments:\n        productCategory: BANDWIDTH\noutputs:\n  # Show products\n  products: ${[\"query-B\"].products}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProducts.\n",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The location code. Currently the following values are allowed: `PHX`, `ASH`, `NLD`, `SGP`, `CHI`, `SEA`, `AUS` and `GLOBAL`.\n"
                    },
                    "productCategory": {
                        "type": "string",
                        "description": "The product category.\n"
                    },
                    "productCode": {
                        "type": "string",
                        "description": "The code identifying the product. This code has significance across all locations.\n"
                    },
                    "skuCode": {
                        "type": "string",
                        "description": "The SKU identifier.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProducts.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The code identifying the location.\n"
                    },
                    "productCategory": {
                        "type": "string",
                        "description": "The product category.\n"
                    },
                    "productCode": {
                        "type": "string",
                        "description": "The code identifying the product.\n"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getProductsProduct:getProductsProduct"
                        },
                        "description": "The list of products recorded.\n"
                    },
                    "skuCode": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "products",
                    "id"
                ]
            }
        },
        "pnap:index/getPublicNetwork:getPublicNetwork": {
            "description": "Provides a phoenixNAP Public Network datasource. This can be used to read public networks.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a public network by name and show it's IP Blocks \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nexport = async () =\u003e {\n    const public-Network-1 = await pnap.getPublicNetwork({\n        name: \"PubNet1\",\n    });\n    return {\n        \"iP-Blocks\": public_Network_1.ipBlocks,\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\npublic__network_1 = pnap.get_public_network(name=\"PubNet1\")\npulumi.export(\"iP-Blocks\", public__network_1.ip_blocks)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var public_Network_1 = Pnap.GetPublicNetwork.Invoke(new()\n    {\n        Name = \"PubNet1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"iP-Blocks\"] = public_Network_1.Apply(public_Network_1 =\u003e public_Network_1.Apply(getPublicNetworkResult =\u003e getPublicNetworkResult.IpBlocks)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpublic_Network_1, err := pnap.LookupPublicNetwork(ctx, \u0026pnap.LookupPublicNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"PubNet1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"iP-Blocks\", public_Network_1.IpBlocks)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetPublicNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var public-Network-1 = PnapFunctions.getPublicNetwork(GetPublicNetworkArgs.builder()\n            .name(\"PubNet1\")\n            .build());\n\n        ctx.export(\"iP-Blocks\", public_Network_1.ipBlocks());\n    }\n}\n```\n```yaml\nvariables:\n  public-Network-1:\n    fn::invoke:\n      Function: pnap:getPublicNetwork\n      Arguments:\n        name: PubNet1\noutputs:\n  # Show IP Blocks\n  iP-Blocks: ${[\"public-Network-1\"].ipBlocks}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPublicNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The public network identifier.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of this public network.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPublicNetwork.\n",
                "properties": {
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when this public network was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of this public network.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The IP Block identifier.\n"
                    },
                    "ipBlocks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getPublicNetworkIpBlock:getPublicNetworkIpBlock"
                        },
                        "description": "A list of IP Blocks that are associated with this public network.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of this public network.\n"
                    },
                    "memberships": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getPublicNetworkMembership:getPublicNetworkMembership"
                        },
                        "description": "A list of resources that are members of this public network.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of this public network.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the public network.\n"
                    },
                    "vlanId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "createdOn",
                    "description",
                    "id",
                    "ipBlocks",
                    "location",
                    "memberships",
                    "name",
                    "status",
                    "vlanId"
                ]
            }
        },
        "pnap:index/getQuota:getQuota": {
            "description": "Provides a phoenixNAP Quota datasource. This can be used to read Quotas.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a Quota by name and show it's details in alphabetical order\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst test = pnap.getQuota({\n    name: \"Public IPs\",\n});\nexport const quota = test;\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\ntest = pnap.get_quota(name=\"Public IPs\")\npulumi.export(\"quota\", test)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pnap.GetQuota.Invoke(new()\n    {\n        Name = \"Public IPs\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"quota\"] = test,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pnap.GetQuota(ctx, \u0026pnap.GetQuotaArgs{\n\t\t\tName: pulumi.StringRef(\"Public IPs\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"quota\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetQuotaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PnapFunctions.getQuota(GetQuotaArgs.builder()\n            .name(\"Public IPs\")\n            .build());\n\n        ctx.export(\"quota\", test.applyValue(getQuotaResult -\u003e getQuotaResult));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: pnap:getQuota\n      Arguments:\n        name: Public IPs\noutputs:\n  # Show the Quota details\n  quota: ${test}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getQuota.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Quota.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Quota.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getQuota.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Quota description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the Quota.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The new limit that is requested.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Quota.\n"
                    },
                    "quotaEditLimitRequestDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getQuotaQuotaEditLimitRequestDetail:getQuotaQuotaEditLimitRequestDetail"
                        },
                        "description": "List of requests to change the limit on a Quota.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the Quota.\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "Unit of the Quota type.\n"
                    },
                    "used": {
                        "type": "integer",
                        "description": "The Quota used expressed as a number.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "limit",
                    "name",
                    "quotaEditLimitRequestDetails",
                    "status",
                    "unit",
                    "used"
                ]
            }
        },
        "pnap:index/getRancherCluster:getRancherCluster": {
            "description": "Provides a phoenixNAP Rancher Cluster datasource. This can be used to read Rancher Server deployment details.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a Rancher Cluster by ID or name and show it's details in alphabetical order. \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nexport = async () =\u003e {\n    const test = await pnap.getRancherCluster({\n        id: \"123\",\n        name: \"Rancher-Deployment-1\",\n    });\n    return {\n        \"rancher-cluster\": test,\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\ntest = pnap.get_rancher_cluster(id=\"123\",\n    name=\"Rancher-Deployment-1\")\npulumi.export(\"rancher-cluster\", test)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pnap.GetRancherCluster.Invoke(new()\n    {\n        Id = \"123\",\n        Name = \"Rancher-Deployment-1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"rancher-cluster\"] = test,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pnap.LookupRancherCluster(ctx, \u0026pnap.LookupRancherClusterArgs{\n\t\t\tId:   pulumi.StringRef(\"123\"),\n\t\t\tName: pulumi.StringRef(\"Rancher-Deployment-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"rancher-cluster\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetRancherClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PnapFunctions.getRancherCluster(GetRancherClusterArgs.builder()\n            .id(\"123\")\n            .name(\"Rancher-Deployment-1\")\n            .build());\n\n        ctx.export(\"rancher-cluster\", test.applyValue(getRancherClusterResult -\u003e getRancherClusterResult));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: pnap:getRancherCluster\n      Arguments:\n        id: '123'\n        name: Rancher-Deployment-1\noutputs:\n  # Show the Rancher Cluster details\n  rancher-cluster: ${test}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRancherCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The cluster (Rancher Cluster) identifier.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Cluster name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRancherCluster.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Cluster description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The cluster identifier.\n"
                    },
                    "initialClusterVersion": {
                        "type": "string",
                        "description": "The Rancher version that was installed on the cluster during the first creation process.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Deployment location.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getRancherClusterMetadata:getRancherClusterMetadata"
                        },
                        "description": "Connection parameters to use to connect to the Rancher Server Administrative GUI.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the node pool.\n"
                    },
                    "nodePools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getRancherClusterNodePool:getRancherClusterNodePool"
                        },
                        "description": "The node pools associated with the cluster.\n"
                    },
                    "statusDescription": {
                        "type": "string",
                        "description": "The cluster status.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "initialClusterVersion",
                    "location",
                    "metadatas",
                    "name",
                    "nodePools",
                    "statusDescription"
                ]
            }
        },
        "pnap:index/getReservation:getReservation": {
            "description": "Provides a phoenixNAP reservation datasource. This can be used to read reservation details.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a reservation by ID or SKU and show it's details in alphabetical order. \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst test = pnap.getReservation({\n    id: \"e6afba51-7de8-4080-83ab-0f915570659c\",\n    sku: \"XXX-XXX-XXX\",\n});\nexport const reservation = test;\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\ntest = pnap.get_reservation(id=\"e6afba51-7de8-4080-83ab-0f915570659c\",\n    sku=\"XXX-XXX-XXX\")\npulumi.export(\"reservation\", test)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pnap.GetReservation.Invoke(new()\n    {\n        Id = \"e6afba51-7de8-4080-83ab-0f915570659c\",\n        Sku = \"XXX-XXX-XXX\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"reservation\"] = test,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pnap.LookupReservation(ctx, \u0026pnap.LookupReservationArgs{\n\t\t\tId:  pulumi.StringRef(\"e6afba51-7de8-4080-83ab-0f915570659c\"),\n\t\t\tSku: pulumi.StringRef(\"XXX-XXX-XXX\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"reservation\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetReservationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PnapFunctions.getReservation(GetReservationArgs.builder()\n            .id(\"e6afba51-7de8-4080-83ab-0f915570659c\")\n            .sku(\"XXX-XXX-XXX\")\n            .build());\n\n        ctx.export(\"reservation\", test.applyValue(getReservationResult -\u003e getReservationResult));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: pnap:getReservation\n      Arguments:\n        id: e6afba51-7de8-4080-83ab-0f915570659c\n        sku: XXX-XXX-XXX\noutputs:\n  # Show the reservation details\n  reservation: ${test}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getReservation.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The reservation identifier.\n"
                    },
                    "sku": {
                        "type": "string",
                        "description": "The SKU code of product pricing plan.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getReservation.\n",
                "properties": {
                    "assignedResourceId": {
                        "type": "string",
                        "description": "The resource ID currently being assigned to reservation.\n"
                    },
                    "autoRenew": {
                        "type": "boolean",
                        "description": "A flag indicating whether the reservation will auto-renew (default is true, it can only be modified after the creation of resource).\n"
                    },
                    "endDateTime": {
                        "type": "string",
                        "description": "The point in time (in UTC) when the reservation ends.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The reservation identifier.\n"
                    },
                    "initialInvoiceModel": {
                        "type": "string",
                        "description": "Reservations created with initial invoice model ON_CREATION will be invoiced on same date when reservation is created. Reservation created with CALENDAR_MONTH initial invoice model will be invoiced at the begining of next month.\n"
                    },
                    "lastRenewalDateTime": {
                        "type": "string",
                        "description": "The point in time (in UTC) when the reservation was renewed last.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location code.\n"
                    },
                    "nextBillingDate": {
                        "type": "string",
                        "description": "Next billing date for reservation.\n"
                    },
                    "nextRenewalDateTime": {
                        "type": "string",
                        "description": "The point in time (in UTC) when the reservation will be renewed if auto renew is set to true.\n"
                    },
                    "price": {
                        "type": "number",
                        "description": "Reservation price.\n"
                    },
                    "priceUnit": {
                        "type": "string",
                        "description": "The unit to which the price applies.\n"
                    },
                    "productCategory": {
                        "type": "string",
                        "description": "The product category.\n"
                    },
                    "productCode": {
                        "type": "string",
                        "description": "The code identifying the product. This code has significance across all locations.\n"
                    },
                    "reservationModel": {
                        "type": "string",
                        "description": "The reservation model.\n"
                    },
                    "sku": {
                        "type": "string",
                        "description": "The SKU applied to this reservation.\n"
                    },
                    "startDateTime": {
                        "type": "string",
                        "description": "The point in time (in UTC) when the reservation starts.\n"
                    }
                },
                "type": "object",
                "required": [
                    "assignedResourceId",
                    "autoRenew",
                    "endDateTime",
                    "id",
                    "initialInvoiceModel",
                    "lastRenewalDateTime",
                    "location",
                    "nextBillingDate",
                    "nextRenewalDateTime",
                    "price",
                    "priceUnit",
                    "productCategory",
                    "productCode",
                    "reservationModel",
                    "sku",
                    "startDateTime"
                ]
            }
        },
        "pnap:index/getServer:getServer": {
            "description": "Provides a phoenixNAP server datasource. This can be used to read servers.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a server data by hostname and show it's primary public IP address\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst serverDs = pnap.getServer({\n    hostname: \"demo-server\",\n});\nexport const serverId = serverDs.then(serverDs =\u003e serverDs.primaryIpAddress);\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\nserver_ds = pnap.get_server(hostname=\"demo-server\")\npulumi.export(\"serverId\", server_ds.primary_ip_address)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var serverDs = Pnap.GetServer.Invoke(new()\n    {\n        Hostname = \"demo-server\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serverId\"] = serverDs.Apply(getServerResult =\u003e getServerResult.PrimaryIpAddress),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tserverDs, err := pnap.LookupServer(ctx, \u0026pnap.LookupServerArgs{\n\t\t\tHostname: pulumi.StringRef(\"demo-server\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serverId\", serverDs.PrimaryIpAddress)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var serverDs = PnapFunctions.getServer(GetServerArgs.builder()\n            .hostname(\"demo-server\")\n            .build());\n\n        ctx.export(\"serverId\", serverDs.applyValue(getServerResult -\u003e getServerResult.primaryIpAddress()));\n    }\n}\n```\n```yaml\nvariables:\n  serverDs:\n    fn::invoke:\n      Function: pnap:getServer\n      Arguments:\n        hostname: demo-server\noutputs:\n  # Show IP address\n  serverId: ${serverDs.primaryIpAddress}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServer.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "Server hostname.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the server.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServer.\n",
                "properties": {
                    "hostname": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The network identifier.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Server Location ID. Cannot be changed once a server is created.\n"
                    },
                    "netrisControllers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getServerNetrisController:getServerNetrisController"
                        },
                        "description": "Netris Controller configuration properties.\n"
                    },
                    "netrisSoftgates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getServerNetrisSoftgate:getServerNetrisSoftgate"
                        },
                        "description": "Netris Softgate configuration properties.\n"
                    },
                    "networkConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getServerNetworkConfiguration:getServerNetworkConfiguration"
                        },
                        "description": "Entire network details of bare metal server.\n"
                    },
                    "networkType": {
                        "type": "string",
                        "description": "The type of network configuration for this server.\n"
                    },
                    "os": {
                        "type": "string",
                        "description": "The server’s OS ID used when the server was created.\n"
                    },
                    "primaryIpAddress": {
                        "type": "string",
                        "description": "First usable public IP Address.\n"
                    },
                    "privateIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Private IP Addresses assigned to server. Must contain at least 1 item.\n"
                    },
                    "publicIpAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Public IP Addresses assigned to server. Must contain at least 1 item.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the server.\n"
                    },
                    "storageConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getServerStorageConfiguration:getServerStorageConfiguration"
                        },
                        "description": "Storage configuration.\n"
                    },
                    "supersededBy": {
                        "type": "string",
                        "description": "Unique identifier of the server to which the reservation has been transferred.\n"
                    },
                    "supersedes": {
                        "type": "string",
                        "description": "Unique identifier of the server from which the reservation has been transferred.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getServerTag:getServerTag"
                        },
                        "description": "The tags assigned to the server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Server type ID. Cannot be changed once a server is created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostname",
                    "id",
                    "location",
                    "netrisControllers",
                    "netrisSoftgates",
                    "networkConfigurations",
                    "networkType",
                    "os",
                    "primaryIpAddress",
                    "privateIpAddresses",
                    "publicIpAddresses",
                    "status",
                    "storageConfigurations",
                    "supersededBy",
                    "supersedes",
                    "tags",
                    "type"
                ]
            }
        },
        "pnap:index/getSshKey:getSshKey": {
            "description": "Provides a phoenixNAP SSH key datasource. This can be used to read SSH keys.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a SSH key by name and show it's key \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst test = pnap.getSshKey({\n    name: \"test3\",\n});\nexport const key = test.then(test =\u003e test.key);\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\ntest = pnap.get_ssh_key(name=\"test3\")\npulumi.export(\"key\", test.key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pnap.GetSshKey.Invoke(new()\n    {\n        Name = \"test3\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"key\"] = test.Apply(getSshKeyResult =\u003e getSshKeyResult.Key),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pnap.LookupSshKey(ctx, \u0026pnap.LookupSshKeyArgs{\n\t\t\tName: pulumi.StringRef(\"test3\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"key\", test.Key)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PnapFunctions.getSshKey(GetSshKeyArgs.builder()\n            .name(\"test3\")\n            .build());\n\n        ctx.export(\"key\", test.applyValue(getSshKeyResult -\u003e getSshKeyResult.key()));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: pnap:getSshKey\n      Arguments:\n        name: test3\noutputs:\n  # Show the key\n  key: ${test.key}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the SSH Key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly SSH key name to represent an SSH key.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "Keys marked as default are always included on server creation and reset unless toggled off in creation/reset request.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the SSH Key.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "SSH Key value.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Friendly SSH key name to represent an SSH key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "default",
                    "id",
                    "key",
                    "name"
                ]
            }
        },
        "pnap:index/getStorageNetwork:getStorageNetwork": {
            "description": "Provides a phoenixNAP Storage Network datasource. This can be used to read storage networks.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a storage network by name and show it's volumes\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst storage-Network-1 = pnap.getStorageNetwork({\n    name: \"Storage-1\",\n});\nexport const volumes = storage_Network_1.then(storage_Network_1 =\u003e storage_Network_1.volumes);\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\nstorage__network_1 = pnap.get_storage_network(name=\"Storage-1\")\npulumi.export(\"volumes\", storage__network_1.volumes)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storage_Network_1 = Pnap.GetStorageNetwork.Invoke(new()\n    {\n        Name = \"Storage-1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"volumes\"] = storage_Network_1.Apply(storage_Network_1 =\u003e storage_Network_1.Apply(getStorageNetworkResult =\u003e getStorageNetworkResult.Volumes)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tstorage_Network_1, err := pnap.LookupStorageNetwork(ctx, \u0026pnap.LookupStorageNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"Storage-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"volumes\", storage_Network_1.Volumes)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetStorageNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var storage-Network-1 = PnapFunctions.getStorageNetwork(GetStorageNetworkArgs.builder()\n            .name(\"Storage-1\")\n            .build());\n\n        ctx.export(\"volumes\", storage_Network_1.volumes());\n    }\n}\n```\n```yaml\nvariables:\n  storage-Network-1:\n    fn::invoke:\n      Function: pnap:getStorageNetwork\n      Arguments:\n        name: Storage-1\noutputs:\n  # Show volumes\n  volumes: ${[\"storage-Network-1\"].volumes}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStorageNetwork.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The storage network identifier.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The friendly name of this storage network.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStorageNetwork.\n",
                "properties": {
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when this volume was created.\n"
                    },
                    "deleteRequestedOn": {
                        "type": "string",
                        "description": "Date and time of the initial request for volume deletion.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Volume description.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique id of the tag.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP of the storage network\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location of this storage network.\n* `network_id `- ID of network the storage belongs to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the tag.\n"
                    },
                    "networkId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Volume's status.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getStorageNetworkVolume:getStorageNetworkVolume"
                        },
                        "description": "Volume for the storage network.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdOn",
                    "deleteRequestedOn",
                    "description",
                    "id",
                    "ips",
                    "location",
                    "name",
                    "networkId",
                    "status",
                    "volumes"
                ]
            }
        },
        "pnap:index/getTag:getTag": {
            "description": "Provides a phoenixNAP tag datasource. This can be used to read tags.\n\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFetch a tag by name and show it's details.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pnap from \"@pulumi/pnap\";\n\nconst test = pnap.getTag({\n    name: \"tag3\",\n});\nexport const details = test;\n```\n```python\nimport pulumi\nimport pulumi_pnap as pnap\n\ntest = pnap.get_tag(name=\"tag3\")\npulumi.export(\"details\", test)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pnap = Pulumi.Pnap;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Pnap.GetTag.Invoke(new()\n    {\n        Name = \"tag3\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"details\"] = test,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/phoenixnap/pulumi-pnap/sdk/go/pnap\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := pnap.LookupTag(ctx, \u0026pnap.LookupTagArgs{\n\t\t\tName: pulumi.StringRef(\"tag3\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"details\", test)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.pnap.PnapFunctions;\nimport com.pulumi.pnap.inputs.GetTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = PnapFunctions.getTag(GetTagArgs.builder()\n            .name(\"tag3\")\n            .build());\n\n        ctx.export(\"details\", test.applyValue(getTagResult -\u003e getTagResult));\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: pnap:getTag\n      Arguments:\n        name: tag3\noutputs:\n  # Show the key\n  details: ${test}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTag.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the tag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the tag.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTag.\n",
                "properties": {
                    "createdBy": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the tag.\n* `is_billing_tag `- Whether or not to show the tag as part of billing and invoices.\n* `resource_assignments ` - The tag's assigned resources.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the tag.\n"
                    },
                    "isBillingTag": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the tag.\n"
                    },
                    "resourceAssignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/pnap:index/getTagResourceAssignment:getTagResourceAssignment"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The optional values of the tag..\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdBy",
                    "description",
                    "id",
                    "isBillingTag",
                    "name",
                    "resourceAssignments",
                    "values"
                ]
            }
        }
    }
}